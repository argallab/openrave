#define IKFAST_NAMESPACE ik_barrettwam
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 68 generated on 2013-08-05 18:45:09.147452
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==68);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.045)*x1);
x15=((1.0)*x5);
x16=((0.3)*x1);
x17=((1.0)*x11);
x18=((0.045)*x5);
x19=((1.0)*x1);
x20=((0.22)*x8);
x21=((1.0)*x12);
x22=((0.22)*x5);
x23=((1.0)*x6);
x24=((0.22)*x9);
x25=((0.22)*x6);
x26=(x0*x4);
x27=(x0*x2);
x28=(x2*x7);
x29=(x3*x4);
x30=(x0*x7);
x31=(x2*x3);
x32=(x3*x7);
x33=((1.0)*x29);
x34=((0.045)*x29);
x35=((0.045)*x26);
x36=(x19*x6);
x37=(x32*x6);
x38=(x4*x7*x9);
x39=(x15*x30);
x40=(x23*x30);
x41=(x14*x27);
x42=(x15*x32);
x43=(x23*x32);
x44=(x14*x31);
x45=((((-1.0)*x33))+((x1*x27)));
x46=(x26+((x1*x31)));
x47=((((-1.0)*x19*x29))+x27);
x48=((((-1.0)*x36))+((x28*x5)));
x49=((((-1.0)*x19*x27))+x33);
x50=((((-1.0)*x31))+(((-1.0)*x19*x26)));
x51=((((-1.0)*x26))+(((-1.0)*x19*x31)));
x52=(((x1*x15))+((x23*x28)));
x53=((-1.0)*x52);
x54=(x35+x44);
x55=(x46*x6);
x56=(x11*x48);
x57=(x45*x6);
x58=(x5*x51);
x59=(x50*x9);
x60=((((-1.0)*x39))+x57);
x61=((((-1.0)*x42))+x55);
x62=((((-1.0)*x40))+((x49*x5)));
x63=((((-1.0)*x43))+x58);
x64=(((x4*x7*x8))+((x52*x9)));
x65=(((x53*x8))+x38);
x66=(x11*x63);
x67=(((x47*x9))+((x61*x8)));
x68=(((x9*((x42+(((-1.0)*x23*x46))))))+((x47*x8)));
x69=(((x60*x8))+x59);
x70=(x12*x67);
x71=(((x50*x8))+((x9*((x39+(((-1.0)*x57)))))));
eerot[0]=(((x10*x71))+((x13*((((x12*x69))+((x11*x62)))))));
eerot[1]=(((x13*x71))+((x10*(((((-1.0)*x21*x69))+(((-1.0)*x17*x62)))))));
eerot[2]=(((x11*x69))+((x12*(((((-1.0)*x15*x49))+x40)))));
eetrans[0]=((0.22)+(((-1.0)*x34))+((x11*((((x20*x60))+((x24*x50))))))+((x5*(((((-0.3)*x29))+((x16*x27))))))+((x18*x30))+((x12*(((((-1.0)*x22*x49))+((x25*x30))))))+(((0.3)*x30*x6))+(((0.55)*x30))+x41+((x6*(((((-1.0)*x41))+x34)))));
eerot[3]=(((x13*((x70+x66))))+((x10*x68)));
eerot[4]=(((x10*(((((-1.0)*x21*x67))+(((-1.0)*x17*x63))))))+((x13*x68)));
eerot[5]=(((x12*((x43+(((-1.0)*x15*x51))))))+((x11*x67)));
eetrans[1]=((0.14)+((x18*x32))+(((-1.0)*x54*x6))+((x11*((((x20*x61))+((x24*x47))))))+((x12*((((x25*x32))+(((-1.0)*x22*x51))))))+(((0.55)*x32))+x54+((x5*((((x16*x31))+(((0.3)*x26))))))+(((0.3)*x37)));
eerot[6]=(((x10*x64))+((x13*((((x12*x65))+x56)))));
eerot[7]=(((x13*x64))+((x10*(((((-1.0)*x17*x48))+(((-1.0)*x21*x65)))))));
eerot[8]=(((x11*x65))+((x12*(((((-1.0)*x15*x28))+x36)))));
IkReal x72=((0.045)*x28);
eetrans[2]=((0.346)+(((-0.3)*x28*x5))+(((-1.0)*x72))+((x14*x5))+((x12*((((x1*x25))+(((-1.0)*x22*x28))))))+((x16*x6))+((x6*x72))+(((0.55)*x1))+((x11*((((x20*x53))+((x24*x4*x7)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.22)+(((-0.22)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.14)+(((-0.22)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346)+(((-0.22)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*py*r20))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*pz*r00)));
rxp0_2=((((-1.0)*px*r10))+((py*r00)));
rxp1_0=((((-1.0)*py*r21))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*pz*r01)));
rxp1_2=((((-1.0)*px*r11))+((py*r01)));
rxp2_0=((((-1.0)*py*r22))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*pz*r02)));
rxp2_2=((((-1.0)*px*r12))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x73=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));
j3array[0]=((-1.34027003705633)+(((-1.0)*x73)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+x73);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[2];
dummyeval[0]=((px*px)+(py*py));
dummyeval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x74=cj2*cj2;
IkReal x75=sj3*sj3;
IkReal x76=cj3*cj3;
IkReal x77=((0.045)*cj2);
IkReal x78=((13.3333333333333)*cj3*sj3);
dummyeval[0]=((IKabs(((((-1.0)*cj3*x77))+(((0.3)*cj2*sj3))+x77)))+(IKabs(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
dummyeval[1]=((149.382716049383)+(((44.4444444444444)*x76))+(((24.4444444444444)*sj3))+(((13.3333333333333)*sj3*x74))+(((-2.0)*cj3*x74))+(((44.4444444444444)*x74*x75))+(((-1.0)*x74*x78))+x75+x74+x78+((x74*x76))+(((162.962962962963)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x79=cj2*cj2;
IkReal x80=sj2*sj2;
IkReal x81=px*px;
IkReal x82=py*py;
IkReal x83=py*py*py*py;
IkReal x84=sj2*sj2*sj2*sj2;
IkReal x85=cj2*cj2*cj2*cj2;
IkReal x86=((1.0)*px*py);
IkReal x87=(x81*x82);
IkReal x88=((2.0)*x79*x80);
dummyeval[0]=(((x84*x87))+((x85*x87))+((x83*x84))+((x83*x88))+((x83*x85))+((x87*x88)));
dummyeval[1]=((IKabs((((x79*x82))+((x80*x82)))))+(IKabs(((((-1.0)*x80*x86))+(((-1.0)*x79*x86))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(py);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal x89=cj2*cj2;
IkReal x90=sj3*sj3;
IkReal x91=cj3*cj3;
IkReal x92=((0.045)*cj2);
IkReal x93=((13.3333333333333)*cj3*sj3);
dummyeval[0]=((IKabs(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))+(IKabs(((((0.3)*cj2*sj3))+x92+(((-1.0)*cj3*x92))))));
dummyeval[1]=((149.382716049383)+(((44.4444444444444)*x89*x90))+((x89*x91))+(((24.4444444444444)*sj3))+x89+x90+x93+(((-2.0)*cj3*x89))+(((162.962962962963)*cj3))+(((13.3333333333333)*sj3*x89))+(((44.4444444444444)*x91))+(((-1.0)*x89*x93)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x94=px*px;
IkReal x95=((1.0)*x94);
dummyeval[0]=((((-1.0)*x95*(sj2*sj2)))+(((-1.0)*x95*(cj2*cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x96=px*px;
IkReal x97=(px*sj2);
IkReal x98=((1.0)*x96);
CheckValue<IkReal> x99=IKPowWithIntegerCheck(((((-1.0)*x98*(cj2*cj2)))+(((-1.0)*x98*(sj2*sj2)))),-1);
if(!x99.valid){
continue;
}
sj0array[0]=((x99.value)*(((((-0.045)*cj3*x97))+(((0.3)*sj3*x97))+(((0.045)*x97)))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x100=((0.045)*sj2);
evalcond[0]=((((0.3)*sj2*sj3))+((px*(IKsin(j0))))+(((-1.0)*cj3*x100))+x100);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst158;
gconst158=IKsign((((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))));
dummyeval[0]=(((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst159;
gconst159=IKsign((((cj2*(cj0*cj0)*(px*px)))+((cj2*(pz*pz)))));
dummyeval[0]=(((cj2*(cj0*cj0)*(px*px)))+((cj2*(pz*pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x101=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*sj0)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=x101;
evalcond[2]=x101;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst161;
gconst161=IKsign(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))));
IkReal x102=IKsign(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))));
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
dummyeval[1]=((IKabs((cj0*px*x102)))+(IKabs((pz*x102))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal gconst160;
gconst160=IKsign(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))));
IkReal x104=IKsign(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))));
IkReal x103=x104*x104;
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if(((cj0*px*x103*(cj0)*(px))) < -0.00001)
continue;
if(((pz*x103*(pz))) < -0.00001)
continue;
dummyeval[1]=((IKsqrt((cj0*px*x103*(cj0)*(px))))+(IKsqrt((pz*x103*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst162;
gconst162=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x105=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x105);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x105)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x283=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x283);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x283)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x284=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x284);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x284)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x285=((0.045)*sj3);
IkReal x286=((0.3)*cj3);
IkReal x287=(cj0*px);
CheckValue<IkReal> x288 = IKatan2WithCheck((gconst162*(((((-1.0)*x285*x287))+(((-0.55)*x287))+(((-1.0)*x286*x287))))),(gconst162*(((((-0.55)*pz))+(((-1.0)*pz*x286))+(((-1.0)*pz*x285))))),IKFAST_ATAN2_MAGTHRESH);
if(!x288.valid){
continue;
}
j1array[0]=x288.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x289=IKsin(j1);
IkReal x290=IKcos(j1);
IkReal x291=((0.045)*sj3);
IkReal x292=((0.3)*cj3);
IkReal x293=(cj0*px);
IkReal x294=(pz*x290);
evalcond[0]=(((x290*x293))+(((-1.0)*pz*x289)));
evalcond[1]=((-0.55)+((x289*x293))+(((-1.0)*x292))+(((-1.0)*x291))+x294);
evalcond[2]=((((-1.0)*x290*x292))+(((-1.0)*x290*x291))+(((-0.55)*x290))+pz);
evalcond[3]=((((-1.0)*x293))+((x289*x292))+((x289*x291))+(((0.55)*x289)));
evalcond[4]=((-0.2125)+(((-0.09)*px*sj0))+(((-1.0)*pp))+(((1.1)*x289*x293))+(((1.1)*x294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x295=((-1.0)*gconst160);
CheckValue<IkReal> x296 = IKatan2WithCheck((cj0*px*x295),(pz*x295),IKFAST_ATAN2_MAGTHRESH);
if(!x296.valid){
continue;
}
j1array[0]=x296.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x297=IKsin(j1);
IkReal x298=IKcos(j1);
IkReal x299=((0.045)*sj3);
IkReal x300=((0.3)*cj3);
IkReal x301=(cj0*px);
IkReal x302=(pz*x298);
evalcond[0]=((((-1.0)*pz*x297))+((x298*x301)));
evalcond[1]=((-0.55)+(((-1.0)*x299))+x302+((x297*x301))+(((-1.0)*x300)));
evalcond[2]=((((-1.0)*x298*x300))+(((-0.55)*x298))+(((-1.0)*x298*x299))+pz);
evalcond[3]=((((0.55)*x297))+(((-1.0)*x301))+((x297*x300))+((x297*x299)));
evalcond[4]=((-0.2125)+(((-0.09)*px*sj0))+(((-1.0)*pp))+(((1.1)*x302))+(((1.1)*x297*x301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x303 = IKatan2WithCheck((cj0*gconst161*px),(gconst161*pz),IKFAST_ATAN2_MAGTHRESH);
if(!x303.valid){
continue;
}
j1array[0]=x303.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x304=IKsin(j1);
IkReal x305=IKcos(j1);
IkReal x306=((0.045)*sj3);
IkReal x307=((0.3)*cj3);
IkReal x308=(cj0*px);
IkReal x309=(pz*x305);
evalcond[0]=((((-1.0)*pz*x304))+((x305*x308)));
evalcond[1]=((-0.55)+x309+((x304*x308))+(((-1.0)*x307))+(((-1.0)*x306)));
evalcond[2]=((((-0.55)*x305))+pz+(((-1.0)*x305*x306))+(((-1.0)*x305*x307)));
evalcond[3]=((((0.55)*x304))+(((-1.0)*x308))+((x304*x306))+((x304*x307)));
evalcond[4]=((-0.2125)+(((-0.09)*px*sj0))+(((-1.0)*pp))+(((1.1)*x309))+(((1.1)*x304*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x310=((0.3)*sj3);
IkReal x311=((0.045)*cj3);
IkReal x312=(px*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-0.045)+x311+x312+(((-1.0)*x310)));
evalcond[2]=((0.045)+x310+(((-1.0)*x311))+(((-1.0)*x312)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst164;
gconst164=IKsign(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))));
IkReal x313=IKsign(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))));
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
dummyeval[1]=((IKabs((cj0*px*x313)))+(IKabs((pz*x313))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal gconst163;
gconst163=IKsign(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))));
IkReal x315=IKsign(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))));
IkReal x314=x315*x315;
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if(((pz*x314*(pz))) < -0.00001)
continue;
if(((cj0*px*x314*(cj0)*(px))) < -0.00001)
continue;
dummyeval[1]=((IKsqrt((pz*x314*(pz))))+(IKsqrt((cj0*px*x314*(cj0)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst165;
gconst165=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x316=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x316);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x316)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x317=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x317);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x317)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x318=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x318);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x318)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x319=((0.045)*sj3);
IkReal x320=((0.3)*cj3);
IkReal x321=(cj0*px);
CheckValue<IkReal> x322 = IKatan2WithCheck((gconst165*(((((-0.55)*x321))+(((-1.0)*x320*x321))+(((-1.0)*x319*x321))))),(gconst165*(((((-0.55)*pz))+(((-1.0)*pz*x319))+(((-1.0)*pz*x320))))),IKFAST_ATAN2_MAGTHRESH);
if(!x322.valid){
continue;
}
j1array[0]=x322.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x323=IKsin(j1);
IkReal x324=IKcos(j1);
IkReal x325=((0.045)*sj3);
IkReal x326=((0.3)*cj3);
IkReal x327=((1.0)*cj0*px);
IkReal x328=(pz*x324);
IkReal x329=(cj0*px*x323);
evalcond[0]=(((pz*x323))+(((-1.0)*x324*x327)));
evalcond[1]=((-0.55)+(((-1.0)*x326))+(((-1.0)*x325))+x328+x329);
evalcond[2]=((((-0.55)*x324))+pz+(((-1.0)*x324*x325))+(((-1.0)*x324*x326)));
evalcond[3]=(((x323*x326))+((x323*x325))+(((-1.0)*x327))+(((0.55)*x323)));
evalcond[4]=((-0.2125)+(((1.1)*x328))+(((1.1)*x329))+(((-1.0)*pp))+(((0.09)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x330=((-1.0)*gconst163);
CheckValue<IkReal> x331 = IKatan2WithCheck((cj0*px*x330),(pz*x330),IKFAST_ATAN2_MAGTHRESH);
if(!x331.valid){
continue;
}
j1array[0]=x331.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x332=IKsin(j1);
IkReal x333=IKcos(j1);
IkReal x334=((0.045)*sj3);
IkReal x335=((0.3)*cj3);
IkReal x336=((1.0)*cj0*px);
IkReal x337=(pz*x333);
IkReal x338=(cj0*px*x332);
evalcond[0]=((((-1.0)*x333*x336))+((pz*x332)));
evalcond[1]=((-0.55)+x338+x337+(((-1.0)*x334))+(((-1.0)*x335)));
evalcond[2]=((((-0.55)*x333))+(((-1.0)*x333*x334))+(((-1.0)*x333*x335))+pz);
evalcond[3]=((((0.55)*x332))+((x332*x335))+((x332*x334))+(((-1.0)*x336)));
evalcond[4]=((-0.2125)+(((1.1)*x337))+(((1.1)*x338))+(((-1.0)*pp))+(((0.09)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x339 = IKatan2WithCheck((cj0*gconst164*px),(gconst164*pz),IKFAST_ATAN2_MAGTHRESH);
if(!x339.valid){
continue;
}
j1array[0]=x339.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x340=IKsin(j1);
IkReal x341=IKcos(j1);
IkReal x342=((0.045)*sj3);
IkReal x343=((0.3)*cj3);
IkReal x344=((1.0)*cj0*px);
IkReal x345=(pz*x341);
IkReal x346=(cj0*px*x340);
evalcond[0]=(((pz*x340))+(((-1.0)*x341*x344)));
evalcond[1]=((-0.55)+x346+x345+(((-1.0)*x343))+(((-1.0)*x342)));
evalcond[2]=((((-0.55)*x341))+pz+(((-1.0)*x341*x342))+(((-1.0)*x341*x343)));
evalcond[3]=((((0.55)*x340))+((x340*x343))+((x340*x342))+(((-1.0)*x344)));
evalcond[4]=((-0.2125)+(((1.1)*x346))+(((1.1)*x345))+(((-1.0)*pp))+(((0.09)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x347=((0.045)*sj2);
CheckValue<IkReal> x348=IKPowWithIntegerCheck(px,-2);
if(!x348.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x348.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj3*x347))+(((0.3)*sj2*sj3))+x347+px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=pz;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+px+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x349=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x349);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x349)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x351=IKPowWithIntegerCheck(pz,-1);
if(!x351.valid){
continue;
}
IkReal x350=x351.value;
cj1array[0]=((((0.55)*x350))+(((0.045)*sj3*x350))+(((0.3)*cj3*x350)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x352=IKsin(j1);
IkReal x353=IKcos(j1);
IkReal x354=((0.045)*sj3);
IkReal x355=((0.3)*cj3);
evalcond[0]=((-1.0)*pz*x352);
evalcond[1]=((-0.2125)+(((-0.09)*px))+(((1.1)*pz*x353))+(((-1.0)*pp)));
evalcond[2]=(((x352*x355))+((x352*x354))+(((0.55)*x352)));
evalcond[3]=((((-0.55)*x353))+pz+(((-1.0)*x353*x354))+(((-1.0)*x353*x355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x356=IKPowWithIntegerCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),-1);
if(!x356.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x356.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x357=IKcos(j1);
IkReal x358=IKsin(j1);
IkReal x359=((0.045)*sj3);
IkReal x360=((0.3)*cj3);
IkReal x361=(pz*x357);
evalcond[0]=((-1.0)*pz*x358);
evalcond[1]=((-0.55)+(((-1.0)*x360))+(((-1.0)*x359))+x361);
evalcond[2]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp))+(((1.1)*x361)));
evalcond[3]=(((x358*x360))+(((0.55)*x358))+((x358*x359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*px))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x362=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x362);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x362)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x364=IKPowWithIntegerCheck(pz,-1);
if(!x364.valid){
continue;
}
IkReal x363=x364.value;
cj1array[0]=((((0.045)*sj3*x363))+(((0.55)*x363))+(((0.3)*cj3*x363)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x365=IKsin(j1);
IkReal x366=IKcos(j1);
IkReal x367=((0.045)*sj3);
IkReal x368=((0.3)*cj3);
evalcond[0]=(pz*x365);
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px))+(((1.1)*pz*x366)));
evalcond[2]=((((0.55)*x365))+((x365*x367))+((x365*x368)));
evalcond[3]=((((-1.0)*x366*x368))+(((-1.0)*x366*x367))+(((-0.55)*x366))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x369=IKPowWithIntegerCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),-1);
if(!x369.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x369.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x370=IKcos(j1);
IkReal x371=IKsin(j1);
IkReal x372=((0.045)*sj3);
IkReal x373=((0.3)*cj3);
IkReal x374=(pz*x370);
evalcond[0]=(pz*x371);
evalcond[1]=((-0.55)+(((-1.0)*x372))+(((-1.0)*x373))+x374);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px))+(((1.1)*x374)));
evalcond[3]=((((0.55)*x371))+((x371*x373))+((x371*x372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst166;
gconst166=IKsign(pz);
IkReal x375=IKsign(pz);
IkReal x376=(sj3*x375);
IkReal x377=(cj3*x375);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((-0.045)*x375))+(((-0.3)*x376))+(((0.045)*x377)))))+(IKabs(((((0.55)*x375))+(((0.3)*x377))+(((0.045)*x376))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x378=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x378)));
op[1]=0;
op[2]=((1.0)+x378);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x379=((0.045)*sj3);
IkReal x380=((0.3)*cj3);
CheckValue<IkReal> x381=IKPowWithIntegerCheck((((pz*x379))+((pz*x380))+(((0.55)*pz))),-1);
if(!x381.valid){
continue;
}
CheckValue<IkReal> x382=IKPowWithIntegerCheck(pz,-1);
if(!x382.valid){
continue;
}
if( IKabs(((x381.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x382.value)*(((0.55)+x380+x379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x381.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x382.value)*(((0.55)+x380+x379))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x381.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x382.value)*(((0.55)+x380+x379))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x383=IKcos(j1);
IkReal x384=IKsin(j1);
IkReal x385=((0.045)*cj3);
IkReal x386=((0.3)*cj3);
IkReal x387=(sj3*x384);
IkReal x388=(cj3*x384);
IkReal x389=(sj3*x383);
IkReal x390=(pz*x384);
IkReal x391=(pz*x383);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x391+(((-1.0)*x386)));
evalcond[1]=((0.045)+x390+(((-1.0)*x385))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x390))+(((1.1)*x391)));
evalcond[3]=((((0.55)*x384))+((x384*x386))+(((0.045)*x387))+(((0.045)*x383))+(((0.3)*x389))+(((-1.0)*x383*x385)));
evalcond[4]=((((-0.55)*x383))+(((-1.0)*x384*x385))+(((0.045)*x384))+pz+(((-0.045)*x389))+(((0.3)*x387))+(((-1.0)*x383*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x393=IKPowWithIntegerCheck(pz,-1);
if(!x393.valid){
continue;
}
IkReal x392=x393.value;
if( IKabs(((0.111111111111111)*x392*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x392*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x392*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x392*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x392*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x392*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x394=IKcos(j1);
IkReal x395=IKsin(j1);
IkReal x396=((0.045)*cj3);
IkReal x397=((0.3)*cj3);
IkReal x398=(sj3*x395);
IkReal x399=(cj3*x395);
IkReal x400=(sj3*x394);
IkReal x401=(pz*x395);
IkReal x402=(pz*x394);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x397))+x402);
evalcond[1]=((0.045)+(((-1.0)*x396))+x401+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x402))+(((-1.0)*pp))+(((-0.09)*x401)));
evalcond[3]=((((0.3)*x400))+(((0.045)*x394))+(((0.045)*x398))+(((-1.0)*x394*x396))+((x395*x397))+(((0.55)*x395)));
evalcond[4]=((((0.045)*x395))+(((-1.0)*x394*x397))+(((-0.045)*x400))+(((-1.0)*x395*x396))+(((0.3)*x398))+pz+(((-0.55)*x394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x403 = IKatan2WithCheck((gconst166*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst166*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x403.valid){
continue;
}
j1array[0]=x403.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x404=IKcos(j1);
IkReal x405=IKsin(j1);
IkReal x406=((0.045)*cj3);
IkReal x407=((0.3)*cj3);
IkReal x408=(sj3*x405);
IkReal x409=(cj3*x405);
IkReal x410=(sj3*x404);
IkReal x411=(pz*x405);
IkReal x412=(pz*x404);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x412+(((-1.0)*x407)));
evalcond[1]=((0.045)+x411+(((0.3)*sj3))+(((-1.0)*x406)));
evalcond[2]=((-0.2125)+(((1.1)*x412))+(((-1.0)*pp))+(((-0.09)*x411)));
evalcond[3]=((((0.3)*x410))+(((0.045)*x404))+(((0.045)*x408))+((x405*x407))+(((-1.0)*x404*x406))+(((0.55)*x405)));
evalcond[4]=((((0.045)*x405))+(((0.3)*x408))+(((-0.045)*x410))+(((-1.0)*x404*x407))+pz+(((-1.0)*x405*x406))+(((-0.55)*x404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)*px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst167;
gconst167=IKsign(pz);
IkReal x413=IKsign(pz);
IkReal x414=(sj3*x413);
IkReal x415=(cj3*x413);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.3)*x414))+(((0.045)*x413))+(((-0.045)*x415)))))+(IKabs(((((0.3)*x415))+(((0.045)*x414))+(((0.55)*x413))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x416=((2.40588235294118)*sj3);
op[0]=((1.0)+x416);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x416)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x417=((0.045)*sj3);
IkReal x418=((0.3)*cj3);
CheckValue<IkReal> x419=IKPowWithIntegerCheck((((pz*x418))+((pz*x417))+(((0.55)*pz))),-1);
if(!x419.valid){
continue;
}
CheckValue<IkReal> x420=IKPowWithIntegerCheck(pz,-1);
if(!x420.valid){
continue;
}
if( IKabs(((x419.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x420.value)*(((0.55)+x417+x418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x419.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x420.value)*(((0.55)+x417+x418))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x419.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x420.value)*(((0.55)+x417+x418))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x421=IKcos(j1);
IkReal x422=IKsin(j1);
IkReal x423=((0.045)*cj3);
IkReal x424=((0.3)*cj3);
IkReal x425=(sj3*x422);
IkReal x426=(cj3*x422);
IkReal x427=(sj3*x421);
IkReal x428=(pz*x422);
IkReal x429=(pz*x421);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x424))+x429);
evalcond[1]=((0.045)+(((-1.0)*x428))+(((-1.0)*x423))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x429))+(((0.09)*x428))+(((-1.0)*pp)));
evalcond[3]=((((-0.3)*x427))+(((-0.045)*x421))+(((0.045)*x425))+(((0.55)*x422))+((x422*x424))+((x421*x423)));
evalcond[4]=((((-0.55)*x421))+(((-0.3)*x425))+(((-1.0)*x421*x424))+(((-0.045)*x422))+(((-0.045)*x427))+pz+((x422*x423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x431=IKPowWithIntegerCheck(pz,-1);
if(!x431.valid){
continue;
}
IkReal x430=x431.value;
if( IKabs(((0.111111111111111)*x430*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x430*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x430*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x430*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x430*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x430*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x432=IKcos(j1);
IkReal x433=IKsin(j1);
IkReal x434=((0.045)*cj3);
IkReal x435=((0.3)*cj3);
IkReal x436=(sj3*x433);
IkReal x437=(cj3*x433);
IkReal x438=(sj3*x432);
IkReal x439=(pz*x433);
IkReal x440=(pz*x432);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x435))+x440);
evalcond[1]=((0.045)+(((-1.0)*x434))+(((-1.0)*x439))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x440))+(((0.09)*x439))+(((-1.0)*pp)));
evalcond[3]=((((-0.3)*x438))+(((-0.045)*x432))+((x433*x435))+(((0.045)*x436))+((x432*x434))+(((0.55)*x433)));
evalcond[4]=((((-0.55)*x432))+(((-0.3)*x436))+(((-1.0)*x432*x435))+(((-0.045)*x438))+(((-0.045)*x433))+pz+((x433*x434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x441 = IKatan2WithCheck((gconst167*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst167*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
j1array[0]=x441.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x442=IKcos(j1);
IkReal x443=IKsin(j1);
IkReal x444=((0.045)*cj3);
IkReal x445=((0.3)*cj3);
IkReal x446=(sj3*x443);
IkReal x447=(cj3*x443);
IkReal x448=(sj3*x442);
IkReal x449=(pz*x443);
IkReal x450=(pz*x442);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x445))+x450);
evalcond[1]=((0.045)+(((-1.0)*x444))+(((-1.0)*x449))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x449))+(((-1.0)*pp))+(((1.1)*x450)));
evalcond[3]=((((-0.3)*x448))+(((-0.045)*x442))+((x442*x444))+((x443*x445))+(((0.045)*x446))+(((0.55)*x443)));
evalcond[4]=((((-0.3)*x446))+(((-0.55)*x442))+(((-0.045)*x448))+(((-0.045)*x443))+pz+((x443*x444))+(((-1.0)*x442*x445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x451=(px*sj2);
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=(cj2*px);
evalcond[3]=((0.045)+(((-0.045)*cj3))+x451+(((0.3)*sj3)));
evalcond[4]=((-0.2125)+(((-0.09)*x451))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x452=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x452);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x452)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x454=IKPowWithIntegerCheck(pz,-1);
if(!x454.valid){
continue;
}
IkReal x453=x454.value;
CheckValue<IkReal> x455=IKPowWithIntegerCheck(cj2,-1);
if(!x455.valid){
continue;
}
if( IKabs((x453*(x455.value)*(((-0.045)+(((0.045)*cj3))+(((-1.0)*px*sj2))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x453*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x453*(x455.value)*(((-0.045)+(((0.045)*cj3))+(((-1.0)*px*sj2))+(((-0.3)*sj3))))))+IKsqr((x453*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x453*(x455.value)*(((-0.045)+(((0.045)*cj3))+(((-1.0)*px*sj2))+(((-0.3)*sj3))))), (x453*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x456=IKsin(j1);
IkReal x457=IKcos(j1);
IkReal x458=((0.045)*cj3);
IkReal x459=(px*sj2);
IkReal x460=((0.3)*sj3);
IkReal x461=((0.045)*sj3);
IkReal x462=((0.3)*cj3);
IkReal x463=((0.045)*x456);
IkReal x464=((0.3)*x456);
IkReal x465=(cj2*x457);
IkReal x466=(pz*x457);
IkReal x467=(pz*x456);
evalcond[0]=((((-1.0)*sj2*x467))+((cj2*px)));
evalcond[1]=((-0.55)+(((-1.0)*x461))+(((-1.0)*x462))+x466);
evalcond[2]=((0.045)+((cj2*x467))+(((-1.0)*x458))+x459+x460);
evalcond[3]=((-0.2125)+(((1.1)*x466))+(((-0.09)*x459))+(((-0.09)*cj2*x467))+(((-1.0)*pp)));
evalcond[4]=(((x456*x461))+((x456*x462))+(((0.55)*x456))+(((0.045)*x465))+((x460*x465))+(((-1.0)*x458*x465)));
evalcond[5]=((((-1.0)*cj2*x456*x458))+((cj2*x456*x460))+(((-0.55)*x457))+((cj2*x463))+pz+(((-1.0)*x457*x461))+(((-1.0)*x457*x462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x469=IKPowWithIntegerCheck(pz,-1);
if(!x469.valid){
continue;
}
IkReal x468=x469.value;
CheckValue<IkReal> x470=IKPowWithIntegerCheck(sj2,-1);
if(!x470.valid){
continue;
}
if( IKabs((cj2*px*x468*(x470.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x468*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*px*x468*(x470.value)))+IKsqr((x468*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((cj2*px*x468*(x470.value)), (x468*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x471=IKsin(j1);
IkReal x472=IKcos(j1);
IkReal x473=((0.045)*cj3);
IkReal x474=(px*sj2);
IkReal x475=((0.3)*sj3);
IkReal x476=((0.045)*sj3);
IkReal x477=((0.3)*cj3);
IkReal x478=((0.045)*x471);
IkReal x479=((0.3)*x471);
IkReal x480=(cj2*x472);
IkReal x481=(pz*x472);
IkReal x482=(pz*x471);
evalcond[0]=((((-1.0)*sj2*x482))+((cj2*px)));
evalcond[1]=((-0.55)+(((-1.0)*x477))+(((-1.0)*x476))+x481);
evalcond[2]=((0.045)+((cj2*x482))+(((-1.0)*x473))+x474+x475);
evalcond[3]=((-0.2125)+(((-0.09)*cj2*x482))+(((-0.09)*x474))+(((1.1)*x481))+(((-1.0)*pp)));
evalcond[4]=(((x471*x477))+((x471*x476))+(((0.55)*x471))+((x475*x480))+(((0.045)*x480))+(((-1.0)*x473*x480)));
evalcond[5]=((((-1.0)*cj2*x471*x473))+((cj2*x478))+(((-0.55)*x472))+(((-1.0)*x472*x476))+(((-1.0)*x472*x477))+((cj2*x471*x475))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x483=((0.045)*sj2);
CheckValue<IkReal> x484=IKPowWithIntegerCheck(px,-2);
if(!x484.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x484.value)*(pz*pz))))), 6.28318530717959)));
evalcond[1]=((((0.3)*sj2*sj3))+(((-1.0)*cj3*x483))+(((-1.0)*px))+x483);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=pz;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*px))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x485=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x485);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x485)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x487=IKPowWithIntegerCheck(pz,-1);
if(!x487.valid){
continue;
}
IkReal x486=x487.value;
cj1array[0]=((((0.3)*cj3*x486))+(((0.55)*x486))+(((0.045)*sj3*x486)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x488=IKsin(j1);
IkReal x489=IKcos(j1);
IkReal x490=((0.045)*sj3);
IkReal x491=((0.3)*cj3);
evalcond[0]=((-1.0)*pz*x488);
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px))+(((1.1)*pz*x489)));
evalcond[2]=(((x488*x491))+((x488*x490))+(((0.55)*x488)));
evalcond[3]=((((-1.0)*x489*x491))+(((-1.0)*x489*x490))+(((-0.55)*x489))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x492=IKPowWithIntegerCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),-1);
if(!x492.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x492.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x493=IKcos(j1);
IkReal x494=IKsin(j1);
IkReal x495=((0.045)*sj3);
IkReal x496=((0.3)*cj3);
IkReal x497=(pz*x493);
evalcond[0]=((-1.0)*pz*x494);
evalcond[1]=((-0.55)+(((-1.0)*x496))+(((-1.0)*x495))+x497);
evalcond[2]=((-0.2125)+(((1.1)*x497))+(((-1.0)*pp))+(((0.09)*px)));
evalcond[3]=((((0.55)*x494))+((x494*x495))+((x494*x496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+px+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x498=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x498);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x498)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x500=IKPowWithIntegerCheck(pz,-1);
if(!x500.valid){
continue;
}
IkReal x499=x500.value;
cj1array[0]=((((0.3)*cj3*x499))+(((0.55)*x499))+(((0.045)*sj3*x499)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x501=IKsin(j1);
IkReal x502=IKcos(j1);
IkReal x503=((0.045)*sj3);
IkReal x504=((0.3)*cj3);
evalcond[0]=(pz*x501);
evalcond[1]=((-0.2125)+(((-0.09)*px))+(((1.1)*pz*x502))+(((-1.0)*pp)));
evalcond[2]=((((0.55)*x501))+((x501*x504))+((x501*x503)));
evalcond[3]=((((-1.0)*x502*x504))+(((-1.0)*x502*x503))+(((-0.55)*x502))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x505=IKPowWithIntegerCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),-1);
if(!x505.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x505.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x506=IKcos(j1);
IkReal x507=IKsin(j1);
IkReal x508=((0.045)*sj3);
IkReal x509=((0.3)*cj3);
IkReal x510=(pz*x506);
evalcond[0]=(pz*x507);
evalcond[1]=((-0.55)+(((-1.0)*x509))+(((-1.0)*x508))+x510);
evalcond[2]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp))+(((1.1)*x510)));
evalcond[3]=(((x507*x508))+((x507*x509))+(((0.55)*x507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)*px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst168;
gconst168=IKsign(pz);
IkReal x511=IKsign(pz);
IkReal x512=(sj3*x511);
IkReal x513=(cj3*x511);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.3)*x513))+(((0.55)*x511))+(((0.045)*x512)))))+(IKabs(((((-0.3)*x512))+(((-0.045)*x511))+(((0.045)*x513))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x514=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x514)));
op[1]=0;
op[2]=((1.0)+x514);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x515=((0.045)*sj3);
IkReal x516=((0.3)*cj3);
CheckValue<IkReal> x517=IKPowWithIntegerCheck((((pz*x515))+((pz*x516))+(((0.55)*pz))),-1);
if(!x517.valid){
continue;
}
CheckValue<IkReal> x518=IKPowWithIntegerCheck(pz,-1);
if(!x518.valid){
continue;
}
if( IKabs(((x517.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x518.value)*(((0.55)+x516+x515)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x517.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x518.value)*(((0.55)+x516+x515))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x517.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x518.value)*(((0.55)+x516+x515))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x519=IKcos(j1);
IkReal x520=IKsin(j1);
IkReal x521=((0.045)*cj3);
IkReal x522=((0.3)*cj3);
IkReal x523=(sj3*x520);
IkReal x524=(cj3*x520);
IkReal x525=(sj3*x519);
IkReal x526=(pz*x520);
IkReal x527=(pz*x519);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x522))+x527);
evalcond[1]=((0.045)+(((-1.0)*x521))+x526+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x527))+(((-1.0)*pp))+(((-0.09)*x526)));
evalcond[3]=((((0.3)*x525))+(((0.045)*x523))+((x520*x522))+(((0.55)*x520))+(((0.045)*x519))+(((-1.0)*x519*x521)));
evalcond[4]=((((0.3)*x523))+(((-0.045)*x525))+(((-1.0)*x520*x521))+(((0.045)*x520))+pz+(((-0.55)*x519))+(((-1.0)*x519*x522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x529=IKPowWithIntegerCheck(pz,-1);
if(!x529.valid){
continue;
}
IkReal x528=x529.value;
if( IKabs(((0.111111111111111)*x528*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x528*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x528*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x528*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x528*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x528*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x530=IKcos(j1);
IkReal x531=IKsin(j1);
IkReal x532=((0.045)*cj3);
IkReal x533=((0.3)*cj3);
IkReal x534=(sj3*x531);
IkReal x535=(cj3*x531);
IkReal x536=(sj3*x530);
IkReal x537=(pz*x531);
IkReal x538=(pz*x530);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x533))+x538);
evalcond[1]=((0.045)+(((-1.0)*x532))+x537+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x538))+(((-1.0)*pp))+(((-0.09)*x537)));
evalcond[3]=((((0.3)*x536))+(((0.045)*x530))+(((0.045)*x534))+(((-1.0)*x530*x532))+((x531*x533))+(((0.55)*x531)));
evalcond[4]=((((0.3)*x534))+(((-0.045)*x536))+(((0.045)*x531))+(((-1.0)*x530*x533))+(((-1.0)*x531*x532))+pz+(((-0.55)*x530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x539 = IKatan2WithCheck((gconst168*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst168*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x539.valid){
continue;
}
j1array[0]=x539.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x540=IKcos(j1);
IkReal x541=IKsin(j1);
IkReal x542=((0.045)*cj3);
IkReal x543=((0.3)*cj3);
IkReal x544=(sj3*x541);
IkReal x545=(cj3*x541);
IkReal x546=(sj3*x540);
IkReal x547=(pz*x541);
IkReal x548=(pz*x540);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x543))+x548);
evalcond[1]=((0.045)+(((-1.0)*x542))+x547+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x547))+(((1.1)*x548))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x544))+(((0.045)*x540))+(((0.3)*x546))+((x541*x543))+(((-1.0)*x540*x542))+(((0.55)*x541)));
evalcond[4]=((((-1.0)*x541*x542))+(((0.045)*x541))+(((0.3)*x544))+(((-0.045)*x546))+(((-1.0)*x540*x543))+pz+(((-0.55)*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst169;
gconst169=IKsign(pz);
IkReal x549=IKsign(pz);
IkReal x550=(sj3*x549);
IkReal x551=(cj3*x549);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.045)*x550))+(((0.3)*x551))+(((0.55)*x549)))))+(IKabs(((((0.045)*x549))+(((0.3)*x550))+(((-0.045)*x551))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x552=((2.40588235294118)*sj3);
op[0]=((1.0)+x552);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x552)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x553=((0.045)*sj3);
IkReal x554=((0.3)*cj3);
CheckValue<IkReal> x555=IKPowWithIntegerCheck((((pz*x554))+((pz*x553))+(((0.55)*pz))),-1);
if(!x555.valid){
continue;
}
CheckValue<IkReal> x556=IKPowWithIntegerCheck(pz,-1);
if(!x556.valid){
continue;
}
if( IKabs(((x555.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x556.value)*(((0.55)+x553+x554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x555.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x556.value)*(((0.55)+x553+x554))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x555.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x556.value)*(((0.55)+x553+x554))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x557=IKcos(j1);
IkReal x558=IKsin(j1);
IkReal x559=((0.045)*cj3);
IkReal x560=((0.3)*cj3);
IkReal x561=(sj3*x558);
IkReal x562=(cj3*x558);
IkReal x563=(sj3*x557);
IkReal x564=(pz*x558);
IkReal x565=(pz*x557);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x565+(((-1.0)*x560)));
evalcond[1]=((0.045)+(((-1.0)*x559))+(((-1.0)*x564))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x564))+(((1.1)*x565)));
evalcond[3]=(((x558*x560))+(((-0.045)*x557))+((x557*x559))+(((0.045)*x561))+(((0.55)*x558))+(((-0.3)*x563)));
evalcond[4]=((((-0.045)*x558))+(((-1.0)*x557*x560))+pz+((x558*x559))+(((-0.045)*x563))+(((-0.55)*x557))+(((-0.3)*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x567=IKPowWithIntegerCheck(pz,-1);
if(!x567.valid){
continue;
}
IkReal x566=x567.value;
if( IKabs(((0.111111111111111)*x566*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x566*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x566*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x566*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x566*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x566*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x568=IKcos(j1);
IkReal x569=IKsin(j1);
IkReal x570=((0.045)*cj3);
IkReal x571=((0.3)*cj3);
IkReal x572=(sj3*x569);
IkReal x573=(cj3*x569);
IkReal x574=(sj3*x568);
IkReal x575=(pz*x569);
IkReal x576=(pz*x568);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x571))+x576);
evalcond[1]=((0.045)+(((-1.0)*x575))+(((-1.0)*x570))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x575))+(((1.1)*x576)));
evalcond[3]=((((0.045)*x572))+(((0.55)*x569))+(((-0.3)*x574))+((x569*x571))+(((-0.045)*x568))+((x568*x570)));
evalcond[4]=((((-0.55)*x568))+(((-0.045)*x574))+(((-0.3)*x572))+pz+((x569*x570))+(((-0.045)*x569))+(((-1.0)*x568*x571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x577 = IKatan2WithCheck((gconst169*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst169*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x577.valid){
continue;
}
j1array[0]=x577.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x578=IKcos(j1);
IkReal x579=IKsin(j1);
IkReal x580=((0.045)*cj3);
IkReal x581=((0.3)*cj3);
IkReal x582=(sj3*x579);
IkReal x583=(cj3*x579);
IkReal x584=(sj3*x578);
IkReal x585=(pz*x579);
IkReal x586=(pz*x578);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x586+(((-1.0)*x581)));
evalcond[1]=((0.045)+(((-1.0)*x585))+(((0.3)*sj3))+(((-1.0)*x580)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x585))+(((1.1)*x586)));
evalcond[3]=(((x578*x580))+((x579*x581))+(((-0.045)*x578))+(((0.045)*x582))+(((-0.3)*x584))+(((0.55)*x579)));
evalcond[4]=((((-0.55)*x578))+((x579*x580))+(((-1.0)*x578*x581))+(((-0.045)*x579))+pz+(((-0.045)*x584))+(((-0.3)*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x587=(px*sj2);
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((-1.0)*cj2*px);
evalcond[3]=((0.045)+(((-1.0)*x587))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x587)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x588=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x588);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x588)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x590=IKPowWithIntegerCheck(pz,-1);
if(!x590.valid){
continue;
}
IkReal x589=x590.value;
CheckValue<IkReal> x591=IKPowWithIntegerCheck(cj2,-1);
if(!x591.valid){
continue;
}
if( IKabs((x589*(x591.value)*(((-0.045)+(((0.045)*cj3))+((px*sj2))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x589*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x589*(x591.value)*(((-0.045)+(((0.045)*cj3))+((px*sj2))+(((-0.3)*sj3))))))+IKsqr((x589*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x589*(x591.value)*(((-0.045)+(((0.045)*cj3))+((px*sj2))+(((-0.3)*sj3))))), (x589*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x592=IKsin(j1);
IkReal x593=IKcos(j1);
IkReal x594=((0.045)*cj3);
IkReal x595=(px*sj2);
IkReal x596=((0.3)*sj3);
IkReal x597=((0.045)*sj3);
IkReal x598=((0.3)*cj3);
IkReal x599=((0.045)*x592);
IkReal x600=((0.3)*x592);
IkReal x601=(cj2*x593);
IkReal x602=(pz*x593);
IkReal x603=(pz*x592);
evalcond[0]=((((-1.0)*sj2*x603))+(((-1.0)*cj2*px)));
evalcond[1]=((-0.55)+(((-1.0)*x598))+(((-1.0)*x597))+x602);
evalcond[2]=((0.045)+((cj2*x603))+(((-1.0)*x595))+(((-1.0)*x594))+x596);
evalcond[3]=((-0.2125)+(((0.09)*x595))+(((-1.0)*pp))+(((1.1)*x602))+(((-0.09)*cj2*x603)));
evalcond[4]=((((0.55)*x592))+(((0.045)*x601))+((x596*x601))+(((-1.0)*x594*x601))+((x592*x598))+((x592*x597)));
evalcond[5]=(((cj2*x592*x596))+(((-0.55)*x593))+(((-1.0)*x593*x598))+(((-1.0)*x593*x597))+((cj2*x599))+pz+(((-1.0)*cj2*x592*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x605=IKPowWithIntegerCheck(pz,-1);
if(!x605.valid){
continue;
}
IkReal x604=x605.value;
CheckValue<IkReal> x606=IKPowWithIntegerCheck(sj2,-1);
if(!x606.valid){
continue;
}
if( IKabs(((-1.0)*cj2*px*x604*(x606.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x604*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj2*px*x604*(x606.value)))+IKsqr((x604*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.0)*cj2*px*x604*(x606.value)), (x604*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x607=IKsin(j1);
IkReal x608=IKcos(j1);
IkReal x609=((0.045)*cj3);
IkReal x610=(px*sj2);
IkReal x611=((0.3)*sj3);
IkReal x612=((0.045)*sj3);
IkReal x613=((0.3)*cj3);
IkReal x614=((0.045)*x607);
IkReal x615=((0.3)*x607);
IkReal x616=(cj2*x608);
IkReal x617=(pz*x608);
IkReal x618=(pz*x607);
evalcond[0]=((((-1.0)*sj2*x618))+(((-1.0)*cj2*px)));
evalcond[1]=((-0.55)+(((-1.0)*x613))+(((-1.0)*x612))+x617);
evalcond[2]=((0.045)+((cj2*x618))+(((-1.0)*x610))+x611+(((-1.0)*x609)));
evalcond[3]=((-0.2125)+(((0.09)*x610))+(((1.1)*x617))+(((-1.0)*pp))+(((-0.09)*cj2*x618)));
evalcond[4]=((((0.55)*x607))+(((-1.0)*x609*x616))+(((0.045)*x616))+((x611*x616))+((x607*x612))+((x607*x613)));
evalcond[5]=((((-0.55)*x608))+((cj2*x614))+(((-1.0)*cj2*x607*x609))+((cj2*x607*x611))+pz+(((-1.0)*x608*x613))+(((-1.0)*x608*x612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x619=(px*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=x619;
evalcond[2]=x619;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst170;
gconst170=IKsign(pz);
IkReal x620=IKsign(pz);
IkReal x621=(sj3*x620);
IkReal x622=(cj3*x620);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.3)*x622))+(((0.55)*x620))+(((0.045)*x621)))))+(IKabs(((((-0.3)*x621))+(((-0.045)*x620))+(((0.045)*x622))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x623=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x623)));
op[1]=0;
op[2]=((1.0)+x623);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x624=((0.045)*sj3);
IkReal x625=((0.3)*cj3);
CheckValue<IkReal> x626=IKPowWithIntegerCheck((((pz*x624))+((pz*x625))+(((0.55)*pz))),-1);
if(!x626.valid){
continue;
}
CheckValue<IkReal> x627=IKPowWithIntegerCheck(pz,-1);
if(!x627.valid){
continue;
}
if( IKabs(((x626.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x627.value)*(((0.55)+x625+x624)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x626.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x627.value)*(((0.55)+x625+x624))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x626.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x627.value)*(((0.55)+x625+x624))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x628=IKcos(j1);
IkReal x629=IKsin(j1);
IkReal x630=((0.045)*cj3);
IkReal x631=((0.3)*cj3);
IkReal x632=(sj3*x629);
IkReal x633=(cj3*x629);
IkReal x634=(sj3*x628);
IkReal x635=(pz*x629);
IkReal x636=(pz*x628);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x631))+x636);
evalcond[1]=((0.045)+(((-1.0)*x630))+x635+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x636))+(((-0.09)*x635))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x628*x630))+((x629*x631))+(((0.3)*x634))+(((0.55)*x629))+(((0.045)*x628))+(((0.045)*x632)));
evalcond[4]=((((-1.0)*x629*x630))+(((-1.0)*x628*x631))+(((-0.045)*x634))+pz+(((-0.55)*x628))+(((0.3)*x632))+(((0.045)*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x638=IKPowWithIntegerCheck(pz,-1);
if(!x638.valid){
continue;
}
IkReal x637=x638.value;
if( IKabs(((0.111111111111111)*x637*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x637*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x637*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x637*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x637*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x637*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x639=IKcos(j1);
IkReal x640=IKsin(j1);
IkReal x641=((0.045)*cj3);
IkReal x642=((0.3)*cj3);
IkReal x643=(sj3*x640);
IkReal x644=(cj3*x640);
IkReal x645=(sj3*x639);
IkReal x646=(pz*x640);
IkReal x647=(pz*x639);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x642))+x647);
evalcond[1]=((0.045)+(((-1.0)*x641))+x646+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x646))+(((-1.0)*pp))+(((1.1)*x647)));
evalcond[3]=((((0.55)*x640))+(((-1.0)*x639*x641))+((x640*x642))+(((0.045)*x643))+(((0.3)*x645))+(((0.045)*x639)));
evalcond[4]=((((-1.0)*x640*x641))+(((-1.0)*x639*x642))+(((0.045)*x640))+pz+(((-0.55)*x639))+(((-0.045)*x645))+(((0.3)*x643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x648 = IKatan2WithCheck((gconst170*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst170*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x648.valid){
continue;
}
j1array[0]=x648.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x649=IKcos(j1);
IkReal x650=IKsin(j1);
IkReal x651=((0.045)*cj3);
IkReal x652=((0.3)*cj3);
IkReal x653=(sj3*x650);
IkReal x654=(cj3*x650);
IkReal x655=(sj3*x649);
IkReal x656=(pz*x650);
IkReal x657=(pz*x649);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x652))+x657);
evalcond[1]=((0.045)+(((-1.0)*x651))+x656+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x656))+(((-1.0)*pp))+(((1.1)*x657)));
evalcond[3]=((((0.55)*x650))+(((0.045)*x649))+(((0.045)*x653))+(((-1.0)*x649*x651))+(((0.3)*x655))+((x650*x652)));
evalcond[4]=((((-0.55)*x649))+(((0.045)*x650))+pz+(((-1.0)*x650*x651))+(((-0.045)*x655))+(((-1.0)*x649*x652))+(((0.3)*x653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x658=(px*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=x658;
evalcond[2]=((-1.0)*x658);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst171;
gconst171=IKsign(pz);
IkReal x659=IKsign(pz);
IkReal x660=(sj3*x659);
IkReal x661=(cj3*x659);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.3)*x661))+(((0.55)*x659))+(((0.045)*x660)))))+(IKabs(((((0.3)*x660))+(((0.045)*x659))+(((-0.045)*x661))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x662=((2.40588235294118)*sj3);
op[0]=((1.0)+x662);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x662)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x663=((0.045)*sj3);
IkReal x664=((0.3)*cj3);
CheckValue<IkReal> x665=IKPowWithIntegerCheck((((pz*x664))+((pz*x663))+(((0.55)*pz))),-1);
if(!x665.valid){
continue;
}
CheckValue<IkReal> x666=IKPowWithIntegerCheck(pz,-1);
if(!x666.valid){
continue;
}
if( IKabs(((x665.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x666.value)*(((0.55)+x663+x664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x665.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x666.value)*(((0.55)+x663+x664))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x665.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x666.value)*(((0.55)+x663+x664))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x667=IKcos(j1);
IkReal x668=IKsin(j1);
IkReal x669=((0.045)*cj3);
IkReal x670=((0.3)*cj3);
IkReal x671=(sj3*x668);
IkReal x672=(cj3*x668);
IkReal x673=(sj3*x667);
IkReal x674=(pz*x668);
IkReal x675=(pz*x667);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x675+(((-1.0)*x670)));
evalcond[1]=((0.045)+(((-1.0)*x669))+(((-1.0)*x674))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x674))+(((1.1)*x675))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x671))+((x667*x669))+(((0.55)*x668))+(((-0.3)*x673))+((x668*x670))+(((-0.045)*x667)));
evalcond[4]=((((-0.045)*x673))+((x668*x669))+(((-0.55)*x667))+(((-0.3)*x671))+(((-1.0)*x667*x670))+pz+(((-0.045)*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x677=IKPowWithIntegerCheck(pz,-1);
if(!x677.valid){
continue;
}
IkReal x676=x677.value;
if( IKabs(((0.111111111111111)*x676*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x676*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x676*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x676*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x676*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x676*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x678=IKcos(j1);
IkReal x679=IKsin(j1);
IkReal x680=((0.045)*cj3);
IkReal x681=((0.3)*cj3);
IkReal x682=(sj3*x679);
IkReal x683=(cj3*x679);
IkReal x684=(sj3*x678);
IkReal x685=(pz*x679);
IkReal x686=(pz*x678);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x681))+x686);
evalcond[1]=((0.045)+(((-1.0)*x680))+(((0.3)*sj3))+(((-1.0)*x685)));
evalcond[2]=((-0.2125)+(((1.1)*x686))+(((-1.0)*pp))+(((0.09)*x685)));
evalcond[3]=((((0.045)*x682))+((x678*x680))+(((-0.045)*x678))+(((-0.3)*x684))+(((0.55)*x679))+((x679*x681)));
evalcond[4]=((((-0.045)*x679))+(((-0.045)*x684))+(((-0.3)*x682))+(((-1.0)*x678*x681))+(((-0.55)*x678))+((x679*x680))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x687 = IKatan2WithCheck((gconst171*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst171*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
j1array[0]=x687.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x688=IKcos(j1);
IkReal x689=IKsin(j1);
IkReal x690=((0.045)*cj3);
IkReal x691=((0.3)*cj3);
IkReal x692=(sj3*x689);
IkReal x693=(cj3*x689);
IkReal x694=(sj3*x688);
IkReal x695=(pz*x689);
IkReal x696=(pz*x688);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x696+(((-1.0)*x691)));
evalcond[1]=((0.045)+(((-1.0)*x690))+(((0.3)*sj3))+(((-1.0)*x695)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x695))+(((1.1)*x696)));
evalcond[3]=((((0.55)*x689))+((x688*x690))+(((-0.045)*x688))+((x689*x691))+(((0.045)*x692))+(((-0.3)*x694)));
evalcond[4]=((((-0.045)*x689))+((x689*x690))+(((-1.0)*x688*x691))+pz+(((-0.045)*x694))+(((-0.55)*x688))+(((-0.3)*x692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x697=((0.3)*sj3);
IkReal x698=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((((-1.0)*sj2*x698))+(((0.045)*sj2))+((sj2*x697)));
evalcond[3]=0;
evalcond[4]=((0.045)+x697+(((-1.0)*x698)));
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-2.40588235294118)*cj2*sj3))+(((-1.0)*cj2)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*cj2);
op[1]=0;
op[2]=cj2;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*cj2);
op[1]=0;
op[2]=cj2;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x699=((2.40588235294118)*cj2*sj3);
op[0]=((((-1.0)*x699))+(((-1.0)*cj2)));
op[1]=0;
op[2]=(cj2+x699);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x700=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=x700;
evalcond[2]=x700;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((277777777.777778)*pz);
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x701=IKsin(j1);
IkReal x702=IKcos(j1);
IkReal x703=(pz*x702);
evalcond[0]=((3.6e-9)*x701);
evalcond[1]=((-1.0)*pz*x701);
evalcond[2]=((-3.6e-9)+x703);
evalcond[3]=((-0.2125)+(((1.1)*x703))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((277777777.777778)*pz);
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x704=IKsin(j1);
IkReal x705=IKcos(j1);
IkReal x706=(pz*x705);
evalcond[0]=((3.6e-9)*x704);
evalcond[1]=((-1.0)*pz*x704);
evalcond[2]=((-3.6e-9)+x706);
evalcond[3]=((-0.2125)+(((1.1)*x706))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.85)+(((-2.045)*sj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)))))+(IKabs(IKabs(pz))));
evalcond[1]=-3.6e-9;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)))))+(IKabs(IKabs(pz))));
evalcond[1]=-3.6e-9;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x708=IKPowWithIntegerCheck(pz,-1);
if(!x708.valid){
continue;
}
IkReal x707=x708.value;
cj1array[0]=((((0.85)*x707))+(((2.045)*sj3*x707)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x709=IKsin(j1);
IkReal x710=IKcos(j1);
IkReal x711=((2.045)*sj3);
evalcond[0]=((-1.0)*pz*x709);
evalcond[1]=((-0.2125)+(((1.1)*pz*x710))+(((-1.0)*pp)));
evalcond[2]=((((0.85)*x709))+((x709*x711)));
evalcond[3]=((((-1.0)*x710*x711))+pz+(((-0.85)*x710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x712=IKPowWithIntegerCheck(((-0.85)+(((-2.045)*sj3))),-1);
if(!x712.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x712.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x713=IKcos(j1);
IkReal x714=IKsin(j1);
IkReal x715=((2.045)*sj3);
IkReal x716=(pz*x713);
evalcond[0]=((-1.0)*pz*x714);
evalcond[1]=((-0.85)+(((-1.0)*x715))+x716);
evalcond[2]=((-0.2125)+(((1.1)*x716))+(((-1.0)*pp)));
evalcond[3]=(((x714*x715))+(((0.85)*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x717=((0.3)*sj3);
IkReal x718=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((-0.045)+(((-1.0)*x717))+x718);
evalcond[2]=((0.045)+(((-1.0)*x718))+x717);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((277777777.777778)*pz);
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x719=IKsin(j1);
IkReal x720=IKcos(j1);
IkReal x721=(pz*x720);
evalcond[0]=(pz*x719);
evalcond[1]=((3.6e-9)*x719);
evalcond[2]=((-3.6e-9)+x721);
evalcond[3]=((-0.2125)+(((1.1)*x721))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((277777777.777778)*pz);
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x722=IKsin(j1);
IkReal x723=IKcos(j1);
IkReal x724=(pz*x723);
evalcond[0]=(pz*x722);
evalcond[1]=((3.6e-9)*x722);
evalcond[2]=((-3.6e-9)+x724);
evalcond[3]=((-0.2125)+(((1.1)*x724))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.85)+(((-2.045)*sj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)))))+(IKabs(IKabs(pz))));
evalcond[1]=-3.6e-9;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)))))+(IKabs(IKabs(pz))));
evalcond[1]=-3.6e-9;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x726=IKPowWithIntegerCheck(pz,-1);
if(!x726.valid){
continue;
}
IkReal x725=x726.value;
cj1array[0]=((((2.045)*sj3*x725))+(((0.85)*x725)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x727=IKsin(j1);
IkReal x728=IKcos(j1);
IkReal x729=((2.045)*sj3);
evalcond[0]=(pz*x727);
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz*x728)));
evalcond[2]=(((x727*x729))+(((0.85)*x727)));
evalcond[3]=(pz+(((-1.0)*x728*x729))+(((-0.85)*x728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x730=IKPowWithIntegerCheck(((-0.85)+(((-2.045)*sj3))),-1);
if(!x730.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x730.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x731=IKcos(j1);
IkReal x732=IKsin(j1);
IkReal x733=((2.045)*sj3);
IkReal x734=(pz*x731);
evalcond[0]=(pz*x732);
evalcond[1]=((-0.85)+(((-1.0)*x733))+x734);
evalcond[2]=((-0.2125)+(((1.1)*x734))+(((-1.0)*pp)));
evalcond[3]=((((0.85)*x732))+((x732*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x735=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*sj0)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=x735;
evalcond[2]=x735;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x736=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x736);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x736)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x737=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x737);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x737)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x738=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x738);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x738)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(IKabs(px)))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x739=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x739);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x739)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(px))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x740=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x740);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x740)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x744=IKPowWithIntegerCheck(cj0,-1);
if(!x744.valid){
continue;
}
IkReal x741=x744.value;
CheckValue<IkReal> x745=IKPowWithIntegerCheck(px,-1);
if(!x745.valid){
continue;
}
IkReal x742=x745.value;
IkReal x743=(x741*x742);
sj1array[0]=((((0.909090909090909)*pp*x743))+(((0.193181818181818)*x743))+(((0.0818181818181818)*sj0*x741)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x746=IKcos(j1);
IkReal x747=IKsin(j1);
IkReal x748=((0.045)*sj3);
IkReal x749=((0.3)*cj3);
IkReal x750=(cj0*px);
evalcond[0]=(x746*x750);
evalcond[1]=((-0.55)+((x747*x750))+(((-1.0)*x749))+(((-1.0)*x748)));
evalcond[2]=((((-1.0)*x746*x749))+(((-1.0)*x746*x748))+(((-0.55)*x746)));
evalcond[3]=(((x747*x748))+((x747*x749))+(((-1.0)*x750))+(((0.55)*x747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x751=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))),-1);
if(!x751.valid){
continue;
}
sj1array[0]=(cj0*px*(x751.value));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x752=IKsin(j1);
IkReal x753=IKcos(j1);
IkReal x754=((0.045)*sj3);
IkReal x755=((0.3)*cj3);
IkReal x756=(cj0*px);
evalcond[0]=(x753*x756);
evalcond[1]=((-0.55)+((x752*x756))+(((-1.0)*x754))+(((-1.0)*x755)));
evalcond[2]=((-0.2125)+(((-0.09)*px*sj0))+(((1.1)*x752*x756))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x753*x754))+(((-1.0)*x753*x755))+(((-0.55)*x753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x757=((0.3)*sj3);
IkReal x758=((0.045)*cj3);
IkReal x759=(px*sj0);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((-0.045)+x759+x758+(((-1.0)*x757)));
evalcond[2]=((0.045)+(((-1.0)*x759))+x757+(((-1.0)*x758)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x760=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x760);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x760)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x761=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x761);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x761)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x762=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x762);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x762)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(IKabs(px)))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x763=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x763);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x763)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(px))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x764=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x764);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x764)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x768=IKPowWithIntegerCheck(cj0,-1);
if(!x768.valid){
continue;
}
IkReal x765=x768.value;
CheckValue<IkReal> x769=IKPowWithIntegerCheck(px,-1);
if(!x769.valid){
continue;
}
IkReal x766=x769.value;
IkReal x767=(x765*x766);
sj1array[0]=((((0.909090909090909)*pp*x767))+(((-0.0818181818181818)*sj0*x765))+(((0.193181818181818)*x767)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x770=IKcos(j1);
IkReal x771=IKsin(j1);
IkReal x772=(cj0*px);
IkReal x773=((0.045)*sj3);
IkReal x774=((0.3)*cj3);
evalcond[0]=((-1.0)*x770*x772);
evalcond[1]=((-0.55)+((x771*x772))+(((-1.0)*x774))+(((-1.0)*x773)));
evalcond[2]=((((-1.0)*x770*x774))+(((-1.0)*x770*x773))+(((-0.55)*x770)));
evalcond[3]=(((x771*x773))+((x771*x774))+(((0.55)*x771))+(((-1.0)*x772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x775=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))),-1);
if(!x775.valid){
continue;
}
sj1array[0]=(cj0*px*(x775.value));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x776=IKsin(j1);
IkReal x777=IKcos(j1);
IkReal x778=(cj0*px);
IkReal x779=((0.045)*sj3);
IkReal x780=((0.3)*cj3);
evalcond[0]=((-1.0)*x777*x778);
evalcond[1]=((-0.55)+((x776*x778))+(((-1.0)*x780))+(((-1.0)*x779)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x776*x778))+(((0.09)*px*sj0)));
evalcond[3]=((((-1.0)*x777*x780))+(((-1.0)*x777*x779))+(((-0.55)*x777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x781=((0.3)*sj3);
IkReal x782=((0.045)*cj3);
IkReal x783=(px*sj2);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=(((sj2*x781))+(((0.045)*sj2))+px+(((-1.0)*sj2*x782)));
evalcond[3]=(cj2*px);
evalcond[4]=((0.045)+(((-1.0)*x782))+x783+x781);
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x783)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x784=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x784);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x784)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x785=((1.0)*px);
IkReal x786=((0.3)*sj3);
IkReal x787=((0.045)*cj3);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=(((sj2*x786))+(((-1.0)*x785))+(((0.045)*sj2))+(((-1.0)*sj2*x787)));
evalcond[3]=((-1.0)*cj2*px);
evalcond[4]=((0.045)+(((-1.0)*x787))+x786+(((-1.0)*sj2*x785)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px*sj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x788=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x788);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x788)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst172;
gconst172=IKsign(pz);
IkReal x789=IKsign(pz);
IkReal x790=(sj3*x789);
IkReal x791=(cj3*x789);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.55)*x789))+(((0.045)*x790))+(((0.3)*x791)))))+(IKabs(((((-0.045)*x789))+(((0.045)*x791))+(((-0.3)*x790))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x792=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x792)));
op[1]=0;
op[2]=((1.0)+x792);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x793=((0.045)*sj3);
IkReal x794=((0.3)*cj3);
CheckValue<IkReal> x795=IKPowWithIntegerCheck((((pz*x794))+((pz*x793))+(((0.55)*pz))),-1);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796=IKPowWithIntegerCheck(pz,-1);
if(!x796.valid){
continue;
}
if( IKabs(((x795.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x796.value)*(((0.55)+x793+x794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x795.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x796.value)*(((0.55)+x793+x794))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x795.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x796.value)*(((0.55)+x793+x794))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x797=IKcos(j1);
IkReal x798=IKsin(j1);
IkReal x799=((0.045)*cj3);
IkReal x800=((0.3)*cj3);
IkReal x801=(sj3*x798);
IkReal x802=(cj3*x798);
IkReal x803=(sj3*x797);
IkReal x804=(pz*x798);
IkReal x805=(pz*x797);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x805+(((-1.0)*x800)));
evalcond[1]=((0.045)+(((-1.0)*x799))+(((0.3)*sj3))+x804);
evalcond[2]=((-0.2125)+(((-0.09)*x804))+(((-1.0)*pp))+(((1.1)*x805)));
evalcond[3]=((((0.55)*x798))+(((0.045)*x801))+(((-1.0)*x797*x799))+((x798*x800))+(((0.045)*x797))+(((0.3)*x803)));
evalcond[4]=((((-1.0)*x798*x799))+(((-0.55)*x797))+(((-1.0)*x797*x800))+pz+(((0.045)*x798))+(((-0.045)*x803))+(((0.3)*x801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x807=IKPowWithIntegerCheck(pz,-1);
if(!x807.valid){
continue;
}
IkReal x806=x807.value;
if( IKabs(((0.111111111111111)*x806*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x806*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x806*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x806*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x806*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x806*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x808=IKcos(j1);
IkReal x809=IKsin(j1);
IkReal x810=((0.045)*cj3);
IkReal x811=((0.3)*cj3);
IkReal x812=(sj3*x809);
IkReal x813=(cj3*x809);
IkReal x814=(sj3*x808);
IkReal x815=(pz*x809);
IkReal x816=(pz*x808);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x811))+x816);
evalcond[1]=((0.045)+(((-1.0)*x810))+(((0.3)*sj3))+x815);
evalcond[2]=((-0.2125)+(((1.1)*x816))+(((-1.0)*pp))+(((-0.09)*x815)));
evalcond[3]=(((x809*x811))+(((-1.0)*x808*x810))+(((0.045)*x808))+(((0.3)*x814))+(((0.045)*x812))+(((0.55)*x809)));
evalcond[4]=((((-1.0)*x808*x811))+(((-0.55)*x808))+(((-0.045)*x814))+(((0.045)*x809))+(((-1.0)*x809*x810))+(((0.3)*x812))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x817 = IKatan2WithCheck((gconst172*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst172*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x817.valid){
continue;
}
j1array[0]=x817.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x818=IKcos(j1);
IkReal x819=IKsin(j1);
IkReal x820=((0.045)*cj3);
IkReal x821=((0.3)*cj3);
IkReal x822=(sj3*x819);
IkReal x823=(cj3*x819);
IkReal x824=(sj3*x818);
IkReal x825=(pz*x819);
IkReal x826=(pz*x818);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x821))+x826);
evalcond[1]=((0.045)+(((-1.0)*x820))+(((0.3)*sj3))+x825);
evalcond[2]=((-0.2125)+(((-0.09)*x825))+(((-1.0)*pp))+(((1.1)*x826)));
evalcond[3]=((((-1.0)*x818*x820))+(((0.3)*x824))+((x819*x821))+(((0.55)*x819))+(((0.045)*x818))+(((0.045)*x822)));
evalcond[4]=((((-1.0)*x818*x821))+(((-0.045)*x824))+(((-1.0)*x819*x820))+(((0.3)*x822))+pz+(((-0.55)*x818))+(((0.045)*x819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst173;
gconst173=IKsign(pz);
IkReal x827=IKsign(pz);
IkReal x828=(sj3*x827);
IkReal x829=(cj3*x827);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((-0.045)*x829))+(((0.3)*x828))+(((0.045)*x827)))))+(IKabs(((((0.3)*x829))+(((0.55)*x827))+(((0.045)*x828))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x830=((2.40588235294118)*sj3);
op[0]=((1.0)+x830);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x830)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x831=((0.045)*sj3);
IkReal x832=((0.3)*cj3);
CheckValue<IkReal> x833=IKPowWithIntegerCheck((((pz*x832))+((pz*x831))+(((0.55)*pz))),-1);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834=IKPowWithIntegerCheck(pz,-1);
if(!x834.valid){
continue;
}
if( IKabs(((x833.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x834.value)*(((0.55)+x831+x832)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x833.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x834.value)*(((0.55)+x831+x832))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x833.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x834.value)*(((0.55)+x831+x832))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x835=IKcos(j1);
IkReal x836=IKsin(j1);
IkReal x837=((0.045)*cj3);
IkReal x838=((0.3)*cj3);
IkReal x839=(sj3*x836);
IkReal x840=(cj3*x836);
IkReal x841=(sj3*x835);
IkReal x842=(pz*x836);
IkReal x843=(pz*x835);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x838))+x843);
evalcond[1]=((0.045)+(((-1.0)*x837))+(((0.3)*sj3))+(((-1.0)*x842)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x843))+(((0.09)*x842)));
evalcond[3]=((((-0.3)*x841))+((x835*x837))+((x836*x838))+(((-0.045)*x835))+(((0.045)*x839))+(((0.55)*x836)));
evalcond[4]=((((-1.0)*x835*x838))+(((-0.3)*x839))+(((-0.045)*x841))+((x836*x837))+(((-0.045)*x836))+pz+(((-0.55)*x835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x845=IKPowWithIntegerCheck(pz,-1);
if(!x845.valid){
continue;
}
IkReal x844=x845.value;
if( IKabs(((0.111111111111111)*x844*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x844*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x844*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x844*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x844*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x844*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x846=IKcos(j1);
IkReal x847=IKsin(j1);
IkReal x848=((0.045)*cj3);
IkReal x849=((0.3)*cj3);
IkReal x850=(sj3*x847);
IkReal x851=(cj3*x847);
IkReal x852=(sj3*x846);
IkReal x853=(pz*x847);
IkReal x854=(pz*x846);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x849))+x854);
evalcond[1]=((0.045)+(((-1.0)*x853))+(((-1.0)*x848))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x854))+(((-1.0)*pp))+(((0.09)*x853)));
evalcond[3]=((((0.045)*x850))+((x846*x848))+(((-0.045)*x846))+(((0.55)*x847))+((x847*x849))+(((-0.3)*x852)));
evalcond[4]=((((-0.045)*x852))+(((-0.045)*x847))+(((-1.0)*x846*x849))+pz+((x847*x848))+(((-0.3)*x850))+(((-0.55)*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x855 = IKatan2WithCheck((gconst173*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst173*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
j1array[0]=x855.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x856=IKcos(j1);
IkReal x857=IKsin(j1);
IkReal x858=((0.045)*cj3);
IkReal x859=((0.3)*cj3);
IkReal x860=(sj3*x857);
IkReal x861=(cj3*x857);
IkReal x862=(sj3*x856);
IkReal x863=(pz*x857);
IkReal x864=(pz*x856);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x859))+x864);
evalcond[1]=((0.045)+(((-1.0)*x858))+(((-1.0)*x863))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x864))+(((-1.0)*pp))+(((0.09)*x863)));
evalcond[3]=((((-0.045)*x856))+(((-0.3)*x862))+(((0.045)*x860))+(((0.55)*x857))+((x856*x858))+((x857*x859)));
evalcond[4]=((((-0.045)*x857))+(((-0.3)*x860))+(((-0.55)*x856))+pz+(((-1.0)*x856*x859))+((x857*x858))+(((-0.045)*x862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x865=(px*sj0);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=x865;
evalcond[2]=x865;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))+(IKabs(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))+(IKabs(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x867 = IKatan2WithCheck(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),((0.55)+(((0.045)*sj3))+(((0.3)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
IkReal x866=x867.value;
j1array[0]=((-1.0)*x866);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x866)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x868=IKsin(j1);
IkReal x869=IKcos(j1);
IkReal x870=((0.045)*x868);
evalcond[0]=((((-1.0)*cj3*x870))+(((-0.045)*sj3*x869))+(((-0.55)*x869))+(((0.3)*sj3*x868))+x870+(((-0.3)*cj3*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x872 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x872.valid){
continue;
}
IkReal x871=x872.value;
j1array[0]=((-1.0)*x871);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x871)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x873=IKsin(j1);
IkReal x874=IKcos(j1);
IkReal x875=((0.045)*x874);
evalcond[0]=((((0.3)*cj3*x873))+(((-1.0)*cj3*x875))+(((0.55)*x873))+(((0.3)*sj3*x874))+x875+(((0.045)*sj3*x873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x876=(px*sj0);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=x876;
evalcond[2]=((-1.0)*x876);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))+(IKabs(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))+(IKabs(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x878 = IKatan2WithCheck(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),((0.55)+(((0.045)*sj3))+(((0.3)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x878.valid){
continue;
}
IkReal x877=x878.value;
j1array[0]=((-1.0)*x877);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x877)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x879=IKsin(j1);
IkReal x880=IKcos(j1);
IkReal x881=((0.045)*x879);
evalcond[0]=(((cj3*x881))+(((-0.3)*cj3*x880))+(((-1.0)*x881))+(((-0.55)*x880))+(((-0.3)*sj3*x879))+(((-0.045)*sj3*x880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x883 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
IkReal x882=x883.value;
j1array[0]=((-1.0)*x882);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x882)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x884=IKsin(j1);
IkReal x885=IKcos(j1);
IkReal x886=((0.045)*x885);
evalcond[0]=(((cj3*x886))+(((-0.3)*sj3*x885))+(((-1.0)*x886))+(((0.55)*x884))+(((0.3)*cj3*x884))+(((0.045)*sj3*x884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x887=(sj0*sj2);
IkReal x888=((0.045)*sj3);
IkReal x889=((0.3)*pz);
IkReal x890=((0.045)*cj3);
IkReal x891=(cj0*px);
IkReal x892=(cj2*pz);
IkReal x893=(cj2*x891);
CheckValue<IkReal> x894 = IKatan2WithCheck((gconst159*(((((-0.045)*pz))+((pz*x890))+(((0.55)*x893))+(((0.3)*cj3*x893))+(((-1.0)*sj3*x889))+((x888*x893))+(((-1.0)*px*pz*x887))))),(gconst159*(((((0.3)*sj3*x891))+((cj2*cj3*x889))+(((0.55)*x892))+((px*x887*x891))+(((0.045)*x891))+((x888*x892))+(((-1.0)*x890*x891))))),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
j1array[0]=x894.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x895=IKcos(j1);
IkReal x896=IKsin(j1);
IkReal x897=(px*sj2);
IkReal x898=((0.3)*sj3);
IkReal x899=(cj2*px);
IkReal x900=((0.045)*cj3);
IkReal x901=((0.045)*cj2);
IkReal x902=((0.045)*sj3);
IkReal x903=((0.3)*cj3);
IkReal x904=(cj0*px);
IkReal x905=(cj0*x895);
IkReal x906=(cj3*x896);
IkReal x907=(cj2*x895);
IkReal x908=(cj2*x896);
IkReal x909=(pz*x895);
evalcond[0]=((-0.55)+(((-1.0)*x903))+(((-1.0)*x902))+((x896*x904))+x909);
evalcond[1]=(((sj0*x899))+((x897*x905))+(((-1.0)*pz*sj2*x896)));
evalcond[2]=((0.045)+((sj0*x897))+(((-1.0)*x900))+x898+((pz*x908))+(((-1.0)*x899*x905)));
evalcond[3]=((-0.2125)+(((-0.09)*sj0*x897))+(((1.1)*x896*x904))+(((-1.0)*pp))+(((-0.09)*pz*x908))+(((0.09)*x899*x905))+(((1.1)*x909)));
evalcond[4]=((((-1.0)*x900*x908))+(((-1.0)*x895*x902))+(((-1.0)*x895*x903))+pz+((x896*x901))+(((-0.55)*x895))+((x898*x908)));
evalcond[5]=((((-1.0)*x900*x907))+((x895*x901))+(((0.55)*x896))+((x896*x903))+((x896*x902))+(((-1.0)*x904))+((x898*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x910=(pz*sj2);
IkReal x911=(cj2*sj0);
IkReal x912=((0.3)*cj3);
IkReal x913=((0.045)*sj3);
IkReal x914=(cj0*px*sj2);
CheckValue<IkReal> x915 = IKatan2WithCheck((gconst158*(((((0.55)*x914))+((px*pz*x911))+((x912*x914))+((x913*x914))))),(gconst158*((((x910*x913))+((x910*x912))+(((0.55)*x910))+(((-1.0)*cj0*x911*(px*px)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x915.valid){
continue;
}
j1array[0]=x915.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x916=IKcos(j1);
IkReal x917=IKsin(j1);
IkReal x918=(px*sj2);
IkReal x919=((0.3)*sj3);
IkReal x920=(cj2*px);
IkReal x921=((0.045)*cj3);
IkReal x922=((0.045)*cj2);
IkReal x923=((0.045)*sj3);
IkReal x924=((0.3)*cj3);
IkReal x925=(cj0*px);
IkReal x926=(cj0*x916);
IkReal x927=(cj3*x917);
IkReal x928=(cj2*x916);
IkReal x929=(cj2*x917);
IkReal x930=(pz*x916);
evalcond[0]=((-0.55)+(((-1.0)*x924))+(((-1.0)*x923))+((x917*x925))+x930);
evalcond[1]=(((x918*x926))+((sj0*x920))+(((-1.0)*pz*sj2*x917)));
evalcond[2]=((0.045)+(((-1.0)*x921))+(((-1.0)*x920*x926))+((pz*x929))+((sj0*x918))+x919);
evalcond[3]=((-0.2125)+(((-0.09)*pz*x929))+(((1.1)*x930))+(((-0.09)*sj0*x918))+(((-1.0)*pp))+(((0.09)*x920*x926))+(((1.1)*x917*x925)));
evalcond[4]=(((x919*x929))+(((-0.55)*x916))+pz+((x917*x922))+(((-1.0)*x921*x929))+(((-1.0)*x916*x924))+(((-1.0)*x916*x923)));
evalcond[5]=(((x919*x928))+((x916*x922))+(((-1.0)*x925))+((x917*x923))+((x917*x924))+(((0.55)*x917))+(((-1.0)*x921*x928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x931=((0.045)*sj2);
CheckValue<IkReal> x932=IKPowWithIntegerCheck(px,-1);
if(!x932.valid){
continue;
}
sj0array[0]=((-1.0)*(x932.value)*(((((0.3)*sj2*sj3))+(((-1.0)*cj3*x931))+x931)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x933=px*px;
IkReal x934=(px*sj2);
IkReal x935=((1.0)*x933);
evalcond[0]=((((((((-1.0)*x935*(sj2*sj2)))+(((-1.0)*x935*(cj2*cj2)))))*(IKsin(j0))))+(((-0.045)*x934))+(((0.045)*cj3*x934))+(((-0.3)*sj3*x934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst158;
gconst158=IKsign((((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))));
dummyeval[0]=(((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst159;
gconst159=IKsign((((cj2*(cj0*cj0)*(px*px)))+((cj2*(pz*pz)))));
dummyeval[0]=(((cj2*(cj0*cj0)*(px*px)))+((cj2*(pz*pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x936=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*sj0)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=x936;
evalcond[2]=x936;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst161;
gconst161=IKsign(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))));
IkReal x937=IKsign(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))));
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
dummyeval[1]=((IKabs((cj0*px*x937)))+(IKabs((pz*x937))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal gconst160;
gconst160=IKsign(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))));
IkReal x939=IKsign(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))));
IkReal x938=x939*x939;
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if(((cj0*px*x938*(cj0)*(px))) < -0.00001)
continue;
if(((pz*x938*(pz))) < -0.00001)
continue;
dummyeval[1]=((IKsqrt((cj0*px*x938*(cj0)*(px))))+(IKsqrt((pz*x938*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst162;
gconst162=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x940=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x940);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x940)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x941=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x941);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x941)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x942=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x942);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x942)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x943=((0.045)*sj3);
IkReal x944=((0.3)*cj3);
IkReal x945=(cj0*px);
CheckValue<IkReal> x946 = IKatan2WithCheck((gconst162*(((((-0.55)*x945))+(((-1.0)*x944*x945))+(((-1.0)*x943*x945))))),(gconst162*(((((-0.55)*pz))+(((-1.0)*pz*x943))+(((-1.0)*pz*x944))))),IKFAST_ATAN2_MAGTHRESH);
if(!x946.valid){
continue;
}
j1array[0]=x946.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x947=IKsin(j1);
IkReal x948=IKcos(j1);
IkReal x949=((0.045)*sj3);
IkReal x950=((0.3)*cj3);
IkReal x951=(cj0*px);
IkReal x952=(pz*x948);
evalcond[0]=(((x948*x951))+(((-1.0)*pz*x947)));
evalcond[1]=((-0.55)+(((-1.0)*x949))+((x947*x951))+(((-1.0)*x950))+x952);
evalcond[2]=((((-0.55)*x948))+(((-1.0)*x948*x949))+pz+(((-1.0)*x948*x950)));
evalcond[3]=((((0.55)*x947))+((x947*x949))+(((-1.0)*x951))+((x947*x950)));
evalcond[4]=((-0.2125)+(((-0.09)*px*sj0))+(((-1.0)*pp))+(((1.1)*x947*x951))+(((1.1)*x952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x953=((-1.0)*gconst160);
CheckValue<IkReal> x954 = IKatan2WithCheck((cj0*px*x953),(pz*x953),IKFAST_ATAN2_MAGTHRESH);
if(!x954.valid){
continue;
}
j1array[0]=x954.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x955=IKsin(j1);
IkReal x956=IKcos(j1);
IkReal x957=((0.045)*sj3);
IkReal x958=((0.3)*cj3);
IkReal x959=(cj0*px);
IkReal x960=(pz*x956);
evalcond[0]=(((x956*x959))+(((-1.0)*pz*x955)));
evalcond[1]=((-0.55)+((x955*x959))+(((-1.0)*x957))+(((-1.0)*x958))+x960);
evalcond[2]=((((-0.55)*x956))+(((-1.0)*x956*x957))+(((-1.0)*x956*x958))+pz);
evalcond[3]=(((x955*x958))+((x955*x957))+(((0.55)*x955))+(((-1.0)*x959)));
evalcond[4]=((-0.2125)+(((-0.09)*px*sj0))+(((1.1)*x955*x959))+(((-1.0)*pp))+(((1.1)*x960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x961 = IKatan2WithCheck((cj0*gconst161*px),(gconst161*pz),IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
j1array[0]=x961.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x962=IKsin(j1);
IkReal x963=IKcos(j1);
IkReal x964=((0.045)*sj3);
IkReal x965=((0.3)*cj3);
IkReal x966=(cj0*px);
IkReal x967=(pz*x963);
evalcond[0]=(((x963*x966))+(((-1.0)*pz*x962)));
evalcond[1]=((-0.55)+((x962*x966))+x967+(((-1.0)*x965))+(((-1.0)*x964)));
evalcond[2]=((((-0.55)*x963))+(((-1.0)*x963*x964))+(((-1.0)*x963*x965))+pz);
evalcond[3]=((((0.55)*x962))+((x962*x964))+((x962*x965))+(((-1.0)*x966)));
evalcond[4]=((-0.2125)+(((-0.09)*px*sj0))+(((-1.0)*pp))+(((1.1)*x967))+(((1.1)*x962*x966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x968=((0.3)*sj3);
IkReal x969=((0.045)*cj3);
IkReal x970=(px*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-0.045)+x970+x969+(((-1.0)*x968)));
evalcond[2]=((0.045)+(((-1.0)*x970))+x968+(((-1.0)*x969)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst164;
gconst164=IKsign(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))));
IkReal x971=IKsign(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))));
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
dummyeval[1]=((IKabs((cj0*px*x971)))+(IKabs((pz*x971))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal gconst163;
gconst163=IKsign(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))));
IkReal x973=IKsign(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))));
IkReal x972=x973*x973;
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if(((cj0*px*x972*(cj0)*(px))) < -0.00001)
continue;
if(((pz*x972*(pz))) < -0.00001)
continue;
dummyeval[1]=((IKsqrt((cj0*px*x972*(cj0)*(px))))+(IKsqrt((pz*x972*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst165;
gconst165=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x974=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x974);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x974)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x975=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x975);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x975)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x976=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x976);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x976)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x977=((0.045)*sj3);
IkReal x978=((0.3)*cj3);
IkReal x979=(cj0*px);
CheckValue<IkReal> x980 = IKatan2WithCheck((gconst165*(((((-0.55)*x979))+(((-1.0)*x978*x979))+(((-1.0)*x977*x979))))),(gconst165*(((((-0.55)*pz))+(((-1.0)*pz*x978))+(((-1.0)*pz*x977))))),IKFAST_ATAN2_MAGTHRESH);
if(!x980.valid){
continue;
}
j1array[0]=x980.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x981=IKsin(j1);
IkReal x982=IKcos(j1);
IkReal x983=((0.045)*sj3);
IkReal x984=((0.3)*cj3);
IkReal x985=((1.0)*cj0*px);
IkReal x986=(pz*x982);
IkReal x987=(cj0*px*x981);
evalcond[0]=((((-1.0)*x982*x985))+((pz*x981)));
evalcond[1]=((-0.55)+(((-1.0)*x984))+(((-1.0)*x983))+x986+x987);
evalcond[2]=((((-1.0)*x982*x983))+(((-1.0)*x982*x984))+pz+(((-0.55)*x982)));
evalcond[3]=(((x981*x983))+((x981*x984))+(((-1.0)*x985))+(((0.55)*x981)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x987))+(((1.1)*x986))+(((0.09)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x988=((-1.0)*gconst163);
CheckValue<IkReal> x989 = IKatan2WithCheck((cj0*px*x988),(pz*x988),IKFAST_ATAN2_MAGTHRESH);
if(!x989.valid){
continue;
}
j1array[0]=x989.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x990=IKsin(j1);
IkReal x991=IKcos(j1);
IkReal x992=((0.045)*sj3);
IkReal x993=((0.3)*cj3);
IkReal x994=((1.0)*cj0*px);
IkReal x995=(pz*x991);
IkReal x996=(cj0*px*x990);
evalcond[0]=((((-1.0)*x991*x994))+((pz*x990)));
evalcond[1]=((-0.55)+(((-1.0)*x992))+(((-1.0)*x993))+x996+x995);
evalcond[2]=((((-1.0)*x991*x993))+(((-1.0)*x991*x992))+pz+(((-0.55)*x991)));
evalcond[3]=(((x990*x992))+((x990*x993))+(((-1.0)*x994))+(((0.55)*x990)));
evalcond[4]=((-0.2125)+(((1.1)*x996))+(((1.1)*x995))+(((-1.0)*pp))+(((0.09)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x997 = IKatan2WithCheck((cj0*gconst164*px),(gconst164*pz),IKFAST_ATAN2_MAGTHRESH);
if(!x997.valid){
continue;
}
j1array[0]=x997.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x998=IKsin(j1);
IkReal x999=IKcos(j1);
IkReal x1000=((0.045)*sj3);
IkReal x1001=((0.3)*cj3);
IkReal x1002=((1.0)*cj0*px);
IkReal x1003=(pz*x999);
IkReal x1004=(cj0*px*x998);
evalcond[0]=((((-1.0)*x1002*x999))+((pz*x998)));
evalcond[1]=((-0.55)+x1004+x1003+(((-1.0)*x1001))+(((-1.0)*x1000)));
evalcond[2]=((((-1.0)*x1001*x999))+pz+(((-1.0)*x1000*x999))+(((-0.55)*x999)));
evalcond[3]=(((x1000*x998))+(((-1.0)*x1002))+((x1001*x998))+(((0.55)*x998)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px*sj0))+(((1.1)*x1004))+(((1.1)*x1003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1005=((0.045)*sj2);
CheckValue<IkReal> x1006=IKPowWithIntegerCheck(px,-2);
if(!x1006.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x1006.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)));
evalcond[1]=((((0.3)*sj2*sj3))+x1005+(((-1.0)*cj3*x1005))+px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=pz;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+px+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1007=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x1007);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1007)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1009=IKPowWithIntegerCheck(pz,-1);
if(!x1009.valid){
continue;
}
IkReal x1008=x1009.value;
cj1array[0]=((((0.3)*cj3*x1008))+(((0.55)*x1008))+(((0.045)*sj3*x1008)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1010=IKsin(j1);
IkReal x1011=IKcos(j1);
IkReal x1012=((0.045)*sj3);
IkReal x1013=((0.3)*cj3);
evalcond[0]=((-1.0)*pz*x1010);
evalcond[1]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp))+(((1.1)*pz*x1011)));
evalcond[2]=((((0.55)*x1010))+((x1010*x1013))+((x1010*x1012)));
evalcond[3]=((((-0.55)*x1011))+(((-1.0)*x1011*x1013))+(((-1.0)*x1011*x1012))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1014=IKPowWithIntegerCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),-1);
if(!x1014.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x1014.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1015=IKcos(j1);
IkReal x1016=IKsin(j1);
IkReal x1017=((0.045)*sj3);
IkReal x1018=((0.3)*cj3);
IkReal x1019=(pz*x1015);
evalcond[0]=((-1.0)*pz*x1016);
evalcond[1]=((-0.55)+x1019+(((-1.0)*x1018))+(((-1.0)*x1017)));
evalcond[2]=((-0.2125)+(((-0.09)*px))+(((1.1)*x1019))+(((-1.0)*pp)));
evalcond[3]=(((x1016*x1017))+((x1016*x1018))+(((0.55)*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*px))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1020=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x1020);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1020)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1022=IKPowWithIntegerCheck(pz,-1);
if(!x1022.valid){
continue;
}
IkReal x1021=x1022.value;
cj1array[0]=((((0.045)*sj3*x1021))+(((0.55)*x1021))+(((0.3)*cj3*x1021)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1023=IKsin(j1);
IkReal x1024=IKcos(j1);
IkReal x1025=((0.045)*sj3);
IkReal x1026=((0.3)*cj3);
evalcond[0]=(pz*x1023);
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px))+(((1.1)*pz*x1024)));
evalcond[2]=(((x1023*x1026))+((x1023*x1025))+(((0.55)*x1023)));
evalcond[3]=((((-0.55)*x1024))+pz+(((-1.0)*x1024*x1026))+(((-1.0)*x1024*x1025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1027=IKPowWithIntegerCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),-1);
if(!x1027.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x1027.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1028=IKcos(j1);
IkReal x1029=IKsin(j1);
IkReal x1030=((0.045)*sj3);
IkReal x1031=((0.3)*cj3);
IkReal x1032=(pz*x1028);
evalcond[0]=(pz*x1029);
evalcond[1]=((-0.55)+(((-1.0)*x1031))+(((-1.0)*x1030))+x1032);
evalcond[2]=((-0.2125)+(((1.1)*x1032))+(((-1.0)*pp))+(((0.09)*px)));
evalcond[3]=(((x1029*x1030))+((x1029*x1031))+(((0.55)*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst166;
gconst166=IKsign(pz);
IkReal x1033=IKsign(pz);
IkReal x1034=(sj3*x1033);
IkReal x1035=(cj3*x1033);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((-0.045)*x1033))+(((0.045)*x1035))+(((-0.3)*x1034)))))+(IKabs(((((0.3)*x1035))+(((0.55)*x1033))+(((0.045)*x1034))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1036=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x1036)));
op[1]=0;
op[2]=((1.0)+x1036);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1037=((0.045)*sj3);
IkReal x1038=((0.3)*cj3);
CheckValue<IkReal> x1039=IKPowWithIntegerCheck((((pz*x1038))+((pz*x1037))+(((0.55)*pz))),-1);
if(!x1039.valid){
continue;
}
CheckValue<IkReal> x1040=IKPowWithIntegerCheck(pz,-1);
if(!x1040.valid){
continue;
}
if( IKabs(((x1039.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1040.value)*(((0.55)+x1038+x1037)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1039.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x1040.value)*(((0.55)+x1038+x1037))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1039.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x1040.value)*(((0.55)+x1038+x1037))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1041=IKcos(j1);
IkReal x1042=IKsin(j1);
IkReal x1043=((0.045)*cj3);
IkReal x1044=((0.3)*cj3);
IkReal x1045=(sj3*x1042);
IkReal x1046=(cj3*x1042);
IkReal x1047=(sj3*x1041);
IkReal x1048=(pz*x1042);
IkReal x1049=(pz*x1041);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1049+(((-1.0)*x1044)));
evalcond[1]=((0.045)+x1048+(((0.3)*sj3))+(((-1.0)*x1043)));
evalcond[2]=((-0.2125)+(((1.1)*x1049))+(((-1.0)*pp))+(((-0.09)*x1048)));
evalcond[3]=(((x1042*x1044))+(((0.3)*x1047))+(((0.55)*x1042))+(((-1.0)*x1041*x1043))+(((0.045)*x1041))+(((0.045)*x1045)));
evalcond[4]=((((0.3)*x1045))+(((-1.0)*x1041*x1044))+(((-1.0)*x1042*x1043))+pz+(((-0.55)*x1041))+(((0.045)*x1042))+(((-0.045)*x1047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1051=IKPowWithIntegerCheck(pz,-1);
if(!x1051.valid){
continue;
}
IkReal x1050=x1051.value;
if( IKabs(((0.111111111111111)*x1050*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1050*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1050*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1050*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x1050*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1050*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1052=IKcos(j1);
IkReal x1053=IKsin(j1);
IkReal x1054=((0.045)*cj3);
IkReal x1055=((0.3)*cj3);
IkReal x1056=(sj3*x1053);
IkReal x1057=(cj3*x1053);
IkReal x1058=(sj3*x1052);
IkReal x1059=(pz*x1053);
IkReal x1060=(pz*x1052);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1055))+x1060);
evalcond[1]=((0.045)+(((-1.0)*x1054))+x1059+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1060))+(((-1.0)*pp))+(((-0.09)*x1059)));
evalcond[3]=((((-1.0)*x1052*x1054))+(((0.55)*x1053))+(((0.3)*x1058))+((x1053*x1055))+(((0.045)*x1052))+(((0.045)*x1056)));
evalcond[4]=((((-1.0)*x1052*x1055))+(((0.3)*x1056))+pz+(((-0.55)*x1052))+(((-1.0)*x1053*x1054))+(((0.045)*x1053))+(((-0.045)*x1058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1061 = IKatan2WithCheck((gconst166*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst166*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1061.valid){
continue;
}
j1array[0]=x1061.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1062=IKcos(j1);
IkReal x1063=IKsin(j1);
IkReal x1064=((0.045)*cj3);
IkReal x1065=((0.3)*cj3);
IkReal x1066=(sj3*x1063);
IkReal x1067=(cj3*x1063);
IkReal x1068=(sj3*x1062);
IkReal x1069=(pz*x1063);
IkReal x1070=(pz*x1062);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1070+(((-1.0)*x1065)));
evalcond[1]=((0.045)+x1069+(((0.3)*sj3))+(((-1.0)*x1064)));
evalcond[2]=((-0.2125)+(((1.1)*x1070))+(((-1.0)*pp))+(((-0.09)*x1069)));
evalcond[3]=((((0.3)*x1068))+(((0.045)*x1062))+(((0.045)*x1066))+(((0.55)*x1063))+(((-1.0)*x1062*x1064))+((x1063*x1065)));
evalcond[4]=((((-1.0)*x1063*x1064))+(((0.3)*x1066))+(((0.045)*x1063))+(((-1.0)*x1062*x1065))+pz+(((-0.55)*x1062))+(((-0.045)*x1068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)*px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst167;
gconst167=IKsign(pz);
IkReal x1071=IKsign(pz);
IkReal x1072=(sj3*x1071);
IkReal x1073=(cj3*x1071);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.3)*x1073))+(((0.55)*x1071))+(((0.045)*x1072)))))+(IKabs(((((0.3)*x1072))+(((-0.045)*x1073))+(((0.045)*x1071))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1074=((2.40588235294118)*sj3);
op[0]=((1.0)+x1074);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x1074)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1075=((0.045)*sj3);
IkReal x1076=((0.3)*cj3);
CheckValue<IkReal> x1077=IKPowWithIntegerCheck((((pz*x1075))+((pz*x1076))+(((0.55)*pz))),-1);
if(!x1077.valid){
continue;
}
CheckValue<IkReal> x1078=IKPowWithIntegerCheck(pz,-1);
if(!x1078.valid){
continue;
}
if( IKabs(((x1077.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1078.value)*(((0.55)+x1076+x1075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1077.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x1078.value)*(((0.55)+x1076+x1075))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1077.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x1078.value)*(((0.55)+x1076+x1075))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1079=IKcos(j1);
IkReal x1080=IKsin(j1);
IkReal x1081=((0.045)*cj3);
IkReal x1082=((0.3)*cj3);
IkReal x1083=(sj3*x1080);
IkReal x1084=(cj3*x1080);
IkReal x1085=(sj3*x1079);
IkReal x1086=(pz*x1080);
IkReal x1087=(pz*x1079);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1087+(((-1.0)*x1082)));
evalcond[1]=((0.045)+(((-1.0)*x1086))+(((0.3)*sj3))+(((-1.0)*x1081)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1087))+(((0.09)*x1086)));
evalcond[3]=(((x1079*x1081))+(((0.045)*x1083))+(((-0.3)*x1085))+((x1080*x1082))+(((-0.045)*x1079))+(((0.55)*x1080)));
evalcond[4]=((((-0.3)*x1083))+(((-1.0)*x1079*x1082))+pz+((x1080*x1081))+(((-0.55)*x1079))+(((-0.045)*x1085))+(((-0.045)*x1080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1089=IKPowWithIntegerCheck(pz,-1);
if(!x1089.valid){
continue;
}
IkReal x1088=x1089.value;
if( IKabs(((0.111111111111111)*x1088*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1088*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1088*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1088*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x1088*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1088*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1090=IKcos(j1);
IkReal x1091=IKsin(j1);
IkReal x1092=((0.045)*cj3);
IkReal x1093=((0.3)*cj3);
IkReal x1094=(sj3*x1091);
IkReal x1095=(cj3*x1091);
IkReal x1096=(sj3*x1090);
IkReal x1097=(pz*x1091);
IkReal x1098=(pz*x1090);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1098+(((-1.0)*x1093)));
evalcond[1]=((0.045)+(((-1.0)*x1092))+(((-1.0)*x1097))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x1097))+(((1.1)*x1098)));
evalcond[3]=((((-0.045)*x1090))+(((0.045)*x1094))+(((-0.3)*x1096))+((x1091*x1093))+((x1090*x1092))+(((0.55)*x1091)));
evalcond[4]=((((-1.0)*x1090*x1093))+(((-0.045)*x1091))+(((-0.045)*x1096))+(((-0.55)*x1090))+pz+(((-0.3)*x1094))+((x1091*x1092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1099 = IKatan2WithCheck((gconst167*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst167*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1099.valid){
continue;
}
j1array[0]=x1099.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1100=IKcos(j1);
IkReal x1101=IKsin(j1);
IkReal x1102=((0.045)*cj3);
IkReal x1103=((0.3)*cj3);
IkReal x1104=(sj3*x1101);
IkReal x1105=(cj3*x1101);
IkReal x1106=(sj3*x1100);
IkReal x1107=(pz*x1101);
IkReal x1108=(pz*x1100);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1108+(((-1.0)*x1103)));
evalcond[1]=((0.045)+(((-1.0)*x1107))+(((0.3)*sj3))+(((-1.0)*x1102)));
evalcond[2]=((-0.2125)+(((0.09)*x1107))+(((-1.0)*pp))+(((1.1)*x1108)));
evalcond[3]=(((x1101*x1103))+(((0.045)*x1104))+(((-0.045)*x1100))+((x1100*x1102))+(((0.55)*x1101))+(((-0.3)*x1106)));
evalcond[4]=((((-0.55)*x1100))+((x1101*x1102))+pz+(((-1.0)*x1100*x1103))+(((-0.045)*x1106))+(((-0.045)*x1101))+(((-0.3)*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1109=(px*sj2);
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=(cj2*px);
evalcond[3]=((0.045)+x1109+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1109)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1110=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+x1110+sj3);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1110)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1112=IKPowWithIntegerCheck(pz,-1);
if(!x1112.valid){
continue;
}
IkReal x1111=x1112.value;
CheckValue<IkReal> x1113=IKPowWithIntegerCheck(cj2,-1);
if(!x1113.valid){
continue;
}
if( IKabs((x1111*(x1113.value)*(((-0.045)+(((0.045)*cj3))+(((-1.0)*px*sj2))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1111*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1111*(x1113.value)*(((-0.045)+(((0.045)*cj3))+(((-1.0)*px*sj2))+(((-0.3)*sj3))))))+IKsqr((x1111*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1111*(x1113.value)*(((-0.045)+(((0.045)*cj3))+(((-1.0)*px*sj2))+(((-0.3)*sj3))))), (x1111*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1114=IKsin(j1);
IkReal x1115=IKcos(j1);
IkReal x1116=((0.045)*cj3);
IkReal x1117=(px*sj2);
IkReal x1118=((0.3)*sj3);
IkReal x1119=((0.045)*sj3);
IkReal x1120=((0.3)*cj3);
IkReal x1121=((0.045)*x1114);
IkReal x1122=((0.3)*x1114);
IkReal x1123=(cj2*x1115);
IkReal x1124=(pz*x1115);
IkReal x1125=(pz*x1114);
evalcond[0]=((((-1.0)*sj2*x1125))+((cj2*px)));
evalcond[1]=((-0.55)+x1124+(((-1.0)*x1120))+(((-1.0)*x1119)));
evalcond[2]=((0.045)+x1117+x1118+((cj2*x1125))+(((-1.0)*x1116)));
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1124))+(((-0.09)*x1117))+(((-0.09)*cj2*x1125)));
evalcond[4]=(((x1114*x1119))+((x1114*x1120))+(((-1.0)*x1116*x1123))+(((0.045)*x1123))+((x1118*x1123))+(((0.55)*x1114)));
evalcond[5]=(((cj2*x1121))+(((-0.55)*x1115))+(((-1.0)*cj2*x1114*x1116))+((cj2*x1114*x1118))+pz+(((-1.0)*x1115*x1120))+(((-1.0)*x1115*x1119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1127=IKPowWithIntegerCheck(pz,-1);
if(!x1127.valid){
continue;
}
IkReal x1126=x1127.value;
CheckValue<IkReal> x1128=IKPowWithIntegerCheck(sj2,-1);
if(!x1128.valid){
continue;
}
if( IKabs((cj2*px*x1126*(x1128.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1126*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*px*x1126*(x1128.value)))+IKsqr((x1126*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((cj2*px*x1126*(x1128.value)), (x1126*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1129=IKsin(j1);
IkReal x1130=IKcos(j1);
IkReal x1131=((0.045)*cj3);
IkReal x1132=(px*sj2);
IkReal x1133=((0.3)*sj3);
IkReal x1134=((0.045)*sj3);
IkReal x1135=((0.3)*cj3);
IkReal x1136=((0.045)*x1129);
IkReal x1137=((0.3)*x1129);
IkReal x1138=(cj2*x1130);
IkReal x1139=(pz*x1130);
IkReal x1140=(pz*x1129);
evalcond[0]=(((cj2*px))+(((-1.0)*sj2*x1140)));
evalcond[1]=((-0.55)+x1139+(((-1.0)*x1134))+(((-1.0)*x1135)));
evalcond[2]=((0.045)+x1133+x1132+((cj2*x1140))+(((-1.0)*x1131)));
evalcond[3]=((-0.2125)+(((-0.09)*cj2*x1140))+(((-1.0)*pp))+(((-0.09)*x1132))+(((1.1)*x1139)));
evalcond[4]=(((x1129*x1134))+((x1129*x1135))+(((-1.0)*x1131*x1138))+(((0.045)*x1138))+(((0.55)*x1129))+((x1133*x1138)));
evalcond[5]=(((cj2*x1136))+(((-1.0)*cj2*x1129*x1131))+(((-1.0)*x1130*x1135))+(((-1.0)*x1130*x1134))+pz+(((-0.55)*x1130))+((cj2*x1129*x1133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1141=((0.045)*sj2);
CheckValue<IkReal> x1142=IKPowWithIntegerCheck(px,-2);
if(!x1142.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x1142.value)*(pz*pz))))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj3*x1141))+(((0.3)*sj2*sj3))+x1141+(((-1.0)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=pz;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*px))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1143=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+x1143+sj3);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1143)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(pz,-1);
if(!x1145.valid){
continue;
}
IkReal x1144=x1145.value;
cj1array[0]=((((0.55)*x1144))+(((0.3)*cj3*x1144))+(((0.045)*sj3*x1144)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1146=IKsin(j1);
IkReal x1147=IKcos(j1);
IkReal x1148=((0.045)*sj3);
IkReal x1149=((0.3)*cj3);
evalcond[0]=((-1.0)*pz*x1146);
evalcond[1]=((-0.2125)+(((1.1)*pz*x1147))+(((-1.0)*pp))+(((0.09)*px)));
evalcond[2]=(((x1146*x1148))+((x1146*x1149))+(((0.55)*x1146)));
evalcond[3]=((((-0.55)*x1147))+pz+(((-1.0)*x1147*x1149))+(((-1.0)*x1147*x1148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1150=IKPowWithIntegerCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),-1);
if(!x1150.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x1150.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1151=IKcos(j1);
IkReal x1152=IKsin(j1);
IkReal x1153=((0.045)*sj3);
IkReal x1154=((0.3)*cj3);
IkReal x1155=(pz*x1151);
evalcond[0]=((-1.0)*pz*x1152);
evalcond[1]=((-0.55)+x1155+(((-1.0)*x1154))+(((-1.0)*x1153)));
evalcond[2]=((-0.2125)+(((1.1)*x1155))+(((-1.0)*pp))+(((0.09)*px)));
evalcond[3]=(((x1152*x1153))+((x1152*x1154))+(((0.55)*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+px+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-12.2222222222222)+(((-1.0)*sj3))+(((-6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1156=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+x1156+sj3);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1156)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1158=IKPowWithIntegerCheck(pz,-1);
if(!x1158.valid){
continue;
}
IkReal x1157=x1158.value;
cj1array[0]=((((0.045)*sj3*x1157))+(((0.55)*x1157))+(((0.3)*cj3*x1157)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1159=IKsin(j1);
IkReal x1160=IKcos(j1);
IkReal x1161=((0.045)*sj3);
IkReal x1162=((0.3)*cj3);
evalcond[0]=(pz*x1159);
evalcond[1]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp))+(((1.1)*pz*x1160)));
evalcond[2]=(((x1159*x1161))+((x1159*x1162))+(((0.55)*x1159)));
evalcond[3]=(pz+(((-0.55)*x1160))+(((-1.0)*x1160*x1162))+(((-1.0)*x1160*x1161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),-1);
if(!x1163.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x1163.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1164=IKcos(j1);
IkReal x1165=IKsin(j1);
IkReal x1166=((0.045)*sj3);
IkReal x1167=((0.3)*cj3);
IkReal x1168=(pz*x1164);
evalcond[0]=(pz*x1165);
evalcond[1]=((-0.55)+x1168+(((-1.0)*x1167))+(((-1.0)*x1166)));
evalcond[2]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp))+(((1.1)*x1168)));
evalcond[3]=(((x1165*x1166))+((x1165*x1167))+(((0.55)*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)*px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst168;
gconst168=IKsign(pz);
IkReal x1169=IKsign(pz);
IkReal x1170=(sj3*x1169);
IkReal x1171=(cj3*x1169);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.045)*x1170))+(((0.55)*x1169))+(((0.3)*x1171)))))+(IKabs(((((0.045)*x1171))+(((-0.3)*x1170))+(((-0.045)*x1169))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1172=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x1172)));
op[1]=0;
op[2]=((1.0)+x1172);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1173=((0.045)*sj3);
IkReal x1174=((0.3)*cj3);
CheckValue<IkReal> x1175=IKPowWithIntegerCheck((((pz*x1173))+((pz*x1174))+(((0.55)*pz))),-1);
if(!x1175.valid){
continue;
}
CheckValue<IkReal> x1176=IKPowWithIntegerCheck(pz,-1);
if(!x1176.valid){
continue;
}
if( IKabs(((x1175.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1176.value)*(((0.55)+x1174+x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1175.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x1176.value)*(((0.55)+x1174+x1173))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1175.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x1176.value)*(((0.55)+x1174+x1173))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1177=IKcos(j1);
IkReal x1178=IKsin(j1);
IkReal x1179=((0.045)*cj3);
IkReal x1180=((0.3)*cj3);
IkReal x1181=(sj3*x1178);
IkReal x1182=(cj3*x1178);
IkReal x1183=(sj3*x1177);
IkReal x1184=(pz*x1178);
IkReal x1185=(pz*x1177);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1185+(((-1.0)*x1180)));
evalcond[1]=((0.045)+x1184+(((0.3)*sj3))+(((-1.0)*x1179)));
evalcond[2]=((-0.2125)+(((-0.09)*x1184))+(((-1.0)*pp))+(((1.1)*x1185)));
evalcond[3]=(((x1178*x1180))+(((0.045)*x1177))+(((0.3)*x1183))+(((0.045)*x1181))+(((-1.0)*x1177*x1179))+(((0.55)*x1178)));
evalcond[4]=((((0.045)*x1178))+(((-1.0)*x1178*x1179))+(((0.3)*x1181))+pz+(((-0.045)*x1183))+(((-0.55)*x1177))+(((-1.0)*x1177*x1180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1187=IKPowWithIntegerCheck(pz,-1);
if(!x1187.valid){
continue;
}
IkReal x1186=x1187.value;
if( IKabs(((0.111111111111111)*x1186*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1186*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1186*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1186*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x1186*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1186*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1188=IKcos(j1);
IkReal x1189=IKsin(j1);
IkReal x1190=((0.045)*cj3);
IkReal x1191=((0.3)*cj3);
IkReal x1192=(sj3*x1189);
IkReal x1193=(cj3*x1189);
IkReal x1194=(sj3*x1188);
IkReal x1195=(pz*x1189);
IkReal x1196=(pz*x1188);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1196+(((-1.0)*x1191)));
evalcond[1]=((0.045)+x1195+(((-1.0)*x1190))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1196))+(((-0.09)*x1195)));
evalcond[3]=((((-1.0)*x1188*x1190))+((x1189*x1191))+(((0.3)*x1194))+(((0.045)*x1188))+(((0.045)*x1192))+(((0.55)*x1189)));
evalcond[4]=((((-1.0)*x1189*x1190))+(((-1.0)*x1188*x1191))+(((0.3)*x1192))+(((0.045)*x1189))+(((-0.045)*x1194))+pz+(((-0.55)*x1188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1197 = IKatan2WithCheck((gconst168*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst168*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
j1array[0]=x1197.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1198=IKcos(j1);
IkReal x1199=IKsin(j1);
IkReal x1200=((0.045)*cj3);
IkReal x1201=((0.3)*cj3);
IkReal x1202=(sj3*x1199);
IkReal x1203=(cj3*x1199);
IkReal x1204=(sj3*x1198);
IkReal x1205=(pz*x1199);
IkReal x1206=(pz*x1198);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1206+(((-1.0)*x1201)));
evalcond[1]=((0.045)+x1205+(((0.3)*sj3))+(((-1.0)*x1200)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1205))+(((1.1)*x1206)));
evalcond[3]=(((x1199*x1201))+(((0.3)*x1204))+(((0.045)*x1198))+(((0.045)*x1202))+(((0.55)*x1199))+(((-1.0)*x1198*x1200)));
evalcond[4]=((((-1.0)*x1199*x1200))+(((-0.045)*x1204))+(((0.3)*x1202))+pz+(((0.045)*x1199))+(((-0.55)*x1198))+(((-1.0)*x1198*x1201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst169;
gconst169=IKsign(pz);
IkReal x1207=IKsign(pz);
IkReal x1208=(sj3*x1207);
IkReal x1209=(cj3*x1207);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.55)*x1207))+(((0.3)*x1209))+(((0.045)*x1208)))))+(IKabs(((((-0.045)*x1209))+(((0.3)*x1208))+(((0.045)*x1207))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1210=((2.40588235294118)*sj3);
op[0]=((1.0)+x1210);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x1210)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1211=((0.045)*sj3);
IkReal x1212=((0.3)*cj3);
CheckValue<IkReal> x1213=IKPowWithIntegerCheck((((pz*x1211))+((pz*x1212))+(((0.55)*pz))),-1);
if(!x1213.valid){
continue;
}
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(pz,-1);
if(!x1214.valid){
continue;
}
if( IKabs(((x1213.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1214.value)*(((0.55)+x1212+x1211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1213.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x1214.value)*(((0.55)+x1212+x1211))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1213.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x1214.value)*(((0.55)+x1212+x1211))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1215=IKcos(j1);
IkReal x1216=IKsin(j1);
IkReal x1217=((0.045)*cj3);
IkReal x1218=((0.3)*cj3);
IkReal x1219=(sj3*x1216);
IkReal x1220=(cj3*x1216);
IkReal x1221=(sj3*x1215);
IkReal x1222=(pz*x1216);
IkReal x1223=(pz*x1215);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1223+(((-1.0)*x1218)));
evalcond[1]=((0.045)+(((-1.0)*x1222))+(((0.3)*sj3))+(((-1.0)*x1217)));
evalcond[2]=((-0.2125)+(((1.1)*x1223))+(((-1.0)*pp))+(((0.09)*x1222)));
evalcond[3]=((((-0.045)*x1215))+(((-0.3)*x1221))+(((0.045)*x1219))+((x1216*x1218))+((x1215*x1217))+(((0.55)*x1216)));
evalcond[4]=((((-1.0)*x1215*x1218))+(((-0.045)*x1216))+(((-0.3)*x1219))+(((-0.045)*x1221))+pz+((x1216*x1217))+(((-0.55)*x1215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1225=IKPowWithIntegerCheck(pz,-1);
if(!x1225.valid){
continue;
}
IkReal x1224=x1225.value;
if( IKabs(((0.111111111111111)*x1224*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1224*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1224*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1224*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x1224*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1224*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1226=IKcos(j1);
IkReal x1227=IKsin(j1);
IkReal x1228=((0.045)*cj3);
IkReal x1229=((0.3)*cj3);
IkReal x1230=(sj3*x1227);
IkReal x1231=(cj3*x1227);
IkReal x1232=(sj3*x1226);
IkReal x1233=(pz*x1227);
IkReal x1234=(pz*x1226);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1234+(((-1.0)*x1229)));
evalcond[1]=((0.045)+(((-1.0)*x1233))+(((-1.0)*x1228))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1234))+(((-1.0)*pp))+(((0.09)*x1233)));
evalcond[3]=((((0.045)*x1230))+(((-0.3)*x1232))+(((-0.045)*x1226))+((x1226*x1228))+((x1227*x1229))+(((0.55)*x1227)));
evalcond[4]=((((-1.0)*x1226*x1229))+(((-0.3)*x1230))+(((-0.045)*x1227))+(((-0.045)*x1232))+pz+((x1227*x1228))+(((-0.55)*x1226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1235 = IKatan2WithCheck((gconst169*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst169*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1235.valid){
continue;
}
j1array[0]=x1235.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1236=IKcos(j1);
IkReal x1237=IKsin(j1);
IkReal x1238=((0.045)*cj3);
IkReal x1239=((0.3)*cj3);
IkReal x1240=(sj3*x1237);
IkReal x1241=(cj3*x1237);
IkReal x1242=(sj3*x1236);
IkReal x1243=(pz*x1237);
IkReal x1244=(pz*x1236);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1244+(((-1.0)*x1239)));
evalcond[1]=((0.045)+(((-1.0)*x1238))+(((-1.0)*x1243))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1243))+(((1.1)*x1244))+(((-1.0)*pp)));
evalcond[3]=((((-0.3)*x1242))+(((-0.045)*x1236))+(((0.55)*x1237))+((x1237*x1239))+((x1236*x1238))+(((0.045)*x1240)));
evalcond[4]=((((-0.3)*x1240))+(((-0.045)*x1237))+(((-1.0)*x1236*x1239))+pz+(((-0.045)*x1242))+((x1237*x1238))+(((-0.55)*x1236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1245=(px*sj2);
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((-1.0)*cj2*px);
evalcond[3]=((0.045)+(((-1.0)*x1245))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[4]=((-0.2125)+(((0.09)*x1245))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1246=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+x1246+sj3);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1246)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1248=IKPowWithIntegerCheck(pz,-1);
if(!x1248.valid){
continue;
}
IkReal x1247=x1248.value;
CheckValue<IkReal> x1249=IKPowWithIntegerCheck(cj2,-1);
if(!x1249.valid){
continue;
}
if( IKabs((x1247*(x1249.value)*(((-0.045)+(((0.045)*cj3))+((px*sj2))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1247*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1247*(x1249.value)*(((-0.045)+(((0.045)*cj3))+((px*sj2))+(((-0.3)*sj3))))))+IKsqr((x1247*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1247*(x1249.value)*(((-0.045)+(((0.045)*cj3))+((px*sj2))+(((-0.3)*sj3))))), (x1247*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1250=IKsin(j1);
IkReal x1251=IKcos(j1);
IkReal x1252=((0.045)*cj3);
IkReal x1253=(px*sj2);
IkReal x1254=((0.3)*sj3);
IkReal x1255=((0.045)*sj3);
IkReal x1256=((0.3)*cj3);
IkReal x1257=((0.045)*x1250);
IkReal x1258=((0.3)*x1250);
IkReal x1259=(cj2*x1251);
IkReal x1260=(pz*x1251);
IkReal x1261=(pz*x1250);
evalcond[0]=((((-1.0)*cj2*px))+(((-1.0)*sj2*x1261)));
evalcond[1]=((-0.55)+(((-1.0)*x1255))+(((-1.0)*x1256))+x1260);
evalcond[2]=((0.045)+(((-1.0)*x1252))+x1254+((cj2*x1261))+(((-1.0)*x1253)));
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1260))+(((0.09)*x1253))+(((-0.09)*cj2*x1261)));
evalcond[4]=((((-1.0)*x1252*x1259))+(((0.55)*x1250))+(((0.045)*x1259))+((x1250*x1255))+((x1250*x1256))+((x1254*x1259)));
evalcond[5]=((((-1.0)*cj2*x1250*x1252))+((cj2*x1257))+pz+(((-0.55)*x1251))+(((-1.0)*x1251*x1255))+(((-1.0)*x1251*x1256))+((cj2*x1250*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(pz,-1);
if(!x1263.valid){
continue;
}
IkReal x1262=x1263.value;
CheckValue<IkReal> x1264=IKPowWithIntegerCheck(sj2,-1);
if(!x1264.valid){
continue;
}
if( IKabs(((-1.0)*cj2*px*x1262*(x1264.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1262*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj2*px*x1262*(x1264.value)))+IKsqr((x1262*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.0)*cj2*px*x1262*(x1264.value)), (x1262*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1265=IKsin(j1);
IkReal x1266=IKcos(j1);
IkReal x1267=((0.045)*cj3);
IkReal x1268=(px*sj2);
IkReal x1269=((0.3)*sj3);
IkReal x1270=((0.045)*sj3);
IkReal x1271=((0.3)*cj3);
IkReal x1272=((0.045)*x1265);
IkReal x1273=((0.3)*x1265);
IkReal x1274=(cj2*x1266);
IkReal x1275=(pz*x1266);
IkReal x1276=(pz*x1265);
evalcond[0]=((((-1.0)*cj2*px))+(((-1.0)*sj2*x1276)));
evalcond[1]=((-0.55)+x1275+(((-1.0)*x1271))+(((-1.0)*x1270)));
evalcond[2]=((0.045)+x1269+((cj2*x1276))+(((-1.0)*x1268))+(((-1.0)*x1267)));
evalcond[3]=((-0.2125)+(((-0.09)*cj2*x1276))+(((-1.0)*pp))+(((0.09)*x1268))+(((1.1)*x1275)));
evalcond[4]=(((x1269*x1274))+((x1265*x1271))+((x1265*x1270))+(((-1.0)*x1267*x1274))+(((0.045)*x1274))+(((0.55)*x1265)));
evalcond[5]=((((-1.0)*x1266*x1271))+(((-1.0)*x1266*x1270))+(((-1.0)*cj2*x1265*x1267))+((cj2*x1265*x1269))+((cj2*x1272))+pz+(((-0.55)*x1266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1277=(px*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=x1277;
evalcond[2]=x1277;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst170;
gconst170=IKsign(pz);
IkReal x1278=IKsign(pz);
IkReal x1279=(sj3*x1278);
IkReal x1280=(cj3*x1278);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((-0.045)*x1278))+(((0.045)*x1280))+(((-0.3)*x1279)))))+(IKabs(((((0.55)*x1278))+(((0.045)*x1279))+(((0.3)*x1280))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1281=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x1281)));
op[1]=0;
op[2]=((1.0)+x1281);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1282=((0.045)*sj3);
IkReal x1283=((0.3)*cj3);
CheckValue<IkReal> x1284=IKPowWithIntegerCheck(((((0.55)*pz))+((pz*x1282))+((pz*x1283))),-1);
if(!x1284.valid){
continue;
}
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(pz,-1);
if(!x1285.valid){
continue;
}
if( IKabs(((x1284.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1285.value)*(((0.55)+x1283+x1282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1284.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x1285.value)*(((0.55)+x1283+x1282))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1284.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x1285.value)*(((0.55)+x1283+x1282))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1286=IKcos(j1);
IkReal x1287=IKsin(j1);
IkReal x1288=((0.045)*cj3);
IkReal x1289=((0.3)*cj3);
IkReal x1290=(sj3*x1287);
IkReal x1291=(cj3*x1287);
IkReal x1292=(sj3*x1286);
IkReal x1293=(pz*x1287);
IkReal x1294=(pz*x1286);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1294+(((-1.0)*x1289)));
evalcond[1]=((0.045)+x1293+(((-1.0)*x1288))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1294))+(((-1.0)*pp))+(((-0.09)*x1293)));
evalcond[3]=((((0.3)*x1292))+(((0.045)*x1290))+(((0.55)*x1287))+(((0.045)*x1286))+((x1287*x1289))+(((-1.0)*x1286*x1288)));
evalcond[4]=((((0.3)*x1290))+(((-0.55)*x1286))+(((0.045)*x1287))+pz+(((-0.045)*x1292))+(((-1.0)*x1287*x1288))+(((-1.0)*x1286*x1289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(pz,-1);
if(!x1296.valid){
continue;
}
IkReal x1295=x1296.value;
if( IKabs(((0.111111111111111)*x1295*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1295*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1295*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1295*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x1295*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1295*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1297=IKcos(j1);
IkReal x1298=IKsin(j1);
IkReal x1299=((0.045)*cj3);
IkReal x1300=((0.3)*cj3);
IkReal x1301=(sj3*x1298);
IkReal x1302=(cj3*x1298);
IkReal x1303=(sj3*x1297);
IkReal x1304=(pz*x1298);
IkReal x1305=(pz*x1297);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1305+(((-1.0)*x1300)));
evalcond[1]=((0.045)+x1304+(((-1.0)*x1299))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1304))+(((1.1)*x1305)));
evalcond[3]=((((0.045)*x1297))+(((0.55)*x1298))+(((0.3)*x1303))+(((-1.0)*x1297*x1299))+(((0.045)*x1301))+((x1298*x1300)));
evalcond[4]=((((0.045)*x1298))+(((-0.045)*x1303))+(((-1.0)*x1297*x1300))+(((-0.55)*x1297))+pz+(((-1.0)*x1298*x1299))+(((0.3)*x1301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1306 = IKatan2WithCheck((gconst170*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst170*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1306.valid){
continue;
}
j1array[0]=x1306.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1307=IKcos(j1);
IkReal x1308=IKsin(j1);
IkReal x1309=((0.045)*cj3);
IkReal x1310=((0.3)*cj3);
IkReal x1311=(sj3*x1308);
IkReal x1312=(cj3*x1308);
IkReal x1313=(sj3*x1307);
IkReal x1314=(pz*x1308);
IkReal x1315=(pz*x1307);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1315+(((-1.0)*x1310)));
evalcond[1]=((0.045)+x1314+(((-1.0)*x1309))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1315))+(((-0.09)*x1314)));
evalcond[3]=((((-1.0)*x1307*x1309))+((x1308*x1310))+(((0.3)*x1313))+(((0.045)*x1307))+(((0.55)*x1308))+(((0.045)*x1311)));
evalcond[4]=((((-1.0)*x1308*x1309))+(((-0.045)*x1313))+(((-1.0)*x1307*x1310))+(((-0.55)*x1307))+pz+(((0.3)*x1311))+(((0.045)*x1308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1316=(px*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=x1316;
evalcond[2]=((-1.0)*x1316);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst171;
gconst171=IKsign(pz);
IkReal x1317=IKsign(pz);
IkReal x1318=(sj3*x1317);
IkReal x1319=(cj3*x1317);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((-0.045)*x1319))+(((0.3)*x1318))+(((0.045)*x1317)))))+(IKabs(((((0.3)*x1319))+(((0.045)*x1318))+(((0.55)*x1317))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1320=((2.40588235294118)*sj3);
op[0]=((1.0)+x1320);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x1320)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1321=((0.045)*sj3);
IkReal x1322=((0.3)*cj3);
CheckValue<IkReal> x1323=IKPowWithIntegerCheck((((pz*x1321))+((pz*x1322))+(((0.55)*pz))),-1);
if(!x1323.valid){
continue;
}
CheckValue<IkReal> x1324=IKPowWithIntegerCheck(pz,-1);
if(!x1324.valid){
continue;
}
if( IKabs(((x1323.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1324.value)*(((0.55)+x1322+x1321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1323.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x1324.value)*(((0.55)+x1322+x1321))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1323.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x1324.value)*(((0.55)+x1322+x1321))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1325=IKcos(j1);
IkReal x1326=IKsin(j1);
IkReal x1327=((0.045)*cj3);
IkReal x1328=((0.3)*cj3);
IkReal x1329=(sj3*x1326);
IkReal x1330=(cj3*x1326);
IkReal x1331=(sj3*x1325);
IkReal x1332=(pz*x1326);
IkReal x1333=(pz*x1325);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1333+(((-1.0)*x1328)));
evalcond[1]=((0.045)+(((-1.0)*x1332))+(((-1.0)*x1327))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1332))+(((-1.0)*pp))+(((1.1)*x1333)));
evalcond[3]=((((-0.045)*x1325))+(((-0.3)*x1331))+((x1326*x1328))+((x1325*x1327))+(((0.045)*x1329))+(((0.55)*x1326)));
evalcond[4]=((((-0.045)*x1326))+((x1326*x1327))+(((-1.0)*x1325*x1328))+pz+(((-0.55)*x1325))+(((-0.045)*x1331))+(((-0.3)*x1329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1335=IKPowWithIntegerCheck(pz,-1);
if(!x1335.valid){
continue;
}
IkReal x1334=x1335.value;
if( IKabs(((0.111111111111111)*x1334*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1334*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1334*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1334*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x1334*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1334*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1336=IKcos(j1);
IkReal x1337=IKsin(j1);
IkReal x1338=((0.045)*cj3);
IkReal x1339=((0.3)*cj3);
IkReal x1340=(sj3*x1337);
IkReal x1341=(cj3*x1337);
IkReal x1342=(sj3*x1336);
IkReal x1343=(pz*x1337);
IkReal x1344=(pz*x1336);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1344+(((-1.0)*x1339)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x1338))+(((-1.0)*x1343)));
evalcond[2]=((-0.2125)+(((0.09)*x1343))+(((1.1)*x1344))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x1340))+((x1337*x1339))+((x1336*x1338))+(((0.55)*x1337))+(((-0.045)*x1336))+(((-0.3)*x1342)));
evalcond[4]=(((x1337*x1338))+(((-0.045)*x1342))+(((-0.55)*x1336))+(((-1.0)*x1336*x1339))+pz+(((-0.045)*x1337))+(((-0.3)*x1340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1345 = IKatan2WithCheck((gconst171*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst171*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1345.valid){
continue;
}
j1array[0]=x1345.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1346=IKcos(j1);
IkReal x1347=IKsin(j1);
IkReal x1348=((0.045)*cj3);
IkReal x1349=((0.3)*cj3);
IkReal x1350=(sj3*x1347);
IkReal x1351=(cj3*x1347);
IkReal x1352=(sj3*x1346);
IkReal x1353=(pz*x1347);
IkReal x1354=(pz*x1346);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1354+(((-1.0)*x1349)));
evalcond[1]=((0.045)+(((-1.0)*x1353))+(((-1.0)*x1348))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1353))+(((-1.0)*pp))+(((1.1)*x1354)));
evalcond[3]=((((-0.3)*x1352))+(((0.045)*x1350))+(((-0.045)*x1346))+((x1346*x1348))+((x1347*x1349))+(((0.55)*x1347)));
evalcond[4]=((((-0.045)*x1352))+(((-0.3)*x1350))+(((-0.55)*x1346))+(((-1.0)*x1346*x1349))+(((-0.045)*x1347))+((x1347*x1348))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1355=((0.3)*sj3);
IkReal x1356=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((((-1.0)*sj2*x1356))+(((0.045)*sj2))+((sj2*x1355)));
evalcond[3]=0;
evalcond[4]=((0.045)+x1355+(((-1.0)*x1356)));
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-2.40588235294118)*cj2*sj3))+(((-1.0)*cj2)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*cj2);
op[1]=0;
op[2]=cj2;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*cj2);
op[1]=0;
op[2]=cj2;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1357=((2.40588235294118)*cj2*sj3);
op[0]=((((-1.0)*x1357))+(((-1.0)*cj2)));
op[1]=0;
op[2]=(x1357+cj2);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1358=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=x1358;
evalcond[2]=x1358;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((277777777.777778)*pz);
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1359=IKsin(j1);
IkReal x1360=IKcos(j1);
IkReal x1361=(pz*x1360);
evalcond[0]=((3.6e-9)*x1359);
evalcond[1]=((-1.0)*pz*x1359);
evalcond[2]=((-3.6e-9)+x1361);
evalcond[3]=((-0.2125)+(((1.1)*x1361))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((277777777.777778)*pz);
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1362=IKsin(j1);
IkReal x1363=IKcos(j1);
IkReal x1364=(pz*x1363);
evalcond[0]=((3.6e-9)*x1362);
evalcond[1]=((-1.0)*pz*x1362);
evalcond[2]=((-3.6e-9)+x1364);
evalcond[3]=((-0.2125)+(((1.1)*x1364))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.85)+(((-2.045)*sj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)))))+(IKabs(IKabs(pz))));
evalcond[1]=-3.6e-9;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)))))+(IKabs(IKabs(pz))));
evalcond[1]=-3.6e-9;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(pz,-1);
if(!x1366.valid){
continue;
}
IkReal x1365=x1366.value;
cj1array[0]=((((2.045)*sj3*x1365))+(((0.85)*x1365)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1367=IKsin(j1);
IkReal x1368=IKcos(j1);
IkReal x1369=((2.045)*sj3);
evalcond[0]=((-1.0)*pz*x1367);
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz*x1368)));
evalcond[2]=(((x1367*x1369))+(((0.85)*x1367)));
evalcond[3]=((((-1.0)*x1368*x1369))+pz+(((-0.85)*x1368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1370=IKPowWithIntegerCheck(((-0.85)+(((-2.045)*sj3))),-1);
if(!x1370.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x1370.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1371=IKcos(j1);
IkReal x1372=IKsin(j1);
IkReal x1373=((2.045)*sj3);
IkReal x1374=(pz*x1371);
evalcond[0]=((-1.0)*pz*x1372);
evalcond[1]=((-0.85)+x1374+(((-1.0)*x1373)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1374)));
evalcond[3]=(((x1372*x1373))+(((0.85)*x1372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1375=((0.3)*sj3);
IkReal x1376=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((-0.045)+x1376+(((-1.0)*x1375)));
evalcond[2]=((0.045)+x1375+(((-1.0)*x1376)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((277777777.777778)*pz);
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1377=IKsin(j1);
IkReal x1378=IKcos(j1);
IkReal x1379=(pz*x1378);
evalcond[0]=(pz*x1377);
evalcond[1]=((3.6e-9)*x1377);
evalcond[2]=((-3.6e-9)+x1379);
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((277777777.777778)*pz);
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1380=IKsin(j1);
IkReal x1381=IKcos(j1);
IkReal x1382=(pz*x1381);
evalcond[0]=(pz*x1380);
evalcond[1]=((3.6e-9)*x1380);
evalcond[2]=((-3.6e-9)+x1382);
evalcond[3]=((-0.2125)+(((1.1)*x1382))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.85)+(((-2.045)*sj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[4], cj1array[4], sj1array[4];
bool j1valid[4]={false};
_nj1 = 4;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=1.5707963267949;
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
j1array[2]=3.14159265358979;
sj1array[2]=IKsin(j1array[2]);
cj1array[2]=IKcos(j1array[2]);
j1array[3]=-1.5707963267949;
sj1array[3]=IKsin(j1array[3]);
cj1array[3]=IKcos(j1array[3]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1array[2] > IKPI )
{
    j1array[2]-=IK2PI;
}
else if( j1array[2] < -IKPI )
{    j1array[2]+=IK2PI;
}
j1valid[2] = true;
if( j1array[3] > IKPI )
{
    j1array[3]-=IK2PI;
}
else if( j1array[3] < -IKPI )
{    j1array[3]+=IK2PI;
}
j1valid[3] = true;
for(int ij1 = 0; ij1 < 4; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 4; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)))))+(IKabs(IKabs(pz))));
evalcond[1]=-3.6e-9;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)))))+(IKabs(IKabs(pz))));
evalcond[1]=-3.6e-9;
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1384=IKPowWithIntegerCheck(pz,-1);
if(!x1384.valid){
continue;
}
IkReal x1383=x1384.value;
cj1array[0]=((((2.045)*sj3*x1383))+(((0.85)*x1383)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1385=IKsin(j1);
IkReal x1386=IKcos(j1);
IkReal x1387=((2.045)*sj3);
evalcond[0]=(pz*x1385);
evalcond[1]=((-0.2125)+(((1.1)*pz*x1386))+(((-1.0)*pp)));
evalcond[2]=((((0.85)*x1385))+((x1385*x1387)));
evalcond[3]=((((-0.85)*x1386))+pz+(((-1.0)*x1386*x1387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1388=IKPowWithIntegerCheck(((-0.85)+(((-2.045)*sj3))),-1);
if(!x1388.valid){
continue;
}
cj1array[0]=((-1.0)*pz*(x1388.value));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1389=IKcos(j1);
IkReal x1390=IKsin(j1);
IkReal x1391=((2.045)*sj3);
IkReal x1392=(pz*x1389);
evalcond[0]=(pz*x1390);
evalcond[1]=((-0.85)+x1392+(((-1.0)*x1391)));
evalcond[2]=((-0.2125)+(((1.1)*x1392))+(((-1.0)*pp)));
evalcond[3]=(((x1390*x1391))+(((0.85)*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1393=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*sj0)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=x1393;
evalcond[2]=x1393;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1394=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+x1394+sj3);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1394)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1395=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+x1395+sj3);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1395)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1396=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+x1396+sj3);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1396)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(IKabs(px)))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1397=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+x1397+sj3);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1397)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(px))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1398=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+x1398+sj3);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1398)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1402=IKPowWithIntegerCheck(cj0,-1);
if(!x1402.valid){
continue;
}
IkReal x1399=x1402.value;
CheckValue<IkReal> x1403=IKPowWithIntegerCheck(px,-1);
if(!x1403.valid){
continue;
}
IkReal x1400=x1403.value;
IkReal x1401=(x1399*x1400);
sj1array[0]=((((0.0818181818181818)*sj0*x1399))+(((0.909090909090909)*pp*x1401))+(((0.193181818181818)*x1401)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1404=IKcos(j1);
IkReal x1405=IKsin(j1);
IkReal x1406=((0.045)*sj3);
IkReal x1407=((0.3)*cj3);
IkReal x1408=(cj0*px);
evalcond[0]=(x1404*x1408);
evalcond[1]=((-0.55)+(((-1.0)*x1406))+(((-1.0)*x1407))+((x1405*x1408)));
evalcond[2]=((((-0.55)*x1404))+(((-1.0)*x1404*x1406))+(((-1.0)*x1404*x1407)));
evalcond[3]=((((-1.0)*x1408))+((x1405*x1406))+((x1405*x1407))+(((0.55)*x1405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))),-1);
if(!x1409.valid){
continue;
}
sj1array[0]=(cj0*px*(x1409.value));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1410=IKsin(j1);
IkReal x1411=IKcos(j1);
IkReal x1412=((0.045)*sj3);
IkReal x1413=((0.3)*cj3);
IkReal x1414=(cj0*px);
evalcond[0]=(x1411*x1414);
evalcond[1]=((-0.55)+(((-1.0)*x1413))+(((-1.0)*x1412))+((x1410*x1414)));
evalcond[2]=((-0.2125)+(((1.1)*x1410*x1414))+(((-0.09)*px*sj0))+(((-1.0)*pp)));
evalcond[3]=((((-0.55)*x1411))+(((-1.0)*x1411*x1412))+(((-1.0)*x1411*x1413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1415=((0.3)*sj3);
IkReal x1416=((0.045)*cj3);
IkReal x1417=(px*sj0);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((-0.045)+(((-1.0)*x1415))+x1416+x1417);
evalcond[2]=((0.045)+(((-1.0)*x1416))+x1415+(((-1.0)*x1417)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1418=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x1418);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1418)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-0.09)*px))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1419=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x1419);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1419)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1420=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x1420);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1420)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(IKabs(px)))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1421=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x1421);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1421)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(px))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=0;
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1422=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x1422);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1422)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1426=IKPowWithIntegerCheck(cj0,-1);
if(!x1426.valid){
continue;
}
IkReal x1423=x1426.value;
CheckValue<IkReal> x1427=IKPowWithIntegerCheck(px,-1);
if(!x1427.valid){
continue;
}
IkReal x1424=x1427.value;
IkReal x1425=(x1423*x1424);
sj1array[0]=((((0.193181818181818)*x1425))+(((-0.0818181818181818)*sj0*x1423))+(((0.909090909090909)*pp*x1425)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1428=IKcos(j1);
IkReal x1429=IKsin(j1);
IkReal x1430=(cj0*px);
IkReal x1431=((0.045)*sj3);
IkReal x1432=((0.3)*cj3);
evalcond[0]=((-1.0)*x1428*x1430);
evalcond[1]=((-0.55)+((x1429*x1430))+(((-1.0)*x1431))+(((-1.0)*x1432)));
evalcond[2]=((((-0.55)*x1428))+(((-1.0)*x1428*x1431))+(((-1.0)*x1428*x1432)));
evalcond[3]=(((x1429*x1432))+((x1429*x1431))+(((-1.0)*x1430))+(((0.55)*x1429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1433=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))),-1);
if(!x1433.valid){
continue;
}
sj1array[0]=(cj0*px*(x1433.value));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1434=IKsin(j1);
IkReal x1435=IKcos(j1);
IkReal x1436=(cj0*px);
IkReal x1437=((0.045)*sj3);
IkReal x1438=((0.3)*cj3);
evalcond[0]=((-1.0)*x1435*x1436);
evalcond[1]=((-0.55)+(((-1.0)*x1437))+(((-1.0)*x1438))+((x1434*x1436)));
evalcond[2]=((-0.2125)+(((1.1)*x1434*x1436))+(((-1.0)*pp))+(((0.09)*px*sj0)));
evalcond[3]=((((-1.0)*x1435*x1437))+(((-1.0)*x1435*x1438))+(((-0.55)*x1435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1439=((0.3)*sj3);
IkReal x1440=((0.045)*cj3);
IkReal x1441=(px*sj2);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((((-1.0)*sj2*x1440))+(((0.045)*sj2))+((sj2*x1439))+px);
evalcond[3]=(cj2*px);
evalcond[4]=((0.045)+x1439+x1441+(((-1.0)*x1440)));
evalcond[5]=((-0.2125)+(((-0.09)*x1441))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1442=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x1442);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1442)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1443=((1.0)*px);
IkReal x1444=((0.3)*sj3);
IkReal x1445=((0.045)*cj3);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((((-1.0)*sj2*x1445))+(((0.045)*sj2))+((sj2*x1444))+(((-1.0)*x1443)));
evalcond[3]=((-1.0)*cj2*px);
evalcond[4]=((0.045)+(((-1.0)*sj2*x1443))+x1444+(((-1.0)*x1445)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px*sj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((12.2222222222222)+sj3+(((6.66666666666667)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1446=((6.66666666666667)*cj3);
op[0]=((12.2222222222222)+sj3+x1446);
op[1]=0;
op[2]=((-12.2222222222222)+(((-1.0)*sj3))+(((-1.0)*x1446)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst172;
gconst172=IKsign(pz);
IkReal x1447=IKsign(pz);
IkReal x1448=(sj3*x1447);
IkReal x1449=(cj3*x1447);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.55)*x1447))+(((0.045)*x1448))+(((0.3)*x1449)))))+(IKabs(((((-0.045)*x1447))+(((-0.3)*x1448))+(((0.045)*x1449))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1450=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x1450)));
op[1]=0;
op[2]=((1.0)+x1450);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1451=((0.045)*sj3);
IkReal x1452=((0.3)*cj3);
CheckValue<IkReal> x1453=IKPowWithIntegerCheck((((pz*x1452))+((pz*x1451))+(((0.55)*pz))),-1);
if(!x1453.valid){
continue;
}
CheckValue<IkReal> x1454=IKPowWithIntegerCheck(pz,-1);
if(!x1454.valid){
continue;
}
if( IKabs(((x1453.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1454.value)*(((0.55)+x1451+x1452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1453.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x1454.value)*(((0.55)+x1451+x1452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1453.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x1454.value)*(((0.55)+x1451+x1452))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1455=IKcos(j1);
IkReal x1456=IKsin(j1);
IkReal x1457=((0.045)*cj3);
IkReal x1458=((0.3)*cj3);
IkReal x1459=(sj3*x1456);
IkReal x1460=(cj3*x1456);
IkReal x1461=(sj3*x1455);
IkReal x1462=(pz*x1456);
IkReal x1463=(pz*x1455);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1458))+x1463);
evalcond[1]=((0.045)+(((-1.0)*x1457))+x1462+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1463))+(((-1.0)*pp))+(((-0.09)*x1462)));
evalcond[3]=(((x1456*x1458))+(((0.55)*x1456))+(((0.3)*x1461))+(((-1.0)*x1455*x1457))+(((0.045)*x1455))+(((0.045)*x1459)));
evalcond[4]=((((-1.0)*x1455*x1458))+(((0.045)*x1456))+(((0.3)*x1459))+(((-0.045)*x1461))+pz+(((-0.55)*x1455))+(((-1.0)*x1456*x1457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(pz,-1);
if(!x1465.valid){
continue;
}
IkReal x1464=x1465.value;
if( IKabs(((0.111111111111111)*x1464*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1464*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1464*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1464*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x1464*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1464*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1466=IKcos(j1);
IkReal x1467=IKsin(j1);
IkReal x1468=((0.045)*cj3);
IkReal x1469=((0.3)*cj3);
IkReal x1470=(sj3*x1467);
IkReal x1471=(cj3*x1467);
IkReal x1472=(sj3*x1466);
IkReal x1473=(pz*x1467);
IkReal x1474=(pz*x1466);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1469))+x1474);
evalcond[1]=((0.045)+(((-1.0)*x1468))+x1473+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1473))+(((-1.0)*pp))+(((1.1)*x1474)));
evalcond[3]=((((0.045)*x1466))+(((-1.0)*x1466*x1468))+(((0.3)*x1472))+((x1467*x1469))+(((0.55)*x1467))+(((0.045)*x1470)));
evalcond[4]=((((-1.0)*x1467*x1468))+(((-0.55)*x1466))+(((0.045)*x1467))+(((-1.0)*x1466*x1469))+pz+(((0.3)*x1470))+(((-0.045)*x1472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1475 = IKatan2WithCheck((gconst172*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst172*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1475.valid){
continue;
}
j1array[0]=x1475.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1476=IKcos(j1);
IkReal x1477=IKsin(j1);
IkReal x1478=((0.045)*cj3);
IkReal x1479=((0.3)*cj3);
IkReal x1480=(sj3*x1477);
IkReal x1481=(cj3*x1477);
IkReal x1482=(sj3*x1476);
IkReal x1483=(pz*x1477);
IkReal x1484=(pz*x1476);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1484+(((-1.0)*x1479)));
evalcond[1]=((0.045)+x1483+(((-1.0)*x1478))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1483))+(((-1.0)*pp))+(((1.1)*x1484)));
evalcond[3]=((((0.3)*x1482))+(((0.045)*x1480))+(((-1.0)*x1476*x1478))+(((0.55)*x1477))+((x1477*x1479))+(((0.045)*x1476)));
evalcond[4]=((((0.3)*x1480))+(((-1.0)*x1476*x1479))+(((-1.0)*x1477*x1478))+pz+(((-0.045)*x1482))+(((-0.55)*x1476))+(((0.045)*x1477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst173;
gconst173=IKsign(pz);
IkReal x1485=IKsign(pz);
IkReal x1486=(sj3*x1485);
IkReal x1487=(cj3*x1485);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.3)*x1486))+(((0.045)*x1485))+(((-0.045)*x1487)))))+(IKabs(((((0.3)*x1487))+(((0.045)*x1486))+(((0.55)*x1485))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1488=((2.40588235294118)*sj3);
op[0]=((1.0)+x1488);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x1488)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1489=((0.045)*sj3);
IkReal x1490=((0.3)*cj3);
CheckValue<IkReal> x1491=IKPowWithIntegerCheck((((pz*x1490))+((pz*x1489))+(((0.55)*pz))),-1);
if(!x1491.valid){
continue;
}
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(pz,-1);
if(!x1492.valid){
continue;
}
if( IKabs(((x1491.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1492.value)*(((0.55)+x1490+x1489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1491.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x1492.value)*(((0.55)+x1490+x1489))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1491.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x1492.value)*(((0.55)+x1490+x1489))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1493=IKcos(j1);
IkReal x1494=IKsin(j1);
IkReal x1495=((0.045)*cj3);
IkReal x1496=((0.3)*cj3);
IkReal x1497=(sj3*x1494);
IkReal x1498=(cj3*x1494);
IkReal x1499=(sj3*x1493);
IkReal x1500=(pz*x1494);
IkReal x1501=(pz*x1493);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1496))+x1501);
evalcond[1]=((0.045)+(((-1.0)*x1500))+(((-1.0)*x1495))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1501))+(((0.09)*x1500))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x1497))+((x1494*x1496))+((x1493*x1495))+(((0.55)*x1494))+(((-0.3)*x1499))+(((-0.045)*x1493)));
evalcond[4]=(((x1494*x1495))+(((-1.0)*x1493*x1496))+pz+(((-0.3)*x1497))+(((-0.045)*x1499))+(((-0.045)*x1494))+(((-0.55)*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(pz,-1);
if(!x1503.valid){
continue;
}
IkReal x1502=x1503.value;
if( IKabs(((0.111111111111111)*x1502*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1502*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1502*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1502*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x1502*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1502*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1504=IKcos(j1);
IkReal x1505=IKsin(j1);
IkReal x1506=((0.045)*cj3);
IkReal x1507=((0.3)*cj3);
IkReal x1508=(sj3*x1505);
IkReal x1509=(cj3*x1505);
IkReal x1510=(sj3*x1504);
IkReal x1511=(pz*x1505);
IkReal x1512=(pz*x1504);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1507))+x1512);
evalcond[1]=((0.045)+(((-1.0)*x1506))+(((-1.0)*x1511))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1512))+(((0.09)*x1511))+(((-1.0)*pp)));
evalcond[3]=((((0.55)*x1505))+((x1504*x1506))+(((-0.045)*x1504))+(((-0.3)*x1510))+((x1505*x1507))+(((0.045)*x1508)));
evalcond[4]=((((-1.0)*x1504*x1507))+(((-0.045)*x1505))+(((-0.045)*x1510))+pz+((x1505*x1506))+(((-0.3)*x1508))+(((-0.55)*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1513 = IKatan2WithCheck((gconst173*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst173*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1513.valid){
continue;
}
j1array[0]=x1513.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1514=IKcos(j1);
IkReal x1515=IKsin(j1);
IkReal x1516=((0.045)*cj3);
IkReal x1517=((0.3)*cj3);
IkReal x1518=(sj3*x1515);
IkReal x1519=(cj3*x1515);
IkReal x1520=(sj3*x1514);
IkReal x1521=(pz*x1515);
IkReal x1522=(pz*x1514);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1517))+x1522);
evalcond[1]=((0.045)+(((-1.0)*x1516))+(((0.3)*sj3))+(((-1.0)*x1521)));
evalcond[2]=((-0.2125)+(((0.09)*x1521))+(((-1.0)*pp))+(((1.1)*x1522)));
evalcond[3]=((((0.55)*x1515))+((x1514*x1516))+(((-0.045)*x1514))+((x1515*x1517))+(((-0.3)*x1520))+(((0.045)*x1518)));
evalcond[4]=((((-0.045)*x1515))+(((-0.045)*x1520))+(((-1.0)*x1514*x1517))+((x1515*x1516))+pz+(((-0.3)*x1518))+(((-0.55)*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1523=(px*sj0);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=x1523;
evalcond[2]=x1523;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))+(IKabs(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))+(IKabs(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1525 = IKatan2WithCheck(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),((0.55)+(((0.045)*sj3))+(((0.3)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
IkReal x1524=x1525.value;
j1array[0]=((-1.0)*x1524);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1524)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1526=IKsin(j1);
IkReal x1527=IKcos(j1);
IkReal x1528=((0.045)*x1526);
evalcond[0]=((((0.3)*sj3*x1526))+(((-0.3)*cj3*x1527))+(((-0.045)*sj3*x1527))+x1528+(((-1.0)*cj3*x1528))+(((-0.55)*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1530 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
IkReal x1529=x1530.value;
j1array[0]=((-1.0)*x1529);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1529)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1531=IKsin(j1);
IkReal x1532=IKcos(j1);
IkReal x1533=((0.045)*x1532);
evalcond[0]=((((0.3)*cj3*x1531))+(((0.3)*sj3*x1532))+(((0.045)*sj3*x1531))+x1533+(((-1.0)*cj3*x1533))+(((0.55)*x1531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1534=(px*sj0);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=x1534;
evalcond[2]=((-1.0)*x1534);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))+(IKabs(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))+(IKabs(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1536 = IKatan2WithCheck(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),((0.55)+(((0.045)*sj3))+(((0.3)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x1536.valid){
continue;
}
IkReal x1535=x1536.value;
j1array[0]=((-1.0)*x1535);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1535)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1537=IKsin(j1);
IkReal x1538=IKcos(j1);
IkReal x1539=((0.045)*x1537);
evalcond[0]=((((-1.0)*x1539))+(((-0.3)*cj3*x1538))+((cj3*x1539))+(((-0.045)*sj3*x1538))+(((-0.55)*x1538))+(((-0.3)*sj3*x1537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1541 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
IkReal x1540=x1541.value;
j1array[0]=((-1.0)*x1540);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1540)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1542=IKsin(j1);
IkReal x1543=IKcos(j1);
IkReal x1544=((0.045)*x1543);
evalcond[0]=((((0.3)*cj3*x1542))+((cj3*x1544))+(((0.55)*x1542))+(((0.045)*sj3*x1542))+(((-1.0)*x1544))+(((-0.3)*sj3*x1543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1545=(sj0*sj2);
IkReal x1546=((0.045)*sj3);
IkReal x1547=((0.3)*pz);
IkReal x1548=((0.045)*cj3);
IkReal x1549=(cj0*px);
IkReal x1550=(cj2*pz);
IkReal x1551=(cj2*x1549);
CheckValue<IkReal> x1552 = IKatan2WithCheck((gconst159*(((((-1.0)*sj3*x1547))+(((-0.045)*pz))+(((0.3)*cj3*x1551))+(((0.55)*x1551))+((x1546*x1551))+((pz*x1548))+(((-1.0)*px*pz*x1545))))),(gconst159*(((((0.3)*sj3*x1549))+(((-1.0)*x1548*x1549))+(((0.55)*x1550))+((px*x1545*x1549))+((x1546*x1550))+((cj2*cj3*x1547))+(((0.045)*x1549))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1552.valid){
continue;
}
j1array[0]=x1552.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1553=IKcos(j1);
IkReal x1554=IKsin(j1);
IkReal x1555=(px*sj2);
IkReal x1556=((0.3)*sj3);
IkReal x1557=(cj2*px);
IkReal x1558=((0.045)*cj3);
IkReal x1559=((0.045)*cj2);
IkReal x1560=((0.045)*sj3);
IkReal x1561=((0.3)*cj3);
IkReal x1562=(cj0*px);
IkReal x1563=(cj0*x1553);
IkReal x1564=(cj3*x1554);
IkReal x1565=(cj2*x1553);
IkReal x1566=(cj2*x1554);
IkReal x1567=(pz*x1553);
evalcond[0]=((-0.55)+((x1554*x1562))+x1567+(((-1.0)*x1561))+(((-1.0)*x1560)));
evalcond[1]=(((x1555*x1563))+(((-1.0)*pz*sj2*x1554))+((sj0*x1557)));
evalcond[2]=((0.045)+(((-1.0)*x1557*x1563))+x1556+((sj0*x1555))+((pz*x1566))+(((-1.0)*x1558)));
evalcond[3]=((-0.2125)+(((-0.09)*pz*x1566))+(((-1.0)*pp))+(((1.1)*x1554*x1562))+(((1.1)*x1567))+(((-0.09)*sj0*x1555))+(((0.09)*x1557*x1563)));
evalcond[4]=(((x1556*x1566))+((x1554*x1559))+pz+(((-1.0)*x1553*x1560))+(((-1.0)*x1553*x1561))+(((-0.55)*x1553))+(((-1.0)*x1558*x1566)));
evalcond[5]=(((x1556*x1565))+((x1553*x1559))+((x1554*x1561))+((x1554*x1560))+(((0.55)*x1554))+(((-1.0)*x1562))+(((-1.0)*x1558*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1568=(pz*sj2);
IkReal x1569=(cj2*sj0);
IkReal x1570=((0.3)*cj3);
IkReal x1571=((0.045)*sj3);
IkReal x1572=(cj0*px*sj2);
CheckValue<IkReal> x1573 = IKatan2WithCheck((gconst158*((((x1571*x1572))+((x1570*x1572))+((px*pz*x1569))+(((0.55)*x1572))))),(gconst158*(((((-1.0)*cj0*x1569*(px*px)))+(((0.55)*x1568))+((x1568*x1571))+((x1568*x1570))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1573.valid){
continue;
}
j1array[0]=x1573.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1574=IKcos(j1);
IkReal x1575=IKsin(j1);
IkReal x1576=(px*sj2);
IkReal x1577=((0.3)*sj3);
IkReal x1578=(cj2*px);
IkReal x1579=((0.045)*cj3);
IkReal x1580=((0.045)*cj2);
IkReal x1581=((0.045)*sj3);
IkReal x1582=((0.3)*cj3);
IkReal x1583=(cj0*px);
IkReal x1584=(cj0*x1574);
IkReal x1585=(cj3*x1575);
IkReal x1586=(cj2*x1574);
IkReal x1587=(cj2*x1575);
IkReal x1588=(pz*x1574);
evalcond[0]=((-0.55)+(((-1.0)*x1582))+(((-1.0)*x1581))+((x1575*x1583))+x1588);
evalcond[1]=(((x1576*x1584))+((sj0*x1578))+(((-1.0)*pz*sj2*x1575)));
evalcond[2]=((0.045)+((sj0*x1576))+(((-1.0)*x1578*x1584))+x1577+((pz*x1587))+(((-1.0)*x1579)));
evalcond[3]=((-0.2125)+(((0.09)*x1578*x1584))+(((-1.0)*pp))+(((-0.09)*pz*x1587))+(((1.1)*x1588))+(((1.1)*x1575*x1583))+(((-0.09)*sj0*x1576)));
evalcond[4]=(((x1575*x1580))+pz+(((-1.0)*x1579*x1587))+(((-1.0)*x1574*x1581))+(((-1.0)*x1574*x1582))+(((-0.55)*x1574))+((x1577*x1587)));
evalcond[5]=(((x1575*x1582))+((x1575*x1581))+(((0.55)*x1575))+(((-1.0)*x1579*x1586))+((x1577*x1586))+(((-1.0)*x1583))+((x1574*x1580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1589=((0.045)*cj2);
IkReal x1590=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
IkReal x1591=((((0.3)*cj2*sj3))+x1589+(((-1.0)*cj3*x1589)));
CheckValue<IkReal> x1594 = IKatan2WithCheck(x1590,x1591,IKFAST_ATAN2_MAGTHRESH);
if(!x1594.valid){
continue;
}
IkReal x1592=((1.0)*(x1594.value));
if((((x1590*x1590)+(x1591*x1591))) < -0.00001)
continue;
CheckValue<IkReal> x1595=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1590*x1590)+(x1591*x1591)))),-1);
if(!x1595.valid){
continue;
}
if( ((pz*(x1595.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1595.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1593=IKasin((pz*(x1595.value)));
j1array[0]=((((-1.0)*x1592))+(((-1.0)*x1593)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1592))+x1593);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[2];
IkReal x1596=sj2*sj2;
IkReal x1597=cj2*cj2;
IkReal x1598=(cj1*px);
dummyeval[0]=(((px*x1596))+((px*x1597)));
dummyeval[1]=(((x1596*x1598))+((x1597*x1598)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=px;
dummyeval[1]=cj1;
dummyeval[2]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[8];
bool bgotonextstatement = true;
do
{
IkReal x1599=((0.045)*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj3*x1599))+(((0.3)*cj2*sj3))+x1599+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst174;
gconst174=IKsign(px);
IkReal x1600=IKsign(px);
IkReal x1601=((0.3)*x1600);
IkReal x1602=((0.045)*x1600);
dummyeval[0]=px;
dummyeval[1]=((IKabs((((cj3*sj2*x1602))+(((-1.0)*sj2*sj3*x1601))+(((-1.0)*sj2*x1602)))))+(IKabs((((sj3*x1602))+(((0.55)*x1600))+((cj3*x1601))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+pz+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1603=((2.045)*sj3);
IkReal x1604=((6.66666666666667)*pz);
IkReal x1605=(x1603+x1604);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.85)+(((-1.0)*x1605)));
evalcond[2]=0;
evalcond[3]=((0.85)+x1605);
evalcond[4]=((-0.2125)+(((-0.09)*pz))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1607=IKPowWithIntegerCheck(px,-1);
if(!x1607.valid){
continue;
}
IkReal x1606=x1607.value;
cj0array[0]=((((0.85)*x1606))+(((2.045)*sj3*x1606))+(((6.66666666666667)*pz*x1606)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*pz))+(((-1.0)*pp))+(((1.1)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*pz))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1608=((2.045)*sj3);
IkReal x1609=((6.66666666666667)*pz);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.85)+(((-1.0)*x1608))+x1609);
evalcond[2]=0;
evalcond[3]=((0.85)+(((-1.0)*x1609))+x1608);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1611=IKPowWithIntegerCheck(px,-1);
if(!x1611.valid){
continue;
}
IkReal x1610=x1611.value;
cj0array[0]=((((0.85)*x1610))+(((2.045)*sj3*x1610))+(((-6.66666666666667)*pz*x1610)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*px*(IKcos(j0))))+(((0.09)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst175;
gconst175=IKsign(px);
IkReal x1612=IKsign(px);
IkReal x1613=(cj3*x1612);
IkReal x1614=((0.045)*x1612);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((-1.0)*x1614))+(((-0.3)*sj3*x1612))+(((0.045)*x1613)))))+(IKabs(((((0.3)*x1613))+((sj3*x1614))+(((0.55)*x1612))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1615=((0.045)*sj3);
IkReal x1616=((0.3)*cj3);
IkReal x1617=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1618=(x1616+x1615);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x1618)));
evalcond[2]=x1617;
evalcond[3]=x1617;
evalcond[4]=((0.55)+x1618);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1620=IKPowWithIntegerCheck(px,-1);
if(!x1620.valid){
continue;
}
IkReal x1619=x1620.value;
if( IKabs(((0.111111111111111)*x1619*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1619*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1619*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1619*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1619*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1619*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1621=IKcos(j0);
IkReal x1622=IKsin(j0);
IkReal x1623=(px*x1622);
IkReal x1624=(px*x1621);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1624);
evalcond[1]=((0.045)+x1623+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1624))+(((-1.0)*pp))+(((-0.09)*x1623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1625 = IKatan2WithCheck((gconst175*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst175*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1625.valid){
continue;
}
j0array[0]=x1625.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1626=IKcos(j0);
IkReal x1627=IKsin(j0);
IkReal x1628=(px*x1627);
IkReal x1629=(px*x1626);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1629);
evalcond[1]=((0.045)+x1628+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1629))+(((-1.0)*pp))+(((-0.09)*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst176;
gconst176=IKsign(px);
IkReal x1630=IKsign(px);
IkReal x1631=(cj3*x1630);
IkReal x1632=((0.045)*x1630);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((0.3)*sj3*x1630))+x1632+(((-0.045)*x1631)))))+(IKabs(((((0.3)*x1631))+((sj3*x1632))+(((0.55)*x1630))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1633=((0.3)*sj3);
IkReal x1634=((0.045)*cj3);
IkReal x1635=((0.045)*sj3);
IkReal x1636=((0.3)*cj3);
IkReal x1637=(x1635+x1636);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x1637)));
evalcond[2]=((-0.045)+x1634+(((-1.0)*x1633)));
evalcond[3]=((0.045)+x1633+(((-1.0)*x1634)));
evalcond[4]=((0.55)+x1637);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1639=IKPowWithIntegerCheck(px,-1);
if(!x1639.valid){
continue;
}
IkReal x1638=x1639.value;
if( IKabs(((0.111111111111111)*x1638*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1638*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1638*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1638*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1638*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1638*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1640=IKsin(j0);
IkReal x1641=IKcos(j0);
IkReal x1642=(px*x1640);
IkReal x1643=(px*x1641);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1643);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1642+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1643))+(((0.09)*x1642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1644 = IKatan2WithCheck((gconst176*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst176*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
j0array[0]=x1644.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1645=IKsin(j0);
IkReal x1646=IKcos(j0);
IkReal x1647=(px*x1645);
IkReal x1648=(px*x1646);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1648);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1647+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1648))+(((0.09)*x1647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1649=((0.045)*sj3);
IkReal x1650=((0.3)*cj3);
IkReal x1651=(cj2*pz);
IkReal x1652=((0.3)*sj3);
IkReal x1653=((0.045)*cj3);
IkReal x1654=(x1650+x1649);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x1654)));
evalcond[2]=((((-1.0)*sj2*x1653))+(((0.045)*sj2))+((sj2*x1652)));
evalcond[3]=((-1.0)*pz*sj2);
evalcond[4]=((0.045)+x1652+x1651+(((-1.0)*x1653)));
evalcond[5]=((0.55)+x1654);
evalcond[6]=((-0.2125)+(((-0.09)*x1651))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1656=IKPowWithIntegerCheck(px,-1);
if(!x1656.valid){
continue;
}
IkReal x1655=x1656.value;
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(sj2,-1);
if(!x1657.valid){
continue;
}
if( IKabs((x1655*(x1657.value)*(((-0.045)+(((0.045)*cj3))+(((-1.0)*cj2*pz))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1655*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1655*(x1657.value)*(((-0.045)+(((0.045)*cj3))+(((-1.0)*cj2*pz))+(((-0.3)*sj3))))))+IKsqr((x1655*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1655*(x1657.value)*(((-0.045)+(((0.045)*cj3))+(((-1.0)*cj2*pz))+(((-0.3)*sj3))))), (x1655*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1658=IKsin(j0);
IkReal x1659=IKcos(j0);
IkReal x1660=(cj2*pz);
IkReal x1661=((0.3)*sj3);
IkReal x1662=((0.045)*cj3);
IkReal x1663=(px*x1658);
IkReal x1664=(px*x1659);
evalcond[0]=(((cj2*x1663))+(((-1.0)*pz*sj2)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1664);
evalcond[2]=((((-1.0)*sj2*x1662))+x1663+(((0.045)*sj2))+((sj2*x1661)));
evalcond[3]=((0.045)+x1661+x1660+((sj2*x1663))+(((-1.0)*x1662)));
evalcond[4]=((-0.2125)+(((-0.09)*x1660))+(((-1.0)*pp))+(((-0.09)*sj2*x1663))+(((1.1)*x1664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1666=IKPowWithIntegerCheck(px,-1);
if(!x1666.valid){
continue;
}
IkReal x1665=x1666.value;
CheckValue<IkReal> x1667=IKPowWithIntegerCheck(cj2,-1);
if(!x1667.valid){
continue;
}
if( IKabs((pz*sj2*x1665*(x1667.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1665*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((pz*sj2*x1665*(x1667.value)))+IKsqr((x1665*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((pz*sj2*x1665*(x1667.value)), (x1665*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1668=IKsin(j0);
IkReal x1669=IKcos(j0);
IkReal x1670=(cj2*pz);
IkReal x1671=((0.3)*sj3);
IkReal x1672=((0.045)*cj3);
IkReal x1673=(px*x1668);
IkReal x1674=(px*x1669);
evalcond[0]=(((cj2*x1673))+(((-1.0)*pz*sj2)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1674);
evalcond[2]=((((-1.0)*sj2*x1672))+x1673+(((0.045)*sj2))+((sj2*x1671)));
evalcond[3]=((0.045)+x1670+x1671+((sj2*x1673))+(((-1.0)*x1672)));
evalcond[4]=((-0.2125)+(((-0.09)*x1670))+(((-0.09)*sj2*x1673))+(((-1.0)*pp))+(((1.1)*x1674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1675=((0.045)*sj2);
CheckValue<IkReal> x1676 = IKatan2WithCheck((gconst174*(((((-0.3)*sj2*sj3))+((cj3*x1675))+(((-1.0)*x1675))))),(gconst174*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1676.valid){
continue;
}
j0array[0]=x1676.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1677=IKsin(j0);
IkReal x1678=IKcos(j0);
IkReal x1679=(cj2*pz);
IkReal x1680=((0.3)*sj3);
IkReal x1681=((0.045)*cj3);
IkReal x1682=(px*x1677);
IkReal x1683=(px*x1678);
evalcond[0]=((((-1.0)*pz*sj2))+((cj2*x1682)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1683);
evalcond[2]=(x1682+(((0.045)*sj2))+(((-1.0)*sj2*x1681))+((sj2*x1680)));
evalcond[3]=((0.045)+(((-1.0)*x1681))+x1679+x1680+((sj2*x1682)));
evalcond[4]=((-0.2125)+(((-0.09)*x1679))+(((1.1)*x1683))+(((-1.0)*pp))+(((-0.09)*sj2*x1682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1684=((0.045)*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x1684))+pz+((cj3*x1684))+(((-0.3)*cj2*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst177;
gconst177=IKsign(px);
IkReal x1685=IKsign(px);
IkReal x1686=((0.3)*x1685);
IkReal x1687=((0.045)*x1685);
dummyeval[0]=px;
dummyeval[1]=((IKabs((((cj3*sj2*x1687))+(((-1.0)*sj2*sj3*x1686))+(((-1.0)*sj2*x1687)))))+(IKabs(((((-0.55)*x1685))+(((-1.0)*cj3*x1686))+(((-1.0)*sj3*x1687))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*pz))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1688=((-0.85)+(((-2.045)*sj3))+(((6.66666666666667)*pz)));
evalcond[0]=IKabs(px);
evalcond[1]=x1688;
evalcond[2]=0;
evalcond[3]=x1688;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1690=IKPowWithIntegerCheck(px,-1);
if(!x1690.valid){
continue;
}
IkReal x1689=x1690.value;
cj0array[0]=((((-0.85)*x1689))+(((6.66666666666667)*pz*x1689))+(((-2.045)*sj3*x1689)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.1)*px*(IKcos(j0))))+(((-1.0)*pp))+(((0.09)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+pz+(((0.3)*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1691=((-0.85)+(((-6.66666666666667)*pz))+(((-2.045)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x1691;
evalcond[2]=0;
evalcond[3]=x1691;
evalcond[4]=((-0.2125)+(((-0.09)*pz))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1693=IKPowWithIntegerCheck(px,-1);
if(!x1693.valid){
continue;
}
IkReal x1692=x1693.value;
cj0array[0]=((((-0.85)*x1692))+(((-6.66666666666667)*pz*x1692))+(((-2.045)*sj3*x1692)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.1)*px*(IKcos(j0))))+(((-0.09)*pz))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst178;
gconst178=IKsign(px);
IkReal x1694=IKsign(px);
IkReal x1695=(cj3*x1694);
IkReal x1696=((0.045)*x1694);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((-1.0)*sj3*x1696))+(((-0.55)*x1694))+(((-0.3)*x1695)))))+(IKabs(((((-1.0)*x1696))+(((-0.3)*sj3*x1694))+(((0.045)*x1695))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1697=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1698=x1590;
evalcond[0]=IKabs(px);
evalcond[1]=x1698;
evalcond[2]=x1697;
evalcond[3]=x1697;
evalcond[4]=x1698;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1700=IKPowWithIntegerCheck(px,-1);
if(!x1700.valid){
continue;
}
IkReal x1699=x1700.value;
if( IKabs((x1699*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1699*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1699*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1699*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1699*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x1699*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1701=IKsin(j0);
IkReal x1702=IKcos(j0);
IkReal x1703=(px*x1701);
IkReal x1704=(px*x1702);
evalcond[0]=((0.045)+x1703+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1704)));
evalcond[2]=((-0.2125)+(((-0.09)*x1703))+(((-1.1)*x1704))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1705 = IKatan2WithCheck((gconst178*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst178*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
j0array[0]=x1705.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1706=IKsin(j0);
IkReal x1707=IKcos(j0);
IkReal x1708=(px*x1706);
IkReal x1709=(px*x1707);
evalcond[0]=((0.045)+x1708+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1709)));
evalcond[2]=((-0.2125)+(((-0.09)*x1708))+(((-1.1)*x1709))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst179;
gconst179=IKsign(px);
IkReal x1710=IKsign(px);
IkReal x1711=(cj3*x1710);
IkReal x1712=((0.045)*x1710);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((-0.55)*x1710))+(((-1.0)*sj3*x1712))+(((-0.3)*x1711)))))+(IKabs(((((-0.045)*x1711))+x1712+(((0.3)*sj3*x1710))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1713=((0.3)*sj3);
IkReal x1714=((0.045)*cj3);
IkReal x1715=x1590;
evalcond[0]=IKabs(px);
evalcond[1]=x1715;
evalcond[2]=((-0.045)+x1714+(((-1.0)*x1713)));
evalcond[3]=((0.045)+x1713+(((-1.0)*x1714)));
evalcond[4]=x1715;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1717=IKPowWithIntegerCheck(px,-1);
if(!x1717.valid){
continue;
}
IkReal x1716=x1717.value;
if( IKabs((x1716*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1716*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1716*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1716*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1716*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x1716*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1718=IKsin(j0);
IkReal x1719=IKcos(j0);
IkReal x1720=(px*x1718);
IkReal x1721=(px*x1719);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1720+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1721)));
evalcond[2]=((-0.2125)+(((0.09)*x1720))+(((-1.0)*pp))+(((-1.1)*x1721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1722 = IKatan2WithCheck((gconst179*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst179*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
j0array[0]=x1722.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1723=IKsin(j0);
IkReal x1724=IKcos(j0);
IkReal x1725=(px*x1723);
IkReal x1726=(px*x1724);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1725+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1726)));
evalcond[2]=((-0.2125)+(((0.09)*x1725))+(((-1.0)*pp))+(((-1.1)*x1726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1727=(cj2*pz);
IkReal x1728=((0.3)*sj3);
IkReal x1729=((0.045)*cj3);
IkReal x1730=x1590;
evalcond[0]=IKabs(px);
evalcond[1]=x1730;
evalcond[2]=((((0.045)*sj2))+((sj2*x1728))+(((-1.0)*sj2*x1729)));
evalcond[3]=(pz*sj2);
evalcond[4]=((0.045)+x1728+(((-1.0)*x1727))+(((-1.0)*x1729)));
evalcond[5]=x1730;
evalcond[6]=((-0.2125)+(((0.09)*x1727))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(px,-1);
if(!x1732.valid){
continue;
}
IkReal x1731=x1732.value;
CheckValue<IkReal> x1733=IKPowWithIntegerCheck(sj2,-1);
if(!x1733.valid){
continue;
}
if( IKabs((x1731*(x1733.value)*(((-0.045)+(((0.045)*cj3))+((cj2*pz))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1731*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1731*(x1733.value)*(((-0.045)+(((0.045)*cj3))+((cj2*pz))+(((-0.3)*sj3))))))+IKsqr((x1731*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1731*(x1733.value)*(((-0.045)+(((0.045)*cj3))+((cj2*pz))+(((-0.3)*sj3))))), (x1731*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1734=IKsin(j0);
IkReal x1735=IKcos(j0);
IkReal x1736=(cj2*pz);
IkReal x1737=((0.3)*sj3);
IkReal x1738=((0.045)*cj3);
IkReal x1739=(px*x1734);
IkReal x1740=(px*x1735);
evalcond[0]=(((cj2*x1739))+((pz*sj2)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1740)));
evalcond[2]=(x1739+(((0.045)*sj2))+(((-1.0)*sj2*x1738))+((sj2*x1737)));
evalcond[3]=((0.045)+x1737+(((-1.0)*x1736))+(((-1.0)*x1738))+((sj2*x1739)));
evalcond[4]=((-0.2125)+(((0.09)*x1736))+(((-0.09)*sj2*x1739))+(((-1.0)*pp))+(((-1.1)*x1740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1742=IKPowWithIntegerCheck(px,-1);
if(!x1742.valid){
continue;
}
IkReal x1741=x1742.value;
CheckValue<IkReal> x1743=IKPowWithIntegerCheck(cj2,-1);
if(!x1743.valid){
continue;
}
if( IKabs(((-1.0)*pz*sj2*x1741*(x1743.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1741*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*pz*sj2*x1741*(x1743.value)))+IKsqr((x1741*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*pz*sj2*x1741*(x1743.value)), (x1741*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1744=IKsin(j0);
IkReal x1745=IKcos(j0);
IkReal x1746=(cj2*pz);
IkReal x1747=((0.3)*sj3);
IkReal x1748=((0.045)*cj3);
IkReal x1749=(px*x1744);
IkReal x1750=(px*x1745);
evalcond[0]=(((cj2*x1749))+((pz*sj2)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1750)));
evalcond[2]=(x1749+(((0.045)*sj2))+(((-1.0)*sj2*x1748))+((sj2*x1747)));
evalcond[3]=((0.045)+x1747+(((-1.0)*x1746))+(((-1.0)*x1748))+((sj2*x1749)));
evalcond[4]=((-0.2125)+(((0.09)*x1746))+(((-1.0)*pp))+(((-1.1)*x1750))+(((-0.09)*sj2*x1749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1751=((0.045)*sj2);
CheckValue<IkReal> x1752 = IKatan2WithCheck((gconst177*(((((-0.3)*sj2*sj3))+((cj3*x1751))+(((-1.0)*x1751))))),(gconst177*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1752.valid){
continue;
}
j0array[0]=x1752.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1753=IKsin(j0);
IkReal x1754=IKcos(j0);
IkReal x1755=(cj2*pz);
IkReal x1756=((0.3)*sj3);
IkReal x1757=((0.045)*cj3);
IkReal x1758=(px*x1753);
IkReal x1759=(px*x1754);
evalcond[0]=(((cj2*x1758))+((pz*sj2)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1759)));
evalcond[2]=(x1758+(((0.045)*sj2))+(((-1.0)*sj2*x1757))+((sj2*x1756)));
evalcond[3]=((0.045)+x1756+(((-1.0)*x1757))+(((-1.0)*x1755))+((sj2*x1758)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1758))+(((-1.0)*pp))+(((-1.1)*x1759))+(((0.09)*x1755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1760=((0.045)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj3*x1760))+x1760+(((-0.045)*cj1*sj3))+(((-0.55)*cj1))+(((0.3)*sj1*sj3))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((12.2222222222222)*px*sj1))+((cj1*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1761=(cj1*pz);
IkReal x1762=(pz*sj1);
IkReal x1763=((0.045)*cj1);
IkReal x1764=((0.3)*sj3);
IkReal x1765=((0.3)*cj3);
IkReal x1766=((0.045)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x1766))+(((-1.0)*x1765))+x1761);
evalcond[2]=0;
evalcond[3]=((0.045)+x1762+x1764+(((-0.045)*cj3)));
evalcond[4]=((((-1.0)*cj3*x1763))+((sj1*x1765))+((sj1*x1766))+x1763+(((0.55)*sj1))+((cj1*x1764)));
evalcond[5]=((-0.2125)+(((-0.09)*x1762))+(((-1.0)*pp))+(((1.1)*x1761)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(cj1,-1);
if(!x1770.valid){
continue;
}
IkReal x1767=x1770.value;
CheckValue<IkReal> x1771=IKPowWithIntegerCheck(px,-1);
if(!x1771.valid){
continue;
}
IkReal x1768=x1771.value;
IkReal x1769=(x1767*x1768);
cj0array[0]=((((0.045)*x1769))+(((0.3)*sj3*x1769))+(((-0.045)*cj3*x1769))+((pz*sj1*x1769)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1772=IKcos(j0);
IkReal x1773=(cj1*pz);
IkReal x1774=((0.045)*cj1);
IkReal x1775=((0.3)*cj3);
IkReal x1776=((0.045)*sj3);
IkReal x1777=(px*x1772);
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.55)+x1773+(((-1.0)*x1776))+(((-1.0)*x1775))+((sj1*x1777)));
evalcond[2]=((-0.2125)+(((0.09)*cj1*x1777))+(((-0.09)*pz*sj1))+(((1.1)*x1773))+(((-1.0)*pp))+(((1.1)*sj1*x1777)));
evalcond[3]=((((-1.0)*cj3*x1774))+(((-1.0)*x1777))+x1774+(((0.3)*cj1*sj3))+(((0.55)*sj1))+((sj1*x1776))+((sj1*x1775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1781=IKPowWithIntegerCheck(px,-1);
if(!x1781.valid){
continue;
}
IkReal x1778=x1781.value;
IkReal x1779=(cj1*x1778);
IkReal x1780=(sj1*x1778);
cj0array[0]=((((0.3)*cj3*x1780))+(((0.045)*sj3*x1780))+(((0.55)*x1780))+(((0.045)*x1779))+(((0.3)*sj3*x1779))+(((-0.045)*cj3*x1779)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1782=IKcos(j0);
IkReal x1783=(cj1*pz);
IkReal x1784=(pz*sj1);
IkReal x1785=(px*sj1*x1782);
IkReal x1786=(cj1*px*x1782);
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+x1783+x1785+(((-0.3)*cj3)));
evalcond[2]=((0.045)+x1784+(((-0.045)*cj3))+(((-1.0)*x1786))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((0.09)*x1786))+(((-1.0)*pp))+(((-0.09)*x1784))+(((1.1)*x1783))+(((1.1)*x1785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1789=IKPowWithIntegerCheck(((((1.1)*px*sj1))+(((0.09)*cj1*px))),-1);
if(!x1789.valid){
continue;
}
IkReal x1787=x1789.value;
IkReal x1788=(pz*x1787);
cj0array[0]=((((-1.1)*cj1*x1788))+(((0.2125)*x1787))+(((0.09)*sj1*x1788))+((pp*x1787)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1790=IKcos(j0);
IkReal x1791=((0.045)*cj1);
IkReal x1792=((0.3)*sj3);
IkReal x1793=((0.045)*sj3);
IkReal x1794=((0.3)*cj3);
IkReal x1795=(px*x1790);
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.55)+(((-1.0)*x1793))+(((-1.0)*x1794))+((sj1*x1795))+((cj1*pz)));
evalcond[2]=((0.045)+x1792+(((-1.0)*cj1*x1795))+(((-0.045)*cj3))+((pz*sj1)));
evalcond[3]=(x1791+((sj1*x1794))+((sj1*x1793))+((cj1*x1792))+(((-1.0)*cj3*x1791))+(((-1.0)*x1795))+(((0.55)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1796=((0.045)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-0.3)*sj1*sj3))+(((-1.0)*x1796))+(((-0.045)*cj1*sj3))+(((-0.55)*cj1))+((cj3*x1796))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((12.2222222222222)*px*sj1))+(((-1.0)*cj1*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1797=(cj1*pz);
IkReal x1798=(pz*sj1);
IkReal x1799=((0.045)*cj1);
IkReal x1800=((0.3)*sj3);
IkReal x1801=((0.3)*cj3);
IkReal x1802=((0.045)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+x1797+(((-1.0)*x1801))+(((-1.0)*x1802)));
evalcond[2]=0;
evalcond[3]=((0.045)+(((-0.045)*cj3))+x1800+(((-1.0)*x1798)));
evalcond[4]=((((-1.0)*x1799))+((sj1*x1801))+((sj1*x1802))+((cj3*x1799))+(((0.55)*sj1))+(((-1.0)*cj1*x1800)));
evalcond[5]=((-0.2125)+(((0.09)*x1798))+(((-1.0)*pp))+(((1.1)*x1797)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1806=IKPowWithIntegerCheck(cj1,-1);
if(!x1806.valid){
continue;
}
IkReal x1803=x1806.value;
CheckValue<IkReal> x1807=IKPowWithIntegerCheck(px,-1);
if(!x1807.valid){
continue;
}
IkReal x1804=x1807.value;
IkReal x1805=(x1803*x1804);
cj0array[0]=((((-0.3)*sj3*x1805))+((pz*sj1*x1805))+(((0.045)*cj3*x1805))+(((-0.045)*x1805)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1808=IKcos(j0);
IkReal x1809=(cj1*pz);
IkReal x1810=((0.045)*cj1);
IkReal x1811=((0.3)*cj3);
IkReal x1812=((0.045)*sj3);
IkReal x1813=(px*x1808);
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.55)+(((-1.0)*x1812))+(((-1.0)*x1811))+((sj1*x1813))+x1809);
evalcond[2]=((-0.2125)+(((0.09)*pz*sj1))+(((1.1)*sj1*x1813))+(((-0.09)*cj1*x1813))+(((-1.0)*pp))+(((1.1)*x1809)));
evalcond[3]=((((-1.0)*x1810))+((cj3*x1810))+((sj1*x1812))+((sj1*x1811))+(((0.55)*sj1))+(((-1.0)*x1813))+(((-0.3)*cj1*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1817=IKPowWithIntegerCheck(px,-1);
if(!x1817.valid){
continue;
}
IkReal x1814=x1817.value;
IkReal x1815=(sj1*x1814);
IkReal x1816=(cj1*x1814);
cj0array[0]=((((0.3)*cj3*x1815))+(((0.045)*cj3*x1816))+(((0.045)*sj3*x1815))+(((0.55)*x1815))+(((-0.3)*sj3*x1816))+(((-0.045)*x1816)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1818=IKcos(j0);
IkReal x1819=(cj1*pz);
IkReal x1820=(pz*sj1);
IkReal x1821=(px*sj1*x1818);
IkReal x1822=(cj1*px*x1818);
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1821+x1819);
evalcond[2]=((0.045)+(((-1.0)*x1820))+(((-0.045)*cj3))+x1822+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((0.09)*x1820))+(((1.1)*x1819))+(((-1.0)*pp))+(((1.1)*x1821))+(((-0.09)*x1822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1825=IKPowWithIntegerCheck(((((1.1)*px*sj1))+(((-0.09)*cj1*px))),-1);
if(!x1825.valid){
continue;
}
IkReal x1823=x1825.value;
IkReal x1824=(pz*x1823);
cj0array[0]=((((-0.09)*sj1*x1824))+((pp*x1823))+(((-1.1)*cj1*x1824))+(((0.2125)*x1823)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1826=IKcos(j0);
IkReal x1827=((0.045)*cj1);
IkReal x1828=((0.3)*sj3);
IkReal x1829=((0.3)*cj3);
IkReal x1830=((0.045)*sj3);
IkReal x1831=(px*x1826);
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.55)+(((-1.0)*x1829))+((sj1*x1831))+(((-1.0)*x1830))+((cj1*pz)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+x1828+(((-1.0)*pz*sj1))+((cj1*x1831)));
evalcond[3]=((((-1.0)*x1827))+(((-1.0)*x1831))+((sj1*x1830))+((cj3*x1827))+((sj1*x1829))+(((0.55)*sj1))+(((-1.0)*cj1*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1832=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=x1832;
evalcond[2]=x1832;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst180;
gconst180=IKsign((((px*(sj2*sj2)))+((px*(cj2*cj2)))));
dummyeval[0]=(((px*(sj2*sj2)))+((px*(cj2*cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1833=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x1833;
evalcond[2]=0;
evalcond[3]=x1833;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1835=IKPowWithIntegerCheck(px,-1);
if(!x1835.valid){
continue;
}
IkReal x1834=x1835.value;
sj0array[0]=((((-0.1275)*x1834))+(((-0.30675)*sj3*x1834))+(((0.15)*pz*x1834)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1836=((0.30675)*sj3);
IkReal x1837=((0.15)*pz);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+(((-1.0)*x1836))+x1837);
evalcond[2]=0;
evalcond[3]=((0.1275)+(((-1.0)*x1837))+x1836);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1839=IKPowWithIntegerCheck(px,-1);
if(!x1839.valid){
continue;
}
IkReal x1838=x1839.value;
sj0array[0]=((((0.30675)*sj3*x1838))+(((0.1275)*x1838))+(((-0.15)*pz*x1838)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1840=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x1840;
evalcond[3]=x1840;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1842=IKPowWithIntegerCheck(px,-1);
if(!x1842.valid){
continue;
}
IkReal x1841=x1842.value;
cj0array[0]=((((-0.15)*pz*x1841))+(((0.30675)*sj3*x1841))+(((0.1275)*x1841)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1843=((0.15)*pz);
IkReal x1844=((0.30675)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.1275)+(((-1.0)*x1843))+x1844);
evalcond[3]=((-0.1275)+(((-1.0)*x1844))+x1843);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(px,-1);
if(!x1846.valid){
continue;
}
IkReal x1845=x1846.value;
cj0array[0]=((((-0.1275)*x1845))+(((-0.30675)*sj3*x1845))+(((0.15)*pz*x1845)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1847=((0.15)*pz);
IkReal x1848=((0.30675)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=((((-1.0)*sj2*x1847))+((sj2*x1848))+(((0.1275)*sj2)));
evalcond[2]=0;
evalcond[3]=((0.1275)+(((-1.0)*x1847))+x1848);
evalcond[4]=(((cj2*x1848))+(((-1.0)*cj2*x1847))+(((0.1275)*cj2)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1853=IKPowWithIntegerCheck(px,-1);
if(!x1853.valid){
continue;
}
IkReal x1849=x1853.value;
IkReal x1850=(cj2*sj2);
IkReal x1851=((0.15)*pz);
IkReal x1852=((0.30675)*sj3);
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(cj2,-1);
if(!x1854.valid){
continue;
}
if( IKabs((x1849*(x1854.value)*((((x1850*x1851))+(((-1.0)*x1850*x1852))+(((-0.1275)*x1850)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1849*(((((-1.0)*cj2*x1851))+((cj2*x1852))+(((0.1275)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1849*(x1854.value)*((((x1850*x1851))+(((-1.0)*x1850*x1852))+(((-0.1275)*x1850))))))+IKsqr((x1849*(((((-1.0)*cj2*x1851))+((cj2*x1852))+(((0.1275)*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1849*(x1854.value)*((((x1850*x1851))+(((-1.0)*x1850*x1852))+(((-0.1275)*x1850))))), (x1849*(((((-1.0)*cj2*x1851))+((cj2*x1852))+(((0.1275)*cj2))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1855=IKsin(j0);
IkReal x1856=IKcos(j0);
IkReal x1857=((0.15)*pz);
IkReal x1858=((0.30675)*sj3);
IkReal x1859=(px*x1855);
IkReal x1860=(px*x1856);
evalcond[0]=(((cj2*x1859))+((sj2*x1860)));
evalcond[1]=((((0.1275)*sj2))+x1859+((sj2*x1858))+(((-1.0)*sj2*x1857)));
evalcond[2]=((((-1.0)*cj2*x1857))+((cj2*x1858))+(((0.1275)*cj2))+(((-1.0)*x1860)));
evalcond[3]=((0.1275)+(((-1.0)*cj2*x1860))+x1858+((sj2*x1859))+(((-1.0)*x1857)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1859))+(((0.09)*cj2*x1860))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1865=IKPowWithIntegerCheck(px,-1);
if(!x1865.valid){
continue;
}
IkReal x1861=x1865.value;
IkReal x1862=((0.1275)*sj2);
IkReal x1863=((0.15)*pz*sj2);
IkReal x1864=((0.30675)*sj2*sj3);
CheckValue<IkReal> x1866=IKPowWithIntegerCheck(sj2,-1);
if(!x1866.valid){
continue;
}
if( IKabs((x1861*((x1863+(((-1.0)*x1864))+(((-1.0)*x1862)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1861*(x1866.value)*(((((-1.0)*cj2*x1863))+((cj2*x1864))+((cj2*x1862)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1861*((x1863+(((-1.0)*x1864))+(((-1.0)*x1862))))))+IKsqr((x1861*(x1866.value)*(((((-1.0)*cj2*x1863))+((cj2*x1864))+((cj2*x1862))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1861*((x1863+(((-1.0)*x1864))+(((-1.0)*x1862))))), (x1861*(x1866.value)*(((((-1.0)*cj2*x1863))+((cj2*x1864))+((cj2*x1862))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1867=IKsin(j0);
IkReal x1868=IKcos(j0);
IkReal x1869=((0.15)*pz);
IkReal x1870=((0.30675)*sj3);
IkReal x1871=(px*x1867);
IkReal x1872=(px*x1868);
evalcond[0]=(((sj2*x1872))+((cj2*x1871)));
evalcond[1]=(((sj2*x1870))+(((0.1275)*sj2))+x1871+(((-1.0)*sj2*x1869)));
evalcond[2]=(((cj2*x1870))+(((0.1275)*cj2))+(((-1.0)*cj2*x1869))+(((-1.0)*x1872)));
evalcond[3]=((0.1275)+((sj2*x1871))+x1870+(((-1.0)*cj2*x1872))+(((-1.0)*x1869)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1871))+(((0.09)*cj2*x1872))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1873=((0.15)*pz);
IkReal x1874=((0.30675)*sj3);
CheckValue<IkReal> x1875 = IKatan2WithCheck((gconst180*(((((-0.1275)*sj2))+((sj2*x1873))+(((-1.0)*sj2*x1874))))),(gconst180*(((((-1.0)*cj2*x1873))+((cj2*x1874))+(((0.1275)*cj2))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1875.valid){
continue;
}
j0array[0]=x1875.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1876=IKsin(j0);
IkReal x1877=IKcos(j0);
IkReal x1878=((0.15)*pz);
IkReal x1879=((0.30675)*sj3);
IkReal x1880=(px*x1876);
IkReal x1881=(px*x1877);
evalcond[0]=(((sj2*x1881))+((cj2*x1880)));
evalcond[1]=(((sj2*x1879))+(((-1.0)*sj2*x1878))+(((0.1275)*sj2))+x1880);
evalcond[2]=((((-1.0)*cj2*x1878))+((cj2*x1879))+(((0.1275)*cj2))+(((-1.0)*x1881)));
evalcond[3]=((0.1275)+((sj2*x1880))+(((-1.0)*x1878))+(((-1.0)*cj2*x1881))+x1879);
evalcond[4]=((-0.2125)+(((0.09)*cj2*x1881))+(((-1.0)*pp))+(((-0.09)*sj2*x1880))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1882=((0.045)*sj3);
IkReal x1883=((0.3)*cj3);
IkReal x1884=(x1883+x1882);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1884)));
evalcond[2]=((0.55)+pz+x1884);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst181;
gconst181=IKsign((((px*(sj2*sj2)))+((px*(cj2*cj2)))));
dummyeval[0]=(((px*(sj2*sj2)))+((px*(cj2*cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1885=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x1885;
evalcond[2]=0;
evalcond[3]=x1885;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1887=IKPowWithIntegerCheck(px,-1);
if(!x1887.valid){
continue;
}
IkReal x1886=x1887.value;
sj0array[0]=((((-0.30675)*sj3*x1886))+(((-0.15)*pz*x1886))+(((-0.1275)*x1886)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1888=((0.15)*pz);
IkReal x1889=((0.30675)*sj3);
IkReal x1890=(x1889+x1888);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+(((-1.0)*x1890)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x1890);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1892=IKPowWithIntegerCheck(px,-1);
if(!x1892.valid){
continue;
}
IkReal x1891=x1892.value;
sj0array[0]=((((0.1275)*x1891))+(((0.15)*pz*x1891))+(((0.30675)*sj3*x1891)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1893=((0.15)*pz);
IkReal x1894=((0.30675)*sj3);
IkReal x1895=(x1894+x1893);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.1275)+x1895);
evalcond[3]=((-0.1275)+(((-1.0)*x1895)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1897=IKPowWithIntegerCheck(px,-1);
if(!x1897.valid){
continue;
}
IkReal x1896=x1897.value;
cj0array[0]=((((-0.15)*pz*x1896))+(((-0.1275)*x1896))+(((-0.30675)*sj3*x1896)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1898=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x1898;
evalcond[3]=x1898;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1900=IKPowWithIntegerCheck(px,-1);
if(!x1900.valid){
continue;
}
IkReal x1899=x1900.value;
cj0array[0]=((((0.1275)*x1899))+(((0.15)*pz*x1899))+(((0.30675)*sj3*x1899)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1901=((0.15)*pz);
IkReal x1902=((0.30675)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=((((0.1275)*sj2))+((sj2*x1901))+((sj2*x1902)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x1902+x1901);
evalcond[4]=((((-1.0)*cj2*x1902))+(((-1.0)*cj2*x1901))+(((-0.1275)*cj2)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(px,-1);
if(!x1907.valid){
continue;
}
IkReal x1903=x1907.value;
IkReal x1904=(cj2*sj2);
IkReal x1905=((0.15)*pz);
IkReal x1906=((0.30675)*sj3);
CheckValue<IkReal> x1908=IKPowWithIntegerCheck(cj2,-1);
if(!x1908.valid){
continue;
}
if( IKabs((x1903*(x1908.value)*(((((-1.0)*x1904*x1906))+(((-1.0)*x1904*x1905))+(((-0.1275)*x1904)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1903*(((((-1.0)*cj2*x1906))+(((-1.0)*cj2*x1905))+(((-0.1275)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1903*(x1908.value)*(((((-1.0)*x1904*x1906))+(((-1.0)*x1904*x1905))+(((-0.1275)*x1904))))))+IKsqr((x1903*(((((-1.0)*cj2*x1906))+(((-1.0)*cj2*x1905))+(((-0.1275)*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1903*(x1908.value)*(((((-1.0)*x1904*x1906))+(((-1.0)*x1904*x1905))+(((-0.1275)*x1904))))), (x1903*(((((-1.0)*cj2*x1906))+(((-1.0)*cj2*x1905))+(((-0.1275)*cj2))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1909=IKsin(j0);
IkReal x1910=IKcos(j0);
IkReal x1911=((0.15)*pz);
IkReal x1912=((0.30675)*sj3);
IkReal x1913=(px*x1909);
IkReal x1914=(px*x1910);
evalcond[0]=(((cj2*x1913))+(((-1.0)*sj2*x1914)));
evalcond[1]=(x1913+(((0.1275)*sj2))+((sj2*x1911))+((sj2*x1912)));
evalcond[2]=((((-1.0)*x1914))+(((-1.0)*cj2*x1911))+(((-1.0)*cj2*x1912))+(((-0.1275)*cj2)));
evalcond[3]=((0.1275)+((cj2*x1914))+x1911+x1912+((sj2*x1913)));
evalcond[4]=((-0.2125)+(((-0.09)*cj2*x1914))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*sj2*x1913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(px,-1);
if(!x1919.valid){
continue;
}
IkReal x1915=x1919.value;
IkReal x1916=((0.1275)*sj2);
IkReal x1917=((0.15)*pz*sj2);
IkReal x1918=((0.30675)*sj2*sj3);
CheckValue<IkReal> x1920=IKPowWithIntegerCheck(sj2,-1);
if(!x1920.valid){
continue;
}
if( IKabs((x1915*(((((-1.0)*x1916))+(((-1.0)*x1917))+(((-1.0)*x1918)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1915*(x1920.value)*(((((-1.0)*cj2*x1918))+(((-1.0)*cj2*x1916))+(((-1.0)*cj2*x1917)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1915*(((((-1.0)*x1916))+(((-1.0)*x1917))+(((-1.0)*x1918))))))+IKsqr((x1915*(x1920.value)*(((((-1.0)*cj2*x1918))+(((-1.0)*cj2*x1916))+(((-1.0)*cj2*x1917))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1915*(((((-1.0)*x1916))+(((-1.0)*x1917))+(((-1.0)*x1918))))), (x1915*(x1920.value)*(((((-1.0)*cj2*x1918))+(((-1.0)*cj2*x1916))+(((-1.0)*cj2*x1917))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1921=IKsin(j0);
IkReal x1922=IKcos(j0);
IkReal x1923=((0.15)*pz);
IkReal x1924=((0.30675)*sj3);
IkReal x1925=(px*x1921);
IkReal x1926=(px*x1922);
evalcond[0]=(((cj2*x1925))+(((-1.0)*sj2*x1926)));
evalcond[1]=(((sj2*x1924))+((sj2*x1923))+x1925+(((0.1275)*sj2)));
evalcond[2]=((((-1.0)*x1926))+(((-1.0)*cj2*x1923))+(((-1.0)*cj2*x1924))+(((-0.1275)*cj2)));
evalcond[3]=((0.1275)+((sj2*x1925))+((cj2*x1926))+x1923+x1924);
evalcond[4]=((-0.2125)+(((-0.09)*cj2*x1926))+(((-0.09)*sj2*x1925))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1927=((0.15)*pz);
IkReal x1928=((0.30675)*sj3);
CheckValue<IkReal> x1929 = IKatan2WithCheck((gconst181*(((((-0.1275)*sj2))+(((-1.0)*sj2*x1927))+(((-1.0)*sj2*x1928))))),(gconst181*(((((-1.0)*cj2*x1927))+(((-1.0)*cj2*x1928))+(((-0.1275)*cj2))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1929.valid){
continue;
}
j0array[0]=x1929.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1930=IKsin(j0);
IkReal x1931=IKcos(j0);
IkReal x1932=((0.15)*pz);
IkReal x1933=((0.30675)*sj3);
IkReal x1934=(px*x1930);
IkReal x1935=(px*x1931);
evalcond[0]=(((cj2*x1934))+(((-1.0)*sj2*x1935)));
evalcond[1]=(((sj2*x1932))+((sj2*x1933))+x1934+(((0.1275)*sj2)));
evalcond[2]=((((-1.0)*x1935))+(((-1.0)*cj2*x1932))+(((-1.0)*cj2*x1933))+(((-0.1275)*cj2)));
evalcond[3]=((0.1275)+((sj2*x1934))+((cj2*x1935))+x1933+x1932);
evalcond[4]=((-0.2125)+(((-0.09)*cj2*x1935))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*sj2*x1934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1936=((0.3)*sj3);
IkReal x1937=((0.045)*cj3);
IkReal x1938=((0.045)*cj2);
IkReal x1939=((0.3)*cj3);
IkReal x1940=((0.045)*sj3);
IkReal x1941=(pz*sj1);
IkReal x1942=(cj2*sj1);
IkReal x1943=(cj1*cj2);
IkReal x1944=(cj1*pz);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x1940))+x1944+(((-1.0)*x1939)));
evalcond[2]=(((sj2*x1936))+(((-1.0)*sj2*x1937))+(((0.045)*sj2)));
evalcond[3]=((-1.0)*sj2*x1941);
evalcond[4]=((((-1.0)*x1937*x1942))+(((-0.55)*cj1))+(((-1.0)*cj1*x1939))+((x1936*x1942))+((sj1*x1938))+pz+(((-1.0)*cj1*x1940)));
evalcond[5]=((0.045)+((cj2*x1941))+x1936+(((-1.0)*x1937)));
evalcond[6]=((((-1.0)*x1937*x1943))+((cj1*x1938))+((x1936*x1943))+((sj1*x1940))+((sj1*x1939))+(((0.55)*sj1)));
evalcond[7]=((-0.2125)+(((-0.09)*cj2*x1941))+(((1.1)*x1944))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1945=((0.045)+(((-0.045)*cj3))+pz+(((0.3)*sj3)));
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=x1945;
evalcond[2]=x1945;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1946=((2.045)*sj3);
IkReal x1947=((6.66666666666667)*pz);
IkReal x1948=(x1946+x1947);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.85)+(((-1.0)*x1948)));
evalcond[2]=0;
evalcond[3]=((0.85)+x1948);
evalcond[4]=((-0.2125)+(((-0.09)*pz))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(px,-1);
if(!x1950.valid){
continue;
}
IkReal x1949=x1950.value;
cj0array[0]=((((0.85)*x1949))+(((2.045)*sj3*x1949))+(((6.66666666666667)*pz*x1949)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*pz))+(((-1.0)*pp))+(((1.1)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1951=((0.3)*sj3);
IkReal x1952=((0.045)*cj3);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((-0.045)+(((-1.0)*x1951))+x1952+pz);
evalcond[2]=((0.045)+(((-1.0)*x1952))+(((-1.0)*pz))+x1951);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1953=((-0.85)+(((-2.045)*sj3))+(((6.66666666666667)*pz)));
evalcond[0]=IKabs(px);
evalcond[1]=x1953;
evalcond[2]=0;
evalcond[3]=x1953;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1955=IKPowWithIntegerCheck(px,-1);
if(!x1955.valid){
continue;
}
IkReal x1954=x1955.value;
cj0array[0]=((((-0.85)*x1954))+(((6.66666666666667)*pz*x1954))+(((-2.045)*sj3*x1954)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.1)*px*(IKcos(j0))))+(((-1.0)*pp))+(((0.09)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst182;
gconst182=IKsign(px);
IkReal x1956=IKsign(px);
IkReal x1957=(cj3*x1956);
IkReal x1958=((0.045)*x1956);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((0.045)*x1957))+(((-1.0)*x1958))+(((-0.3)*sj3*x1956)))))+(IKabs(((((0.55)*x1956))+((sj3*x1958))+(((0.3)*x1957))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1959=((0.045)*sj3);
IkReal x1960=((0.3)*cj3);
IkReal x1961=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1962=(x1960+x1959);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x1962)));
evalcond[2]=x1961;
evalcond[3]=x1961;
evalcond[4]=((0.55)+x1962);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(px,-1);
if(!x1964.valid){
continue;
}
IkReal x1963=x1964.value;
if( IKabs(((0.111111111111111)*x1963*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1963*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1963*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1963*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1963*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1963*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1965=IKcos(j0);
IkReal x1966=IKsin(j0);
IkReal x1967=(px*x1966);
IkReal x1968=(px*x1965);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1968);
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1967+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1968))+(((-1.0)*pp))+(((-0.09)*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1969 = IKatan2WithCheck((gconst182*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst182*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1969.valid){
continue;
}
j0array[0]=x1969.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1970=IKcos(j0);
IkReal x1971=IKsin(j0);
IkReal x1972=(px*x1971);
IkReal x1973=(px*x1970);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1973);
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1972+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1973))+(((-1.0)*pp))+(((-0.09)*x1972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst183;
gconst183=IKsign(px);
IkReal x1974=IKsign(px);
IkReal x1975=(cj3*x1974);
IkReal x1976=((0.045)*x1974);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((-1.0)*sj3*x1976))+(((-0.55)*x1974))+(((-0.3)*x1975)))))+(IKabs(((((-1.0)*x1976))+(((-0.3)*sj3*x1974))+(((0.045)*x1975))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1977=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1978=x1590;
evalcond[0]=IKabs(px);
evalcond[1]=x1978;
evalcond[2]=x1977;
evalcond[3]=x1977;
evalcond[4]=x1978;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(px,-1);
if(!x1980.valid){
continue;
}
IkReal x1979=x1980.value;
if( IKabs((x1979*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1979*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1979*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1979*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1979*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x1979*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1981=IKsin(j0);
IkReal x1982=IKcos(j0);
IkReal x1983=(px*x1981);
IkReal x1984=(px*x1982);
evalcond[0]=((0.045)+(((-0.045)*cj3))+x1983+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1984)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*x1984))+(((-0.09)*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1985 = IKatan2WithCheck((gconst183*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst183*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1985.valid){
continue;
}
j0array[0]=x1985.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1986=IKsin(j0);
IkReal x1987=IKcos(j0);
IkReal x1988=(px*x1986);
IkReal x1989=(px*x1987);
evalcond[0]=((0.045)+(((-0.045)*cj3))+x1988+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1989)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*x1989))+(((-0.09)*x1988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1990=((0.3)*sj3);
IkReal x1991=((0.045)*cj3);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((-0.045)+x1991+(((-1.0)*x1990))+pz);
evalcond[2]=((0.045)+(((-1.0)*pz))+x1990+(((-1.0)*x1991)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1992=((2.045)*sj3);
IkReal x1993=((6.66666666666667)*pz);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.85)+x1993+(((-1.0)*x1992)));
evalcond[2]=0;
evalcond[3]=((0.85)+x1992+(((-1.0)*x1993)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1995=IKPowWithIntegerCheck(px,-1);
if(!x1995.valid){
continue;
}
IkReal x1994=x1995.value;
cj0array[0]=((((0.85)*x1994))+(((-6.66666666666667)*pz*x1994))+(((2.045)*sj3*x1994)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*px*(IKcos(j0))))+(((0.09)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1996=((0.045)+(((-0.045)*cj3))+pz+(((0.3)*sj3)));
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=x1996;
evalcond[2]=x1996;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1997=((-0.85)+(((-6.66666666666667)*pz))+(((-2.045)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x1997;
evalcond[2]=0;
evalcond[3]=x1997;
evalcond[4]=((-0.2125)+(((-0.09)*pz))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1999=IKPowWithIntegerCheck(px,-1);
if(!x1999.valid){
continue;
}
IkReal x1998=x1999.value;
cj0array[0]=((((-2.045)*sj3*x1998))+(((-0.85)*x1998))+(((-6.66666666666667)*pz*x1998)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.1)*px*(IKcos(j0))))+(((-0.09)*pz))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst184;
gconst184=IKsign(px);
IkReal x2000=IKsign(px);
IkReal x2001=(cj3*x2000);
IkReal x2002=((0.045)*x2000);
dummyeval[0]=px;
dummyeval[1]=((IKabs((x2002+(((-0.045)*x2001))+(((0.3)*sj3*x2000)))))+(IKabs(((((0.55)*x2000))+((sj3*x2002))+(((0.3)*x2001))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x2003=((0.3)*sj3);
IkReal x2004=((0.045)*cj3);
IkReal x2005=((0.045)*sj3);
IkReal x2006=((0.3)*cj3);
IkReal x2007=(x2006+x2005);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x2007)));
evalcond[2]=((-0.045)+x2004+(((-1.0)*x2003)));
evalcond[3]=((0.045)+x2003+(((-1.0)*x2004)));
evalcond[4]=((0.55)+x2007);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2009=IKPowWithIntegerCheck(px,-1);
if(!x2009.valid){
continue;
}
IkReal x2008=x2009.value;
if( IKabs(((0.111111111111111)*x2008*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2008*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2008*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x2008*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x2008*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x2008*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2010=IKsin(j0);
IkReal x2011=IKcos(j0);
IkReal x2012=(px*x2010);
IkReal x2013=(px*x2011);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x2013);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x2012+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2013))+(((-1.0)*pp))+(((0.09)*x2012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2014 = IKatan2WithCheck((gconst184*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst184*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
j0array[0]=x2014.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2015=IKsin(j0);
IkReal x2016=IKcos(j0);
IkReal x2017=(px*x2015);
IkReal x2018=(px*x2016);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x2018);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x2017+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2018))+(((-1.0)*pp))+(((0.09)*x2017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst185;
gconst185=IKsign(px);
IkReal x2019=IKsign(px);
IkReal x2020=(cj3*x2019);
IkReal x2021=((0.045)*x2019);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((-0.045)*x2020))+x2021+(((0.3)*sj3*x2019)))))+(IKabs(((((-0.3)*x2020))+(((-1.0)*sj3*x2021))+(((-0.55)*x2019))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x2022=((0.3)*sj3);
IkReal x2023=((0.045)*cj3);
IkReal x2024=x1590;
evalcond[0]=IKabs(px);
evalcond[1]=x2024;
evalcond[2]=((-0.045)+x2023+(((-1.0)*x2022)));
evalcond[3]=((0.045)+x2022+(((-1.0)*x2023)));
evalcond[4]=x2024;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2026=IKPowWithIntegerCheck(px,-1);
if(!x2026.valid){
continue;
}
IkReal x2025=x2026.value;
if( IKabs((x2025*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2025*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2025*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2025*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x2025*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x2025*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2027=IKsin(j0);
IkReal x2028=IKcos(j0);
IkReal x2029=(px*x2027);
IkReal x2030=(px*x2028);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x2029+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x2030)));
evalcond[2]=((-0.2125)+(((0.09)*x2029))+(((-1.0)*pp))+(((-1.1)*x2030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2031 = IKatan2WithCheck((gconst185*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst185*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
j0array[0]=x2031.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2032=IKsin(j0);
IkReal x2033=IKcos(j0);
IkReal x2034=(px*x2032);
IkReal x2035=(px*x2033);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x2034+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x2035)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2034))+(((-1.1)*x2035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2040=IKPowWithIntegerCheck(px,-1);
if(!x2040.valid){
continue;
}
IkReal x2036=x2040.value;
IkReal x2037=((0.045)*sj2);
IkReal x2038=((0.3)*sj2*sj3);
IkReal x2039=(cj3*x2037);
CheckValue<IkReal> x2041=IKPowWithIntegerCheck(cj1,-1);
if(!x2041.valid){
continue;
}
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(sj2,-1);
if(!x2042.valid){
continue;
}
if( IKabs((x2036*((x2039+(((-1.0)*x2037))+(((-1.0)*x2038)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2036*(x2041.value)*(x2042.value)*((((pz*sj1*sj2))+((cj2*x2037))+((cj2*x2038))+(((-1.0)*cj2*x2039)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2036*((x2039+(((-1.0)*x2037))+(((-1.0)*x2038))))))+IKsqr((x2036*(x2041.value)*(x2042.value)*((((pz*sj1*sj2))+((cj2*x2037))+((cj2*x2038))+(((-1.0)*cj2*x2039))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x2036*((x2039+(((-1.0)*x2037))+(((-1.0)*x2038))))), (x2036*(x2041.value)*(x2042.value)*((((pz*sj1*sj2))+((cj2*x2037))+((cj2*x2038))+(((-1.0)*cj2*x2039))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2043=IKcos(j0);
IkReal x2044=IKsin(j0);
IkReal x2045=((0.3)*sj3);
IkReal x2046=((0.045)*cj3);
IkReal x2047=((0.3)*cj3);
IkReal x2048=(cj1*cj2);
IkReal x2049=((0.045)*sj3);
IkReal x2050=(cj1*pz);
IkReal x2051=(px*x2044);
IkReal x2052=(px*x2043);
IkReal x2053=(cj2*pz*sj1);
evalcond[0]=((-0.55)+(((-1.0)*x2049))+(((-1.0)*x2047))+x2050+((sj1*x2052)));
evalcond[1]=(x2051+(((-1.0)*sj2*x2046))+(((0.045)*sj2))+((sj2*x2045)));
evalcond[2]=(((cj1*sj2*x2052))+(((-1.0)*pz*sj1*sj2))+((cj2*x2051)));
evalcond[3]=((0.045)+(((-1.0)*x2046))+(((-1.0)*x2048*x2052))+x2045+x2053+((sj2*x2051)));
evalcond[4]=((((0.045)*x2048))+(((-1.0)*x2052))+((x2045*x2048))+(((0.55)*sj1))+((sj1*x2049))+((sj1*x2047))+(((-1.0)*x2046*x2048)));
evalcond[5]=((-0.2125)+(((1.1)*sj1*x2052))+(((0.09)*x2048*x2052))+(((-0.09)*sj2*x2051))+(((1.1)*x2050))+(((-0.09)*x2053))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2056=IKPowWithIntegerCheck(px,-1);
if(!x2056.valid){
continue;
}
IkReal x2054=x2056.value;
IkReal x2055=((0.045)*sj2);
CheckValue<IkReal> x2057=IKPowWithIntegerCheck(sj1,-1);
if(!x2057.valid){
continue;
}
if( IKabs((x2054*(((((-0.3)*sj2*sj3))+((cj3*x2055))+(((-1.0)*x2055)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2054*(x2057.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2054*(((((-0.3)*sj2*sj3))+((cj3*x2055))+(((-1.0)*x2055))))))+IKsqr((x2054*(x2057.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x2054*(((((-0.3)*sj2*sj3))+((cj3*x2055))+(((-1.0)*x2055))))), (x2054*(x2057.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2058=IKcos(j0);
IkReal x2059=IKsin(j0);
IkReal x2060=((0.3)*sj3);
IkReal x2061=((0.045)*cj3);
IkReal x2062=((0.3)*cj3);
IkReal x2063=(cj1*cj2);
IkReal x2064=((0.045)*sj3);
IkReal x2065=(cj1*pz);
IkReal x2066=(px*x2059);
IkReal x2067=(px*x2058);
IkReal x2068=(cj2*pz*sj1);
evalcond[0]=((-0.55)+x2065+(((-1.0)*x2064))+(((-1.0)*x2062))+((sj1*x2067)));
evalcond[1]=(((sj2*x2060))+x2066+(((0.045)*sj2))+(((-1.0)*sj2*x2061)));
evalcond[2]=(((cj1*sj2*x2067))+(((-1.0)*pz*sj1*sj2))+((cj2*x2066)));
evalcond[3]=((0.045)+((sj2*x2066))+x2068+x2060+(((-1.0)*x2063*x2067))+(((-1.0)*x2061)));
evalcond[4]=((((-1.0)*x2067))+(((-1.0)*x2061*x2063))+((x2060*x2063))+((sj1*x2064))+((sj1*x2062))+(((0.55)*sj1))+(((0.045)*x2063)));
evalcond[5]=((-0.2125)+(((0.09)*x2063*x2067))+(((1.1)*x2065))+(((-1.0)*pp))+(((1.1)*sj1*x2067))+(((-0.09)*x2068))+(((-0.09)*sj2*x2066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2069=sj2*sj2;
IkReal x2070=cj2*cj2;
IkReal x2071=(cj1*px);
IkReal x2072=((0.045)*cj2);
IkReal x2073=((0.3)*sj3);
IkReal x2074=(pz*sj1);
IkReal x2075=((0.045)*sj2);
CheckValue<IkReal> x2076=IKPowWithIntegerCheck((((px*x2069))+((px*x2070))),-1);
if(!x2076.valid){
continue;
}
CheckValue<IkReal> x2077=IKPowWithIntegerCheck((((x2069*x2071))+((x2070*x2071))),-1);
if(!x2077.valid){
continue;
}
if( IKabs(((x2076.value)*(((((-1.0)*x2075))+(((-1.0)*sj2*x2073))+((cj3*x2075)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2077.value)*((x2072+(((-1.0)*cj3*x2072))+((x2069*x2074))+((x2070*x2074))+((cj2*x2073)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2076.value)*(((((-1.0)*x2075))+(((-1.0)*sj2*x2073))+((cj3*x2075))))))+IKsqr(((x2077.value)*((x2072+(((-1.0)*cj3*x2072))+((x2069*x2074))+((x2070*x2074))+((cj2*x2073))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2076.value)*(((((-1.0)*x2075))+(((-1.0)*sj2*x2073))+((cj3*x2075))))), ((x2077.value)*((x2072+(((-1.0)*cj3*x2072))+((x2069*x2074))+((x2070*x2074))+((cj2*x2073))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2078=IKcos(j0);
IkReal x2079=IKsin(j0);
IkReal x2080=((0.3)*sj3);
IkReal x2081=((0.045)*cj3);
IkReal x2082=((0.3)*cj3);
IkReal x2083=(cj1*cj2);
IkReal x2084=((0.045)*sj3);
IkReal x2085=(cj1*pz);
IkReal x2086=(px*x2079);
IkReal x2087=(px*x2078);
IkReal x2088=(cj2*pz*sj1);
evalcond[0]=((-0.55)+x2085+(((-1.0)*x2082))+(((-1.0)*x2084))+((sj1*x2087)));
evalcond[1]=((((-1.0)*sj2*x2081))+x2086+(((0.045)*sj2))+((sj2*x2080)));
evalcond[2]=((((-1.0)*pz*sj1*sj2))+((cj2*x2086))+((cj1*sj2*x2087)));
evalcond[3]=((0.045)+x2088+x2080+(((-1.0)*x2081))+(((-1.0)*x2083*x2087))+((sj2*x2086)));
evalcond[4]=((((0.045)*x2083))+(((-1.0)*x2087))+((sj1*x2084))+((sj1*x2082))+(((-1.0)*x2081*x2083))+(((0.55)*sj1))+((x2080*x2083)));
evalcond[5]=((-0.2125)+(((1.1)*x2085))+(((0.09)*x2083*x2087))+(((-0.09)*x2088))+(((1.1)*sj1*x2087))+(((-1.0)*pp))+(((-0.09)*sj2*x2086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2089=py*py;
IkReal x2090=cj2*cj2;
IkReal x2091=sj2*sj2;
IkReal x2092=((0.045)*py*sj2);
IkReal x2093=((1.0)*px*py);
IkReal x2094=(((x2089*x2090))+((x2089*x2091)));
IkReal x2095=((((-1.0)*x2090*x2093))+(((-1.0)*x2091*x2093)));
CheckValue<IkReal> x2098 = IKatan2WithCheck(x2094,x2095,IKFAST_ATAN2_MAGTHRESH);
if(!x2098.valid){
continue;
}
IkReal x2096=((1.0)*(x2098.value));
if((((x2094*x2094)+(x2095*x2095))) < -0.00001)
continue;
CheckValue<IkReal> x2099=IKPowWithIntegerCheck(IKabs(IKsqrt(((x2094*x2094)+(x2095*x2095)))),-1);
if(!x2099.valid){
continue;
}
if( (((x2099.value)*(((((-1.0)*x2092))+(((-0.3)*py*sj2*sj3))+((cj3*x2092)))))) < -1-IKFAST_SINCOS_THRESH || (((x2099.value)*(((((-1.0)*x2092))+(((-0.3)*py*sj2*sj3))+((cj3*x2092)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2097=IKasin(((x2099.value)*(((((-1.0)*x2092))+(((-0.3)*py*sj2*sj3))+((cj3*x2092))))));
j0array[0]=((((-1.0)*x2096))+(((-1.0)*x2097)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x2096))+x2097);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2100=sj2*sj2;
IkReal x2101=cj2*cj2;
IkReal x2102=px*px;
IkReal x2103=IKsin(j0);
IkReal x2104=IKcos(j0);
IkReal x2105=(px*py);
IkReal x2106=((0.045)*sj2);
IkReal x2107=((1.0)*x2102);
IkReal x2108=((0.3)*sj2*sj3);
evalcond[0]=(((x2104*((((x2100*x2105))+((x2101*x2105))))))+(((-1.0)*px*x2108))+(((-1.0)*px*x2106))+((x2103*(((((-1.0)*x2100*x2107))+(((-1.0)*x2101*x2107))))))+((cj3*px*x2106)));
evalcond[1]=(((px*x2103))+(((-1.0)*cj3*x2106))+x2108+x2106+(((-1.0)*py*x2104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x2109=(py*sj0);
IkReal x2110=((0.3)*cj3);
IkReal x2111=(cj0*px);
IkReal x2112=(cj2*pz);
IkReal x2113=((0.045)*sj3);
gconst0=IKsign(((((0.045)*cj3*x2112))+(((-0.045)*x2112))+(((-1.0)*x2111*x2113))+(((-1.0)*x2109*x2110))+(((-1.0)*x2109*x2113))+(((-1.0)*x2110*x2111))+(((-0.55)*x2109))+(((-0.55)*x2111))+(((-0.3)*sj3*x2112))));
IkReal x2114=(py*sj0);
IkReal x2115=(cj2*pz);
IkReal x2116=((6.66666666666667)*cj3);
IkReal x2117=(cj0*px);
IkReal x2118=((1.0)*sj3);
dummyeval[0]=((((-1.0)*x2114*x2118))+(((-1.0)*x2114*x2116))+(((-1.0)*x2117*x2118))+(((-1.0)*x2116*x2117))+(((-6.66666666666667)*sj3*x2115))+(((-12.2222222222222)*x2117))+(((-12.2222222222222)*x2114))+(((-1.0)*x2115))+((cj3*x2115)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0)))));
dummyeval[0]=(((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x2119=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2119;
evalcond[3]=x2119;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x2120=(cj0*px);
IkReal x2121=(py*sj0);
IkReal x2122=((0.0254095720202485)*sj3);
IkReal x2123=((0.92038656235619)*pp);
gconst2=IKsign(((((-0.099746893695352)*pz))+(((-0.185020708697653)*x2121))+(((-0.185020708697653)*x2120))+(((-0.310561435803037)*pz*sj3))+(((-1.0)*x2120*x2123))+(((-1.0)*x2121*x2123))+((x2120*x2122))+((x2121*x2122))+(((0.138057984353428)*pp*pz))));
IkReal x2124=(py*sj0);
IkReal x2125=(cj0*px);
IkReal x2126=((36.2220411120167)*pp);
dummyeval[0]=((((-7.28153581454315)*x2125))+(((-7.28153581454315)*x2124))+(((5.4333061668025)*pp*pz))+((sj3*x2125))+((sj3*x2124))+(((-1.0)*x2125*x2126))+(((-3.92556370551481)*pz))+(((-12.2222222222222)*pz*sj3))+(((-1.0)*x2124*x2126)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2127=sj3*sj3;
IkReal x2128=(cj3*sj3);
IkReal x2129=(pp*sj3);
IkReal x2130=(cj3*pp);
IkReal x2131=((1.0)*pz);
CheckValue<IkReal> x2132 = IKatan2WithCheck((gconst2*(((-0.101761389783709)+(((-0.0414173953060285)*x2129))+(((-0.276115968706857)*x2130))+(((0.00114343074091118)*x2127))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00762287160607455)*x2128))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))))),(gconst2*(((-0.0548607915324436)+(((0.00621260929590428)*x2129))+(((-0.0299240681086056)*cj3))+(((-0.0139752646111367)*x2127))+(((-1.0)*py*sj0*x2131))+(((-1.0)*cj0*px*x2131))+(((0.0759318913943856)*pp))+(((-0.0931684307409112)*x2128))+(((-0.175297399907961)*sj3))+(((0.0414173953060285)*x2130))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2132.valid){
continue;
}
j1array[0]=x2132.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2133=IKsin(j1);
IkReal x2134=IKcos(j1);
IkReal x2135=((0.045)*sj3);
IkReal x2136=((0.3)*cj3);
IkReal x2137=((0.045)*cj3);
IkReal x2138=(cj0*px);
IkReal x2139=(py*sj0);
IkReal x2140=((1.0)*x2134);
IkReal x2141=(sj3*x2134);
IkReal x2142=(pz*x2133);
IkReal x2143=(pz*x2134);
IkReal x2144=((0.09)*x2134);
IkReal x2145=((1.1)*x2133);
evalcond[0]=((-0.55)+(((-1.0)*x2135))+(((-1.0)*x2136))+x2143+((x2133*x2139))+((x2133*x2138)));
evalcond[1]=((0.045)+(((-1.0)*x2138*x2140))+(((-1.0)*x2137))+x2142+(((0.3)*sj3))+(((-1.0)*x2139*x2140)));
evalcond[2]=((((-0.185020708697653)*x2134))+(((-0.138057984353428)*pp*x2133))+pz+(((0.0254095720202485)*x2141))+(((-0.92038656235619)*pp*x2134))+(((0.099746893695352)*x2133))+(((0.310561435803037)*sj3*x2133)));
evalcond[3]=((((0.045)*x2134))+(((-1.0)*x2134*x2137))+(((0.55)*x2133))+(((0.3)*x2141))+(((-1.0)*x2138))+(((-1.0)*x2139))+((x2133*x2136))+((x2133*x2135)));
evalcond[4]=((-0.2125)+((x2138*x2145))+((x2138*x2144))+(((-0.09)*x2142))+(((-1.0)*pp))+(((1.1)*x2143))+((x2139*x2144))+((x2139*x2145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2146=(cj0*px);
IkReal x2147=(pz*sj3);
IkReal x2148=(py*sj0);
IkReal x2149=((0.3)*sj3);
IkReal x2150=((0.045)*cj3);
IkReal x2151=((0.3)*cj3);
IkReal x2152=((0.045)*sj3);
CheckValue<IkReal> x2153 = IKatan2WithCheck((gconst3*(((((-0.55)*x2148))+(((-0.55)*x2146))+(((-1.0)*x2148*x2152))+(((-1.0)*x2148*x2151))+(((0.045)*pz))+(((-1.0)*pz*x2150))+(((0.3)*x2147))+(((-1.0)*x2146*x2152))+(((-1.0)*x2146*x2151))))),(gconst3*(((((-0.55)*pz))+((x2146*x2150))+(((-1.0)*x2148*x2149))+(((-0.045)*x2148))+(((-0.045)*x2146))+(((-0.045)*x2147))+(((-1.0)*pz*x2151))+((x2148*x2150))+(((-1.0)*x2146*x2149))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2153.valid){
continue;
}
j1array[0]=x2153.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2154=IKsin(j1);
IkReal x2155=IKcos(j1);
IkReal x2156=((0.045)*sj3);
IkReal x2157=((0.3)*cj3);
IkReal x2158=((0.045)*cj3);
IkReal x2159=(cj0*px);
IkReal x2160=(py*sj0);
IkReal x2161=((1.0)*x2155);
IkReal x2162=(sj3*x2155);
IkReal x2163=(pz*x2154);
IkReal x2164=(pz*x2155);
IkReal x2165=((0.09)*x2155);
IkReal x2166=((1.1)*x2154);
evalcond[0]=((-0.55)+((x2154*x2159))+x2164+(((-1.0)*x2157))+(((-1.0)*x2156))+((x2154*x2160)));
evalcond[1]=((0.045)+(((-1.0)*x2160*x2161))+x2163+(((-1.0)*x2158))+(((-1.0)*x2159*x2161))+(((0.3)*sj3)));
evalcond[2]=((((0.099746893695352)*x2154))+(((0.0254095720202485)*x2162))+(((-0.92038656235619)*pp*x2155))+(((0.310561435803037)*sj3*x2154))+pz+(((-0.185020708697653)*x2155))+(((-0.138057984353428)*pp*x2154)));
evalcond[3]=((((0.3)*x2162))+((x2154*x2157))+((x2154*x2156))+(((0.55)*x2154))+(((-1.0)*x2155*x2158))+(((-1.0)*x2160))+(((0.045)*x2155))+(((-1.0)*x2159)));
evalcond[4]=((-0.2125)+(((1.1)*x2164))+(((-0.09)*x2163))+(((-1.0)*pp))+((x2160*x2166))+((x2160*x2165))+((x2159*x2165))+((x2159*x2166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2167=(px*sj0);
IkReal x2168=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x2167+(((-1.0)*x2168)));
evalcond[3]=(x2168+(((-1.0)*x2167)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0))));
dummyeval[0]=((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
IkReal x2169=(cj0*px);
IkReal x2170=(py*sj0);
IkReal x2171=((0.0254095720202485)*sj3);
IkReal x2172=((0.92038656235619)*pp);
gconst5=IKsign(((((-1.0)*x2170*x2172))+((x2170*x2171))+(((-1.0)*x2169*x2172))+(((-0.138057984353428)*pp*pz))+(((0.310561435803037)*pz*sj3))+(((0.099746893695352)*pz))+(((-0.185020708697653)*x2169))+((x2169*x2171))+(((-0.185020708697653)*x2170))));
IkReal x2173=(py*sj0);
IkReal x2174=(cj0*px);
IkReal x2175=((36.2220411120167)*pp);
dummyeval[0]=((((-1.0)*x2174*x2175))+(((12.2222222222222)*pz*sj3))+(((-5.4333061668025)*pp*pz))+((sj3*x2174))+((sj3*x2173))+(((3.92556370551481)*pz))+(((-7.28153581454315)*x2173))+(((-7.28153581454315)*x2174))+(((-1.0)*x2173*x2175)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2176=sj3*sj3;
IkReal x2177=(cj3*sj3);
IkReal x2178=(pp*sj3);
IkReal x2179=((1.0)*pz);
IkReal x2180=(cj3*pp);
CheckValue<IkReal> x2181 = IKatan2WithCheck((gconst5*(((-0.101761389783709)+(((0.00114343074091118)*x2176))+(((-0.0414173953060285)*x2178))+(pz*pz)+(((-0.276115968706857)*x2180))+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))+(((0.00762287160607455)*x2177))))),(gconst5*(((0.0548607915324436)+(((0.0139752646111367)*x2176))+(((0.175297399907961)*sj3))+(((0.0931684307409112)*x2177))+(((-1.0)*cj0*px*x2179))+(((-1.0)*py*sj0*x2179))+(((-0.0414173953060285)*x2180))+(((-0.00621260929590428)*x2178))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2181.valid){
continue;
}
j1array[0]=x2181.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2182=IKsin(j1);
IkReal x2183=IKcos(j1);
IkReal x2184=((0.045)*sj3);
IkReal x2185=((0.3)*cj3);
IkReal x2186=((0.045)*cj3);
IkReal x2187=(cj0*px);
IkReal x2188=(py*sj0);
IkReal x2189=(sj3*x2183);
IkReal x2190=(pz*x2182);
IkReal x2191=(pz*x2183);
IkReal x2192=((0.09)*x2183);
IkReal x2193=((1.1)*x2182);
evalcond[0]=((-0.55)+x2191+((x2182*x2188))+((x2182*x2187))+(((-1.0)*x2184))+(((-1.0)*x2185)));
evalcond[1]=((0.045)+(((-1.0)*x2190))+((x2183*x2187))+((x2183*x2188))+(((-1.0)*x2186))+(((0.3)*sj3)));
evalcond[2]=((((-0.92038656235619)*pp*x2183))+(((-0.310561435803037)*sj3*x2182))+(((0.0254095720202485)*x2189))+(((-0.185020708697653)*x2183))+pz+(((0.138057984353428)*pp*x2182))+(((-0.099746893695352)*x2182)));
evalcond[3]=((((-1.0)*x2188))+(((-1.0)*x2187))+((x2183*x2186))+((x2182*x2184))+((x2182*x2185))+(((-0.045)*x2183))+(((-0.3)*x2189))+(((0.55)*x2182)));
evalcond[4]=((-0.2125)+(((-1.0)*x2187*x2192))+(((-1.0)*x2188*x2192))+((x2187*x2193))+(((-1.0)*pp))+(((1.1)*x2191))+((x2188*x2193))+(((0.09)*x2190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2194=(py*sj0);
IkReal x2195=(cj0*px);
IkReal x2196=((0.3)*sj3);
IkReal x2197=((0.045)*cj3);
IkReal x2198=((0.045)*pz);
IkReal x2199=((0.3)*cj3);
IkReal x2200=((0.045)*sj3);
CheckValue<IkReal> x2201 = IKatan2WithCheck((gconst4*((((x2194*x2199))+x2198+(((-1.0)*pz*x2197))+((x2194*x2200))+((x2195*x2200))+(((0.55)*x2194))+(((0.55)*x2195))+((x2195*x2199))+((pz*x2196))))),(gconst4*(((((-1.0)*x2195*x2196))+((x2194*x2197))+((sj3*x2198))+(((-1.0)*x2194*x2196))+(((-0.045)*x2195))+(((-0.045)*x2194))+(((0.55)*pz))+((x2195*x2197))+((pz*x2199))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
j1array[0]=x2201.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2202=IKsin(j1);
IkReal x2203=IKcos(j1);
IkReal x2204=((0.045)*sj3);
IkReal x2205=((0.3)*cj3);
IkReal x2206=((0.045)*cj3);
IkReal x2207=(cj0*px);
IkReal x2208=(py*sj0);
IkReal x2209=(sj3*x2203);
IkReal x2210=(pz*x2202);
IkReal x2211=(pz*x2203);
IkReal x2212=((0.09)*x2203);
IkReal x2213=((1.1)*x2202);
evalcond[0]=((-0.55)+((x2202*x2208))+((x2202*x2207))+x2211+(((-1.0)*x2205))+(((-1.0)*x2204)));
evalcond[1]=((0.045)+(((-1.0)*x2210))+(((-1.0)*x2206))+((x2203*x2208))+((x2203*x2207))+(((0.3)*sj3)));
evalcond[2]=((((-0.099746893695352)*x2202))+(((-0.310561435803037)*sj3*x2202))+(((-0.185020708697653)*x2203))+(((0.0254095720202485)*x2209))+(((0.138057984353428)*pp*x2202))+pz+(((-0.92038656235619)*pp*x2203)));
evalcond[3]=(((x2202*x2204))+((x2202*x2205))+(((-1.0)*x2207))+(((-1.0)*x2208))+(((-0.3)*x2209))+(((0.55)*x2202))+(((-0.045)*x2203))+((x2203*x2206)));
evalcond[4]=((-0.2125)+(((-1.0)*x2208*x2212))+(((-1.0)*x2207*x2212))+(((0.09)*x2210))+(((-1.0)*pp))+((x2207*x2213))+(((1.1)*x2211))+((x2208*x2213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2214=((-1.0)*cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2214;
evalcond[3]=x2214;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst6;
gconst6=IKsign(pz);
IkReal x2215=IKsign(pz);
IkReal x2216=(sj3*x2215);
IkReal x2217=(cj3*x2215);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((-0.045)*x2215))+(((0.045)*x2217))+(((-0.3)*x2216)))))+(IKabs(((((0.55)*x2215))+(((0.045)*x2216))+(((0.3)*x2217))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst7;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2218=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x2218.valid){
continue;
}
if( (((36.6666666666667)*pz*(x2218.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x2218.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2219 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x2219.valid){
continue;
}
gconst7=((((-1.0)*(IKasin(((36.6666666666667)*pz*(x2218.value))))))+(((-1.0)*(x2219.value))));
IkReal gconst8;
gconst8=IKsin(gconst7);
IkReal gconst9;
gconst9=IKcos(gconst7);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst7))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*gconst9*pz))+(((12.2222222222222)*pz))+((gconst8*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst8))+(((-0.3)*gconst9)));
evalcond[2]=((0.045)+(((-0.045)*gconst9))+(((0.3)*gconst8)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2221 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst8))+(((-0.3)*gconst9))),((0.045)+(((-0.045)*gconst9))+(((0.3)*gconst8))),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
IkReal x2220=x2221.value;
j1array[0]=((-1.0)*x2220);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2220)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2222=IKsin(j1);
IkReal x2223=IKcos(j1);
IkReal x2224=((0.045)*x2223);
evalcond[0]=((((-1.0)*gconst9*x2224))+x2224+(((0.3)*gconst9*x2222))+(((0.3)*gconst8*x2223))+(((0.045)*gconst8*x2222))+(((0.55)*x2222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2225=((0.3)*gconst9);
IkReal x2226=((0.045)*gconst8);
CheckValue<IkReal> x2227=IKPowWithIntegerCheck(((((0.55)*pz))+((pz*x2225))+((pz*x2226))),-1);
if(!x2227.valid){
continue;
}
CheckValue<IkReal> x2228=IKPowWithIntegerCheck(pz,-1);
if(!x2228.valid){
continue;
}
if( IKabs(((x2227.value)*(((-0.02475)+(((-0.0135)*(gconst8*gconst8)))+(((0.0135)*(gconst9*gconst9)))+(((-0.167025)*gconst8))+(((0.01125)*gconst9))+(((-0.087975)*gconst8*gconst9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2228.value)*(((0.55)+x2226+x2225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2227.value)*(((-0.02475)+(((-0.0135)*(gconst8*gconst8)))+(((0.0135)*(gconst9*gconst9)))+(((-0.167025)*gconst8))+(((0.01125)*gconst9))+(((-0.087975)*gconst8*gconst9))))))+IKsqr(((x2228.value)*(((0.55)+x2226+x2225))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2227.value)*(((-0.02475)+(((-0.0135)*(gconst8*gconst8)))+(((0.0135)*(gconst9*gconst9)))+(((-0.167025)*gconst8))+(((0.01125)*gconst9))+(((-0.087975)*gconst8*gconst9))))), ((x2228.value)*(((0.55)+x2226+x2225))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2229=IKcos(j1);
IkReal x2230=IKsin(j1);
IkReal x2231=((0.3)*gconst8);
IkReal x2232=((0.045)*gconst9);
IkReal x2233=((0.045)*gconst8);
IkReal x2234=((0.3)*gconst9);
IkReal x2235=(pz*x2230);
IkReal x2236=(pz*x2229);
evalcond[0]=((-0.55)+x2236+(((-1.0)*x2234))+(((-1.0)*x2233)));
evalcond[1]=((0.045)+x2231+x2235+(((-1.0)*x2232)));
evalcond[2]=((-0.2125)+(((1.1)*x2236))+(((-1.0)*pp))+(((-0.09)*x2235)));
evalcond[3]=(((x2229*x2231))+(((-1.0)*x2229*x2232))+((x2230*x2234))+((x2230*x2233))+(((0.045)*x2229))+(((0.55)*x2230)));
evalcond[4]=((((-0.55)*x2229))+(((-1.0)*x2229*x2233))+(((-1.0)*x2229*x2234))+((x2230*x2231))+pz+(((-1.0)*x2230*x2232))+(((0.045)*x2230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2237 = IKatan2WithCheck((gconst13*(((-0.045)+(((0.045)*gconst9))+(((-0.3)*gconst8))))),(gconst13*(((0.55)+(((0.045)*gconst8))+(((0.3)*gconst9))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
j1array[0]=x2237.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2238=IKcos(j1);
IkReal x2239=IKsin(j1);
IkReal x2240=((0.3)*gconst8);
IkReal x2241=((0.045)*gconst9);
IkReal x2242=((0.045)*gconst8);
IkReal x2243=((0.3)*gconst9);
IkReal x2244=(pz*x2239);
IkReal x2245=(pz*x2238);
evalcond[0]=((-0.55)+x2245+(((-1.0)*x2243))+(((-1.0)*x2242)));
evalcond[1]=((0.045)+x2244+x2240+(((-1.0)*x2241)));
evalcond[2]=((-0.2125)+(((-0.09)*x2244))+(((-1.0)*pp))+(((1.1)*x2245)));
evalcond[3]=((((-1.0)*x2238*x2241))+(((0.045)*x2238))+((x2239*x2242))+((x2239*x2243))+((x2238*x2240))+(((0.55)*x2239)));
evalcond[4]=((((-0.55)*x2238))+pz+(((-1.0)*x2239*x2241))+(((-1.0)*x2238*x2243))+(((-1.0)*x2238*x2242))+(((0.045)*x2239))+((x2239*x2240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst10;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x2246.valid){
continue;
}
if( (((36.6666666666667)*pz*(x2246.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x2246.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2247 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x2247.valid){
continue;
}
gconst10=((3.14159265358979)+(IKasin(((36.6666666666667)*pz*(x2246.value))))+(((-1.0)*(x2247.value))));
IkReal gconst11;
gconst11=IKsin(gconst10);
IkReal gconst12;
gconst12=IKcos(gconst10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst10))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+(((6.66666666666667)*gconst12*pz))+((gconst11*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst11))+(((-0.3)*gconst12)));
evalcond[2]=((0.045)+(((-0.045)*gconst12))+(((0.3)*gconst11)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2249 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst11))+(((-0.3)*gconst12))),((0.045)+(((-0.045)*gconst12))+(((0.3)*gconst11))),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
IkReal x2248=x2249.value;
j1array[0]=((-1.0)*x2248);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2248)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2250=IKsin(j1);
IkReal x2251=IKcos(j1);
IkReal x2252=((0.045)*x2251);
evalcond[0]=(x2252+(((0.3)*gconst12*x2250))+(((-1.0)*gconst12*x2252))+(((0.55)*x2250))+(((0.045)*gconst11*x2250))+(((0.3)*gconst11*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2253=((0.045)*gconst11);
IkReal x2254=((0.3)*gconst12);
CheckValue<IkReal> x2255=IKPowWithIntegerCheck((((pz*x2253))+((pz*x2254))+(((0.55)*pz))),-1);
if(!x2255.valid){
continue;
}
CheckValue<IkReal> x2256=IKPowWithIntegerCheck(pz,-1);
if(!x2256.valid){
continue;
}
if( IKabs(((x2255.value)*(((-0.02475)+(((0.0135)*(gconst12*gconst12)))+(((-0.0135)*(gconst11*gconst11)))+(((-0.167025)*gconst11))+(((0.01125)*gconst12))+(((-0.087975)*gconst11*gconst12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2256.value)*(((0.55)+x2254+x2253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2255.value)*(((-0.02475)+(((0.0135)*(gconst12*gconst12)))+(((-0.0135)*(gconst11*gconst11)))+(((-0.167025)*gconst11))+(((0.01125)*gconst12))+(((-0.087975)*gconst11*gconst12))))))+IKsqr(((x2256.value)*(((0.55)+x2254+x2253))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2255.value)*(((-0.02475)+(((0.0135)*(gconst12*gconst12)))+(((-0.0135)*(gconst11*gconst11)))+(((-0.167025)*gconst11))+(((0.01125)*gconst12))+(((-0.087975)*gconst11*gconst12))))), ((x2256.value)*(((0.55)+x2254+x2253))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2257=IKcos(j1);
IkReal x2258=IKsin(j1);
IkReal x2259=((0.3)*gconst12);
IkReal x2260=((0.045)*gconst11);
IkReal x2261=((0.3)*gconst11);
IkReal x2262=((0.045)*gconst12);
IkReal x2263=(gconst11*x2257);
IkReal x2264=((0.045)*x2258);
IkReal x2265=(pz*x2258);
IkReal x2266=(pz*x2257);
evalcond[0]=((-0.55)+x2266+(((-1.0)*x2259))+(((-1.0)*x2260)));
evalcond[1]=((0.045)+x2261+x2265+(((-1.0)*x2262)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x2265))+(((1.1)*x2266)));
evalcond[3]=(((x2258*x2260))+(((0.045)*x2257))+((x2257*x2261))+((x2258*x2259))+(((-1.0)*x2257*x2262))+(((0.55)*x2258)));
evalcond[4]=(((x2258*x2261))+x2264+(((-1.0)*x2257*x2259))+(((-1.0)*x2258*x2262))+(((-1.0)*x2257*x2260))+pz+(((-0.55)*x2257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2267 = IKatan2WithCheck((gconst14*(((-0.045)+(((0.045)*gconst12))+(((-0.3)*gconst11))))),(gconst14*(((0.55)+(((0.045)*gconst11))+(((0.3)*gconst12))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2267.valid){
continue;
}
j1array[0]=x2267.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2268=IKcos(j1);
IkReal x2269=IKsin(j1);
IkReal x2270=((0.3)*gconst12);
IkReal x2271=((0.045)*gconst11);
IkReal x2272=((0.3)*gconst11);
IkReal x2273=((0.045)*gconst12);
IkReal x2274=(gconst11*x2268);
IkReal x2275=((0.045)*x2269);
IkReal x2276=(pz*x2269);
IkReal x2277=(pz*x2268);
evalcond[0]=((-0.55)+x2277+(((-1.0)*x2270))+(((-1.0)*x2271)));
evalcond[1]=((0.045)+x2276+x2272+(((-1.0)*x2273)));
evalcond[2]=((-0.2125)+(((1.1)*x2277))+(((-1.0)*pp))+(((-0.09)*x2276)));
evalcond[3]=((((0.55)*x2269))+((x2269*x2271))+((x2269*x2270))+((x2268*x2272))+(((0.045)*x2268))+(((-1.0)*x2268*x2273)));
evalcond[4]=(x2275+(((-0.55)*x2268))+((x2269*x2272))+pz+(((-1.0)*x2269*x2273))+(((-1.0)*x2268*x2271))+(((-1.0)*x2268*x2270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2278=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x2278)));
op[1]=0;
op[2]=((1.0)+x2278);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2279=((0.045)*sj3);
IkReal x2280=((0.3)*cj3);
CheckValue<IkReal> x2281=IKPowWithIntegerCheck((((pz*x2279))+((pz*x2280))+(((0.55)*pz))),-1);
if(!x2281.valid){
continue;
}
CheckValue<IkReal> x2282=IKPowWithIntegerCheck(pz,-1);
if(!x2282.valid){
continue;
}
if( IKabs(((x2281.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2282.value)*(((0.55)+x2280+x2279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2281.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x2282.value)*(((0.55)+x2280+x2279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2281.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x2282.value)*(((0.55)+x2280+x2279))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2283=IKcos(j1);
IkReal x2284=IKsin(j1);
IkReal x2285=((0.045)*cj3);
IkReal x2286=((0.3)*cj3);
IkReal x2287=(sj3*x2284);
IkReal x2288=(cj3*x2284);
IkReal x2289=(sj3*x2283);
IkReal x2290=(pz*x2284);
IkReal x2291=(pz*x2283);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2291+(((-1.0)*x2286)));
evalcond[1]=((0.045)+x2290+(((-1.0)*x2285))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2291))+(((-1.0)*pp))+(((-0.09)*x2290)));
evalcond[3]=((((0.045)*x2283))+(((0.045)*x2287))+(((0.3)*x2289))+(((0.55)*x2284))+(((-1.0)*x2283*x2285))+((x2284*x2286)));
evalcond[4]=((((0.045)*x2284))+(((-0.045)*x2289))+(((-1.0)*x2284*x2285))+pz+(((0.3)*x2287))+(((-0.55)*x2283))+(((-1.0)*x2283*x2286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2293=IKPowWithIntegerCheck(pz,-1);
if(!x2293.valid){
continue;
}
IkReal x2292=x2293.value;
if( IKabs(((0.111111111111111)*x2292*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2292*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2292*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x2292*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2292*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x2292*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2294=IKcos(j1);
IkReal x2295=IKsin(j1);
IkReal x2296=((0.045)*cj3);
IkReal x2297=((0.3)*cj3);
IkReal x2298=(sj3*x2295);
IkReal x2299=(cj3*x2295);
IkReal x2300=(sj3*x2294);
IkReal x2301=(pz*x2295);
IkReal x2302=(pz*x2294);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2302+(((-1.0)*x2297)));
evalcond[1]=((0.045)+x2301+(((0.3)*sj3))+(((-1.0)*x2296)));
evalcond[2]=((-0.2125)+(((1.1)*x2302))+(((-1.0)*pp))+(((-0.09)*x2301)));
evalcond[3]=(((x2295*x2297))+(((0.045)*x2298))+(((0.045)*x2294))+(((0.3)*x2300))+(((0.55)*x2295))+(((-1.0)*x2294*x2296)));
evalcond[4]=((((0.3)*x2298))+(((-0.045)*x2300))+(((0.045)*x2295))+pz+(((-1.0)*x2295*x2296))+(((-1.0)*x2294*x2297))+(((-0.55)*x2294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2303 = IKatan2WithCheck((gconst6*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst6*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2303.valid){
continue;
}
j1array[0]=x2303.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2304=IKcos(j1);
IkReal x2305=IKsin(j1);
IkReal x2306=((0.045)*cj3);
IkReal x2307=((0.3)*cj3);
IkReal x2308=(sj3*x2305);
IkReal x2309=(cj3*x2305);
IkReal x2310=(sj3*x2304);
IkReal x2311=(pz*x2305);
IkReal x2312=(pz*x2304);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2312+(((-1.0)*x2307)));
evalcond[1]=((0.045)+x2311+(((-1.0)*x2306))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x2311))+(((1.1)*x2312))+(((-1.0)*pp)));
evalcond[3]=(((x2305*x2307))+(((0.3)*x2310))+(((-1.0)*x2304*x2306))+(((0.55)*x2305))+(((0.045)*x2308))+(((0.045)*x2304)));
evalcond[4]=((((-1.0)*x2304*x2307))+(((-0.55)*x2304))+pz+(((0.3)*x2308))+(((-0.045)*x2310))+(((-1.0)*x2305*x2306))+(((0.045)*x2305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2313=(cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*x2313);
evalcond[3]=x2313;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst15;
gconst15=IKsign(pz);
IkReal x2314=IKsign(pz);
IkReal x2315=(sj3*x2314);
IkReal x2316=(cj3*x2314);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.3)*x2316))+(((0.045)*x2315))+(((0.55)*x2314)))))+(IKabs(((((0.3)*x2315))+(((0.045)*x2314))+(((-0.045)*x2316))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst16;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2317=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x2317.valid){
continue;
}
if( (((36.6666666666667)*pz*(x2317.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x2317.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2318 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x2318.valid){
continue;
}
gconst16=((((-1.0)*(IKasin(((36.6666666666667)*pz*(x2317.value))))))+(((-1.0)*(x2318.value))));
IkReal gconst17;
gconst17=IKsin(gconst16);
IkReal gconst18;
gconst18=IKcos(gconst16);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst16))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst17*pz))+(((6.66666666666667)*gconst18*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst17))+(((-0.3)*gconst18)));
evalcond[2]=((0.045)+(((-0.045)*gconst18))+(((0.3)*gconst17)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2320 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst17))+(((-0.3)*gconst18))),((-0.045)+(((0.045)*gconst18))+(((-0.3)*gconst17))),IKFAST_ATAN2_MAGTHRESH);
if(!x2320.valid){
continue;
}
IkReal x2319=x2320.value;
j1array[0]=((-1.0)*x2319);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2319)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2321=IKsin(j1);
IkReal x2322=IKcos(j1);
IkReal x2323=((0.045)*x2322);
evalcond[0]=((((-0.3)*gconst17*x2322))+((gconst18*x2323))+(((0.3)*gconst18*x2321))+(((0.55)*x2321))+(((0.045)*gconst17*x2321))+(((-1.0)*x2323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2324=((0.3)*gconst18);
IkReal x2325=((0.045)*gconst17);
CheckValue<IkReal> x2326=IKPowWithIntegerCheck((((pz*x2324))+((pz*x2325))+(((0.55)*pz))),-1);
if(!x2326.valid){
continue;
}
CheckValue<IkReal> x2327=IKPowWithIntegerCheck(pz,-1);
if(!x2327.valid){
continue;
}
if( IKabs(((x2326.value)*(((0.02475)+(((-0.0135)*(gconst18*gconst18)))+(((-0.01125)*gconst18))+(((0.087975)*gconst17*gconst18))+(((0.0135)*(gconst17*gconst17)))+(((0.167025)*gconst17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2327.value)*(((0.55)+x2325+x2324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2326.value)*(((0.02475)+(((-0.0135)*(gconst18*gconst18)))+(((-0.01125)*gconst18))+(((0.087975)*gconst17*gconst18))+(((0.0135)*(gconst17*gconst17)))+(((0.167025)*gconst17))))))+IKsqr(((x2327.value)*(((0.55)+x2325+x2324))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2326.value)*(((0.02475)+(((-0.0135)*(gconst18*gconst18)))+(((-0.01125)*gconst18))+(((0.087975)*gconst17*gconst18))+(((0.0135)*(gconst17*gconst17)))+(((0.167025)*gconst17))))), ((x2327.value)*(((0.55)+x2325+x2324))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2328=IKcos(j1);
IkReal x2329=IKsin(j1);
IkReal x2330=((0.045)*gconst17);
IkReal x2331=((0.045)*gconst18);
IkReal x2332=((0.3)*gconst18);
IkReal x2333=((0.3)*gconst17);
IkReal x2334=(pz*x2329);
IkReal x2335=(pz*x2328);
evalcond[0]=((-0.55)+(((-1.0)*x2332))+(((-1.0)*x2330))+x2335);
evalcond[1]=((0.045)+(((-1.0)*x2331))+x2333+(((-1.0)*x2334)));
evalcond[2]=((-0.2125)+(((0.09)*x2334))+(((-1.0)*pp))+(((1.1)*x2335)));
evalcond[3]=((((-1.0)*x2328*x2333))+((x2329*x2332))+((x2329*x2330))+(((0.55)*x2329))+(((-0.045)*x2328))+((x2328*x2331)));
evalcond[4]=((((-1.0)*x2328*x2330))+(((-1.0)*x2328*x2332))+((x2329*x2331))+(((-0.55)*x2328))+pz+(((-1.0)*x2329*x2333))+(((-0.045)*x2329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2336 = IKatan2WithCheck((gconst22*(((0.045)+(((-0.045)*gconst18))+(((0.3)*gconst17))))),(gconst22*(((0.55)+(((0.045)*gconst17))+(((0.3)*gconst18))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2336.valid){
continue;
}
j1array[0]=x2336.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2337=IKcos(j1);
IkReal x2338=IKsin(j1);
IkReal x2339=((0.045)*gconst17);
IkReal x2340=((0.045)*gconst18);
IkReal x2341=((0.3)*gconst18);
IkReal x2342=((0.3)*gconst17);
IkReal x2343=(pz*x2338);
IkReal x2344=(pz*x2337);
evalcond[0]=((-0.55)+(((-1.0)*x2339))+x2344+(((-1.0)*x2341)));
evalcond[1]=((0.045)+x2342+(((-1.0)*x2343))+(((-1.0)*x2340)));
evalcond[2]=((-0.2125)+(((0.09)*x2343))+(((-1.0)*pp))+(((1.1)*x2344)));
evalcond[3]=((((-1.0)*x2337*x2342))+((x2338*x2341))+(((0.55)*x2338))+((x2337*x2340))+(((-0.045)*x2337))+((x2338*x2339)));
evalcond[4]=((((-1.0)*x2337*x2341))+(((-0.55)*x2337))+(((-1.0)*x2337*x2339))+((x2338*x2340))+pz+(((-1.0)*x2338*x2342))+(((-0.045)*x2338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst19;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2345=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x2345.valid){
continue;
}
if( (((36.6666666666667)*pz*(x2345.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x2345.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2346 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
gconst19=((3.14159265358979)+(IKasin(((36.6666666666667)*pz*(x2345.value))))+(((-1.0)*(x2346.value))));
IkReal gconst20;
gconst20=IKsin(gconst19);
IkReal gconst21;
gconst21=IKcos(gconst19);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst19))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst20*pz))+(((6.66666666666667)*gconst21*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst20))+(((-0.3)*gconst21)));
evalcond[2]=((0.045)+(((-0.045)*gconst21))+(((0.3)*gconst20)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2348 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst20))+(((-0.3)*gconst21))),((-0.045)+(((0.045)*gconst21))+(((-0.3)*gconst20))),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
IkReal x2347=x2348.value;
j1array[0]=((-1.0)*x2347);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2347)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2349=IKsin(j1);
IkReal x2350=IKcos(j1);
IkReal x2351=((0.045)*x2350);
evalcond[0]=((((0.045)*gconst20*x2349))+(((0.55)*x2349))+(((0.3)*gconst21*x2349))+(((-0.3)*gconst20*x2350))+((gconst21*x2351))+(((-1.0)*x2351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2352=((0.3)*gconst21);
IkReal x2353=((0.045)*gconst20);
CheckValue<IkReal> x2354=IKPowWithIntegerCheck((((pz*x2353))+((pz*x2352))+(((0.55)*pz))),-1);
if(!x2354.valid){
continue;
}
CheckValue<IkReal> x2355=IKPowWithIntegerCheck(pz,-1);
if(!x2355.valid){
continue;
}
if( IKabs(((x2354.value)*(((0.02475)+(((-0.01125)*gconst21))+(((0.0135)*(gconst20*gconst20)))+(((0.087975)*gconst20*gconst21))+(((-0.0135)*(gconst21*gconst21)))+(((0.167025)*gconst20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2355.value)*(((0.55)+x2352+x2353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2354.value)*(((0.02475)+(((-0.01125)*gconst21))+(((0.0135)*(gconst20*gconst20)))+(((0.087975)*gconst20*gconst21))+(((-0.0135)*(gconst21*gconst21)))+(((0.167025)*gconst20))))))+IKsqr(((x2355.value)*(((0.55)+x2352+x2353))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2354.value)*(((0.02475)+(((-0.01125)*gconst21))+(((0.0135)*(gconst20*gconst20)))+(((0.087975)*gconst20*gconst21))+(((-0.0135)*(gconst21*gconst21)))+(((0.167025)*gconst20))))), ((x2355.value)*(((0.55)+x2352+x2353))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2356=IKcos(j1);
IkReal x2357=IKsin(j1);
IkReal x2358=((0.3)*gconst21);
IkReal x2359=((0.045)*gconst20);
IkReal x2360=((0.045)*gconst21);
IkReal x2361=((0.3)*gconst20);
IkReal x2362=(pz*x2357);
IkReal x2363=(pz*x2356);
evalcond[0]=((-0.55)+x2363+(((-1.0)*x2359))+(((-1.0)*x2358)));
evalcond[1]=((0.045)+x2361+(((-1.0)*x2360))+(((-1.0)*x2362)));
evalcond[2]=((-0.2125)+(((1.1)*x2363))+(((0.09)*x2362))+(((-1.0)*pp)));
evalcond[3]=((((-0.045)*x2356))+((x2357*x2358))+((x2357*x2359))+(((0.55)*x2357))+(((-1.0)*x2356*x2361))+((x2356*x2360)));
evalcond[4]=((((-0.045)*x2357))+(((-1.0)*x2356*x2358))+(((-1.0)*x2356*x2359))+(((-1.0)*x2357*x2361))+pz+(((-0.55)*x2356))+((x2357*x2360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2364 = IKatan2WithCheck((gconst23*(((0.045)+(((-0.045)*gconst21))+(((0.3)*gconst20))))),(gconst23*(((0.55)+(((0.045)*gconst20))+(((0.3)*gconst21))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2364.valid){
continue;
}
j1array[0]=x2364.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2365=IKcos(j1);
IkReal x2366=IKsin(j1);
IkReal x2367=((0.3)*gconst21);
IkReal x2368=((0.045)*gconst20);
IkReal x2369=((0.045)*gconst21);
IkReal x2370=((0.3)*gconst20);
IkReal x2371=(pz*x2366);
IkReal x2372=(pz*x2365);
evalcond[0]=((-0.55)+x2372+(((-1.0)*x2367))+(((-1.0)*x2368)));
evalcond[1]=((0.045)+x2370+(((-1.0)*x2369))+(((-1.0)*x2371)));
evalcond[2]=((-0.2125)+(((1.1)*x2372))+(((-1.0)*pp))+(((0.09)*x2371)));
evalcond[3]=((((0.55)*x2366))+(((-0.045)*x2365))+((x2365*x2369))+((x2366*x2367))+((x2366*x2368))+(((-1.0)*x2365*x2370)));
evalcond[4]=((((-0.045)*x2366))+((x2366*x2369))+pz+(((-1.0)*x2365*x2367))+(((-1.0)*x2365*x2368))+(((-0.55)*x2365))+(((-1.0)*x2366*x2370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2373=((2.40588235294118)*sj3);
op[0]=((1.0)+x2373);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x2373)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2374=((0.045)*sj3);
IkReal x2375=((0.3)*cj3);
CheckValue<IkReal> x2376=IKPowWithIntegerCheck((((pz*x2375))+((pz*x2374))+(((0.55)*pz))),-1);
if(!x2376.valid){
continue;
}
CheckValue<IkReal> x2377=IKPowWithIntegerCheck(pz,-1);
if(!x2377.valid){
continue;
}
if( IKabs(((x2376.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2377.value)*(((0.55)+x2374+x2375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2376.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x2377.value)*(((0.55)+x2374+x2375))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2376.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x2377.value)*(((0.55)+x2374+x2375))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2378=IKcos(j1);
IkReal x2379=IKsin(j1);
IkReal x2380=((0.045)*cj3);
IkReal x2381=((0.3)*cj3);
IkReal x2382=(sj3*x2379);
IkReal x2383=(cj3*x2379);
IkReal x2384=(sj3*x2378);
IkReal x2385=(pz*x2379);
IkReal x2386=(pz*x2378);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2386+(((-1.0)*x2381)));
evalcond[1]=((0.045)+(((-1.0)*x2380))+(((-1.0)*x2385))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2385))+(((1.1)*x2386)));
evalcond[3]=((((-0.045)*x2378))+(((-0.3)*x2384))+((x2379*x2381))+(((0.045)*x2382))+(((0.55)*x2379))+((x2378*x2380)));
evalcond[4]=((((-0.045)*x2379))+(((-1.0)*x2378*x2381))+(((-0.045)*x2384))+(((-0.3)*x2382))+((x2379*x2380))+pz+(((-0.55)*x2378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2388=IKPowWithIntegerCheck(pz,-1);
if(!x2388.valid){
continue;
}
IkReal x2387=x2388.value;
if( IKabs(((0.111111111111111)*x2387*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2387*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2387*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x2387*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2387*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x2387*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2389=IKcos(j1);
IkReal x2390=IKsin(j1);
IkReal x2391=((0.045)*cj3);
IkReal x2392=((0.3)*cj3);
IkReal x2393=(sj3*x2390);
IkReal x2394=(cj3*x2390);
IkReal x2395=(sj3*x2389);
IkReal x2396=(pz*x2390);
IkReal x2397=(pz*x2389);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2397+(((-1.0)*x2392)));
evalcond[1]=((0.045)+(((-1.0)*x2396))+(((-1.0)*x2391))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2396))+(((1.1)*x2397)));
evalcond[3]=((((0.55)*x2390))+(((-0.045)*x2389))+(((-0.3)*x2395))+((x2390*x2392))+(((0.045)*x2393))+((x2389*x2391)));
evalcond[4]=((((-0.55)*x2389))+(((-1.0)*x2389*x2392))+(((-0.3)*x2393))+(((-0.045)*x2390))+(((-0.045)*x2395))+((x2390*x2391))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2398 = IKatan2WithCheck((gconst15*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst15*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2398.valid){
continue;
}
j1array[0]=x2398.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2399=IKcos(j1);
IkReal x2400=IKsin(j1);
IkReal x2401=((0.045)*cj3);
IkReal x2402=((0.3)*cj3);
IkReal x2403=(sj3*x2400);
IkReal x2404=(cj3*x2400);
IkReal x2405=(sj3*x2399);
IkReal x2406=(pz*x2400);
IkReal x2407=(pz*x2399);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2407+(((-1.0)*x2402)));
evalcond[1]=((0.045)+(((-1.0)*x2406))+(((-1.0)*x2401))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2406))+(((1.1)*x2407)));
evalcond[3]=((((0.55)*x2400))+(((-0.3)*x2405))+((x2399*x2401))+(((-0.045)*x2399))+((x2400*x2402))+(((0.045)*x2403)));
evalcond[4]=((((-1.0)*x2399*x2402))+(((-0.3)*x2403))+((x2400*x2401))+pz+(((-0.045)*x2400))+(((-0.045)*x2405))+(((-0.55)*x2399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2408=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2408;
evalcond[3]=x2408;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst24;
gconst24=IKsign(pz);
IkReal x2409=IKsign(pz);
IkReal x2410=(sj3*x2409);
IkReal x2411=(cj3*x2409);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.55)*x2409))+(((0.045)*x2410))+(((0.3)*x2411)))))+(IKabs(((((0.045)*x2411))+(((-0.3)*x2410))+(((-0.045)*x2409))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst25;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2412=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x2412.valid){
continue;
}
if( (((36.6666666666667)*pz*(x2412.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x2412.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2413 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x2413.valid){
continue;
}
gconst25=((((-1.0)*(IKasin(((36.6666666666667)*pz*(x2412.value))))))+(((-1.0)*(x2413.value))));
IkReal gconst26;
gconst26=IKsin(gconst25);
IkReal gconst27;
gconst27=IKcos(gconst25);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst25))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst26*pz))+(((6.66666666666667)*gconst27*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst26))+(((-0.3)*gconst27)));
evalcond[2]=((0.045)+(((-0.045)*gconst27))+(((0.3)*gconst26)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2415 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst26))+(((-0.3)*gconst27))),((0.045)+(((-0.045)*gconst27))+(((0.3)*gconst26))),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
IkReal x2414=x2415.value;
j1array[0]=((-1.0)*x2414);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2414)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2416=IKsin(j1);
IkReal x2417=IKcos(j1);
IkReal x2418=((0.045)*x2417);
evalcond[0]=((((-1.0)*gconst27*x2418))+x2418+(((0.55)*x2416))+(((0.045)*gconst26*x2416))+(((0.3)*gconst27*x2416))+(((0.3)*gconst26*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2419=((0.045)*gconst26);
IkReal x2420=((0.3)*gconst27);
CheckValue<IkReal> x2421=IKPowWithIntegerCheck((((pz*x2419))+((pz*x2420))+(((0.55)*pz))),-1);
if(!x2421.valid){
continue;
}
CheckValue<IkReal> x2422=IKPowWithIntegerCheck(pz,-1);
if(!x2422.valid){
continue;
}
if( IKabs(((x2421.value)*(((-0.02475)+(((-0.087975)*gconst26*gconst27))+(((0.0135)*(gconst27*gconst27)))+(((-0.0135)*(gconst26*gconst26)))+(((-0.167025)*gconst26))+(((0.01125)*gconst27)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2422.value)*(((0.55)+x2419+x2420)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2421.value)*(((-0.02475)+(((-0.087975)*gconst26*gconst27))+(((0.0135)*(gconst27*gconst27)))+(((-0.0135)*(gconst26*gconst26)))+(((-0.167025)*gconst26))+(((0.01125)*gconst27))))))+IKsqr(((x2422.value)*(((0.55)+x2419+x2420))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2421.value)*(((-0.02475)+(((-0.087975)*gconst26*gconst27))+(((0.0135)*(gconst27*gconst27)))+(((-0.0135)*(gconst26*gconst26)))+(((-0.167025)*gconst26))+(((0.01125)*gconst27))))), ((x2422.value)*(((0.55)+x2419+x2420))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2423=IKcos(j1);
IkReal x2424=IKsin(j1);
IkReal x2425=((0.045)*gconst27);
IkReal x2426=((0.3)*gconst26);
IkReal x2427=((0.3)*gconst27);
IkReal x2428=((0.045)*x2424);
IkReal x2429=(pz*x2424);
IkReal x2430=((0.045)*x2423);
IkReal x2431=(pz*x2423);
evalcond[0]=((-0.55)+x2431+(((-0.045)*gconst26))+(((-1.0)*x2427)));
evalcond[1]=((0.045)+x2429+x2426+(((-1.0)*x2425)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x2429))+(((1.1)*x2431)));
evalcond[3]=(x2430+(((-1.0)*x2423*x2425))+((x2423*x2426))+(((0.55)*x2424))+((gconst26*x2428))+((x2424*x2427)));
evalcond[4]=((((-1.0)*gconst26*x2430))+x2428+(((-1.0)*x2423*x2427))+(((-1.0)*x2424*x2425))+(((-0.55)*x2423))+pz+((x2424*x2426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2432 = IKatan2WithCheck((gconst31*(((-0.045)+(((0.045)*gconst27))+(((-0.3)*gconst26))))),(gconst31*(((0.55)+(((0.045)*gconst26))+(((0.3)*gconst27))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2432.valid){
continue;
}
j1array[0]=x2432.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2433=IKcos(j1);
IkReal x2434=IKsin(j1);
IkReal x2435=((0.045)*gconst27);
IkReal x2436=((0.3)*gconst26);
IkReal x2437=((0.3)*gconst27);
IkReal x2438=((0.045)*x2434);
IkReal x2439=(pz*x2434);
IkReal x2440=((0.045)*x2433);
IkReal x2441=(pz*x2433);
evalcond[0]=((-0.55)+x2441+(((-1.0)*x2437))+(((-0.045)*gconst26)));
evalcond[1]=((0.045)+x2439+x2436+(((-1.0)*x2435)));
evalcond[2]=((-0.2125)+(((-0.09)*x2439))+(((1.1)*x2441))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x2433*x2435))+(((0.55)*x2434))+x2440+((gconst26*x2438))+((x2433*x2436))+((x2434*x2437)));
evalcond[4]=((((-1.0)*x2433*x2437))+x2438+(((-1.0)*x2434*x2435))+(((-1.0)*gconst26*x2440))+pz+(((-0.55)*x2433))+((x2434*x2436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst28;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2442=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x2442.valid){
continue;
}
if( (((36.6666666666667)*pz*(x2442.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x2442.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2443 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x2443.valid){
continue;
}
gconst28=((3.14159265358979)+(IKasin(((36.6666666666667)*pz*(x2442.value))))+(((-1.0)*(x2443.value))));
IkReal gconst29;
gconst29=IKsin(gconst28);
IkReal gconst30;
gconst30=IKcos(gconst28);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst28))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+(((6.66666666666667)*gconst30*pz))+((gconst29*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.3)*gconst30))+(((-0.045)*gconst29)));
evalcond[2]=((0.045)+(((-0.045)*gconst30))+(((0.3)*gconst29)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2445 = IKatan2WithCheck(((-0.55)+(((-0.3)*gconst30))+(((-0.045)*gconst29))),((0.045)+(((-0.045)*gconst30))+(((0.3)*gconst29))),IKFAST_ATAN2_MAGTHRESH);
if(!x2445.valid){
continue;
}
IkReal x2444=x2445.value;
j1array[0]=((-1.0)*x2444);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2444)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2446=IKsin(j1);
IkReal x2447=IKcos(j1);
IkReal x2448=((0.045)*x2447);
evalcond[0]=((((0.3)*gconst29*x2447))+x2448+(((0.3)*gconst30*x2446))+(((0.045)*gconst29*x2446))+(((0.55)*x2446))+(((-1.0)*gconst30*x2448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2449=((0.3)*gconst30);
IkReal x2450=((0.045)*gconst29);
CheckValue<IkReal> x2451=IKPowWithIntegerCheck((((pz*x2449))+((pz*x2450))+(((0.55)*pz))),-1);
if(!x2451.valid){
continue;
}
CheckValue<IkReal> x2452=IKPowWithIntegerCheck(pz,-1);
if(!x2452.valid){
continue;
}
if( IKabs(((x2451.value)*(((-0.02475)+(((-0.167025)*gconst29))+(((0.01125)*gconst30))+(((-0.0135)*(gconst29*gconst29)))+(((0.0135)*(gconst30*gconst30)))+(((-0.087975)*gconst29*gconst30)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2452.value)*(((0.55)+x2449+x2450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2451.value)*(((-0.02475)+(((-0.167025)*gconst29))+(((0.01125)*gconst30))+(((-0.0135)*(gconst29*gconst29)))+(((0.0135)*(gconst30*gconst30)))+(((-0.087975)*gconst29*gconst30))))))+IKsqr(((x2452.value)*(((0.55)+x2449+x2450))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2451.value)*(((-0.02475)+(((-0.167025)*gconst29))+(((0.01125)*gconst30))+(((-0.0135)*(gconst29*gconst29)))+(((0.0135)*(gconst30*gconst30)))+(((-0.087975)*gconst29*gconst30))))), ((x2452.value)*(((0.55)+x2449+x2450))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2453=IKcos(j1);
IkReal x2454=IKsin(j1);
IkReal x2455=((0.3)*gconst29);
IkReal x2456=((0.045)*gconst30);
IkReal x2457=((0.3)*gconst30);
IkReal x2458=((0.045)*x2454);
IkReal x2459=(pz*x2454);
IkReal x2460=((0.045)*x2453);
IkReal x2461=(pz*x2453);
evalcond[0]=((-0.55)+x2461+(((-0.045)*gconst29))+(((-1.0)*x2457)));
evalcond[1]=((0.045)+x2459+x2455+(((-1.0)*x2456)));
evalcond[2]=((-0.2125)+(((1.1)*x2461))+(((-0.09)*x2459))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x2453*x2456))+x2460+((x2453*x2455))+((x2454*x2457))+(((0.55)*x2454))+((gconst29*x2458)));
evalcond[4]=((((-1.0)*x2453*x2457))+(((-1.0)*gconst29*x2460))+x2458+(((-0.55)*x2453))+(((-1.0)*x2454*x2456))+((x2454*x2455))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2462 = IKatan2WithCheck((gconst32*(((-0.045)+(((0.045)*gconst30))+(((-0.3)*gconst29))))),(gconst32*(((0.55)+(((0.045)*gconst29))+(((0.3)*gconst30))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2462.valid){
continue;
}
j1array[0]=x2462.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2463=IKcos(j1);
IkReal x2464=IKsin(j1);
IkReal x2465=((0.3)*gconst29);
IkReal x2466=((0.045)*gconst30);
IkReal x2467=((0.3)*gconst30);
IkReal x2468=((0.045)*x2464);
IkReal x2469=(pz*x2464);
IkReal x2470=((0.045)*x2463);
IkReal x2471=(pz*x2463);
evalcond[0]=((-0.55)+x2471+(((-0.045)*gconst29))+(((-1.0)*x2467)));
evalcond[1]=((0.045)+x2465+x2469+(((-1.0)*x2466)));
evalcond[2]=((-0.2125)+(((-0.09)*x2469))+(((-1.0)*pp))+(((1.1)*x2471)));
evalcond[3]=((((0.55)*x2464))+x2470+((gconst29*x2468))+((x2464*x2467))+(((-1.0)*x2463*x2466))+((x2463*x2465)));
evalcond[4]=((((-1.0)*x2464*x2466))+x2468+((x2464*x2465))+(((-1.0)*x2463*x2467))+(((-1.0)*gconst29*x2470))+pz+(((-0.55)*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2472=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x2472)));
op[1]=0;
op[2]=((1.0)+x2472);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2473=((0.045)*sj3);
IkReal x2474=((0.3)*cj3);
CheckValue<IkReal> x2475=IKPowWithIntegerCheck((((pz*x2473))+((pz*x2474))+(((0.55)*pz))),-1);
if(!x2475.valid){
continue;
}
CheckValue<IkReal> x2476=IKPowWithIntegerCheck(pz,-1);
if(!x2476.valid){
continue;
}
if( IKabs(((x2475.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2476.value)*(((0.55)+x2474+x2473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2475.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x2476.value)*(((0.55)+x2474+x2473))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2475.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x2476.value)*(((0.55)+x2474+x2473))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2477=IKcos(j1);
IkReal x2478=IKsin(j1);
IkReal x2479=((0.045)*cj3);
IkReal x2480=((0.3)*cj3);
IkReal x2481=(sj3*x2478);
IkReal x2482=(cj3*x2478);
IkReal x2483=(sj3*x2477);
IkReal x2484=(pz*x2478);
IkReal x2485=(pz*x2477);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2485+(((-1.0)*x2480)));
evalcond[1]=((0.045)+x2484+(((-1.0)*x2479))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2485))+(((-1.0)*pp))+(((-0.09)*x2484)));
evalcond[3]=((((-1.0)*x2477*x2479))+(((0.045)*x2481))+(((0.55)*x2478))+(((0.045)*x2477))+(((0.3)*x2483))+((x2478*x2480)));
evalcond[4]=((((-0.045)*x2483))+(((-1.0)*x2477*x2480))+(((-0.55)*x2477))+(((0.045)*x2478))+(((0.3)*x2481))+pz+(((-1.0)*x2478*x2479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2487=IKPowWithIntegerCheck(pz,-1);
if(!x2487.valid){
continue;
}
IkReal x2486=x2487.value;
if( IKabs(((0.111111111111111)*x2486*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2486*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2486*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x2486*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2486*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x2486*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2488=IKcos(j1);
IkReal x2489=IKsin(j1);
IkReal x2490=((0.045)*cj3);
IkReal x2491=((0.3)*cj3);
IkReal x2492=(sj3*x2489);
IkReal x2493=(cj3*x2489);
IkReal x2494=(sj3*x2488);
IkReal x2495=(pz*x2489);
IkReal x2496=(pz*x2488);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2496+(((-1.0)*x2491)));
evalcond[1]=((0.045)+x2495+(((-1.0)*x2490))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2496))+(((-1.0)*pp))+(((-0.09)*x2495)));
evalcond[3]=((((0.55)*x2489))+(((0.045)*x2488))+(((0.045)*x2492))+(((0.3)*x2494))+(((-1.0)*x2488*x2490))+((x2489*x2491)));
evalcond[4]=((((-0.045)*x2494))+(((0.045)*x2489))+(((0.3)*x2492))+pz+(((-1.0)*x2489*x2490))+(((-0.55)*x2488))+(((-1.0)*x2488*x2491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2497 = IKatan2WithCheck((gconst24*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst24*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2497.valid){
continue;
}
j1array[0]=x2497.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2498=IKcos(j1);
IkReal x2499=IKsin(j1);
IkReal x2500=((0.045)*cj3);
IkReal x2501=((0.3)*cj3);
IkReal x2502=(sj3*x2499);
IkReal x2503=(cj3*x2499);
IkReal x2504=(sj3*x2498);
IkReal x2505=(pz*x2499);
IkReal x2506=(pz*x2498);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2501))+x2506);
evalcond[1]=((0.045)+(((-1.0)*x2500))+x2505+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2506))+(((-0.09)*x2505)));
evalcond[3]=((((-1.0)*x2498*x2500))+(((0.55)*x2499))+(((0.045)*x2498))+((x2499*x2501))+(((0.045)*x2502))+(((0.3)*x2504)));
evalcond[4]=((((-1.0)*x2498*x2501))+(((-0.045)*x2504))+(((0.045)*x2499))+(((-1.0)*x2499*x2500))+pz+(((-0.55)*x2498))+(((0.3)*x2502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2507=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2507;
evalcond[3]=((-1.0)*x2507);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst33;
gconst33=IKsign(pz);
IkReal x2508=IKsign(pz);
IkReal x2509=(sj3*x2508);
IkReal x2510=(cj3*x2508);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.3)*x2510))+(((0.045)*x2509))+(((0.55)*x2508)))))+(IKabs(((((-0.045)*x2510))+(((0.045)*x2508))+(((0.3)*x2509))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst34;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2511=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x2511.valid){
continue;
}
if( (((36.6666666666667)*pz*(x2511.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x2511.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2512 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x2512.valid){
continue;
}
gconst34=((((-1.0)*(IKasin(((36.6666666666667)*pz*(x2511.value))))))+(((-1.0)*(x2512.value))));
IkReal gconst35;
gconst35=IKsin(gconst34);
IkReal gconst36;
gconst36=IKcos(gconst34);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst34))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst35*pz))+(((6.66666666666667)*gconst36*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.3)*gconst36))+(((-0.045)*gconst35)));
evalcond[2]=((0.045)+(((-0.045)*gconst36))+(((0.3)*gconst35)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2514 = IKatan2WithCheck(((-0.55)+(((-0.3)*gconst36))+(((-0.045)*gconst35))),((-0.045)+(((-0.3)*gconst35))+(((0.045)*gconst36))),IKFAST_ATAN2_MAGTHRESH);
if(!x2514.valid){
continue;
}
IkReal x2513=x2514.value;
j1array[0]=((-1.0)*x2513);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2513)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2515=IKsin(j1);
IkReal x2516=IKcos(j1);
IkReal x2517=((0.045)*x2516);
evalcond[0]=((((-0.3)*gconst35*x2516))+(((-1.0)*x2517))+(((0.045)*gconst35*x2515))+((gconst36*x2517))+(((0.3)*gconst36*x2515))+(((0.55)*x2515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2518=((0.045)*gconst35);
IkReal x2519=((0.3)*gconst36);
CheckValue<IkReal> x2520=IKPowWithIntegerCheck((((pz*x2519))+((pz*x2518))+(((0.55)*pz))),-1);
if(!x2520.valid){
continue;
}
CheckValue<IkReal> x2521=IKPowWithIntegerCheck(pz,-1);
if(!x2521.valid){
continue;
}
if( IKabs(((x2520.value)*(((0.02475)+(((-0.0135)*(gconst36*gconst36)))+(((0.087975)*gconst35*gconst36))+(((0.167025)*gconst35))+(((-0.01125)*gconst36))+(((0.0135)*(gconst35*gconst35))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2521.value)*(((0.55)+x2518+x2519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2520.value)*(((0.02475)+(((-0.0135)*(gconst36*gconst36)))+(((0.087975)*gconst35*gconst36))+(((0.167025)*gconst35))+(((-0.01125)*gconst36))+(((0.0135)*(gconst35*gconst35)))))))+IKsqr(((x2521.value)*(((0.55)+x2518+x2519))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2520.value)*(((0.02475)+(((-0.0135)*(gconst36*gconst36)))+(((0.087975)*gconst35*gconst36))+(((0.167025)*gconst35))+(((-0.01125)*gconst36))+(((0.0135)*(gconst35*gconst35)))))), ((x2521.value)*(((0.55)+x2518+x2519))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2522=IKcos(j1);
IkReal x2523=IKsin(j1);
IkReal x2524=((0.3)*gconst36);
IkReal x2525=((0.045)*gconst35);
IkReal x2526=((0.045)*gconst36);
IkReal x2527=((0.3)*gconst35);
IkReal x2528=(pz*x2523);
IkReal x2529=(pz*x2522);
evalcond[0]=((-0.55)+x2529+(((-1.0)*x2524))+(((-1.0)*x2525)));
evalcond[1]=((0.045)+x2527+(((-1.0)*x2528))+(((-1.0)*x2526)));
evalcond[2]=((-0.2125)+(((0.09)*x2528))+(((-1.0)*pp))+(((1.1)*x2529)));
evalcond[3]=((((-0.045)*x2522))+((x2522*x2526))+(((-1.0)*x2522*x2527))+(((0.55)*x2523))+((x2523*x2524))+((x2523*x2525)));
evalcond[4]=((((-0.045)*x2523))+(((-1.0)*x2523*x2527))+(((-1.0)*x2522*x2524))+(((-1.0)*x2522*x2525))+pz+((x2523*x2526))+(((-0.55)*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2530 = IKatan2WithCheck((gconst40*(((0.045)+(((-0.045)*gconst36))+(((0.3)*gconst35))))),(gconst40*(((0.55)+(((0.045)*gconst35))+(((0.3)*gconst36))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
j1array[0]=x2530.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2531=IKcos(j1);
IkReal x2532=IKsin(j1);
IkReal x2533=((0.3)*gconst36);
IkReal x2534=((0.045)*gconst35);
IkReal x2535=((0.045)*gconst36);
IkReal x2536=((0.3)*gconst35);
IkReal x2537=(pz*x2532);
IkReal x2538=(pz*x2531);
evalcond[0]=((-0.55)+x2538+(((-1.0)*x2534))+(((-1.0)*x2533)));
evalcond[1]=((0.045)+x2536+(((-1.0)*x2535))+(((-1.0)*x2537)));
evalcond[2]=((-0.2125)+(((1.1)*x2538))+(((0.09)*x2537))+(((-1.0)*pp)));
evalcond[3]=((((0.55)*x2532))+((x2531*x2535))+(((-0.045)*x2531))+(((-1.0)*x2531*x2536))+((x2532*x2534))+((x2532*x2533)));
evalcond[4]=((((-0.045)*x2532))+(((-0.55)*x2531))+(((-1.0)*x2531*x2534))+(((-1.0)*x2531*x2533))+pz+((x2532*x2535))+(((-1.0)*x2532*x2536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst37;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x2539.valid){
continue;
}
if( (((36.6666666666667)*pz*(x2539.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x2539.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2540 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
gconst37=((3.14159265358979)+(IKasin(((36.6666666666667)*pz*(x2539.value))))+(((-1.0)*(x2540.value))));
IkReal gconst38;
gconst38=IKsin(gconst37);
IkReal gconst39;
gconst39=IKcos(gconst37);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst37))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst38*pz))+(((6.66666666666667)*gconst39*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.3)*gconst39))+(((-0.045)*gconst38)));
evalcond[2]=((0.045)+(((-0.045)*gconst39))+(((0.3)*gconst38)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2542 = IKatan2WithCheck(((-0.55)+(((-0.3)*gconst39))+(((-0.045)*gconst38))),((-0.045)+(((-0.3)*gconst38))+(((0.045)*gconst39))),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
IkReal x2541=x2542.value;
j1array[0]=((-1.0)*x2541);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2541)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2543=IKsin(j1);
IkReal x2544=IKcos(j1);
IkReal x2545=((0.045)*x2544);
evalcond[0]=((((0.045)*gconst38*x2543))+(((-0.3)*gconst38*x2544))+(((0.55)*x2543))+(((-1.0)*x2545))+((gconst39*x2545))+(((0.3)*gconst39*x2543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2546=((0.045)*gconst38);
IkReal x2547=((0.3)*gconst39);
CheckValue<IkReal> x2548=IKPowWithIntegerCheck((((pz*x2546))+((pz*x2547))+(((0.55)*pz))),-1);
if(!x2548.valid){
continue;
}
CheckValue<IkReal> x2549=IKPowWithIntegerCheck(pz,-1);
if(!x2549.valid){
continue;
}
if( IKabs(((x2548.value)*(((0.02475)+(((0.0135)*(gconst38*gconst38)))+(((0.167025)*gconst38))+(((0.087975)*gconst38*gconst39))+(((-0.0135)*(gconst39*gconst39)))+(((-0.01125)*gconst39)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2549.value)*(((0.55)+x2547+x2546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2548.value)*(((0.02475)+(((0.0135)*(gconst38*gconst38)))+(((0.167025)*gconst38))+(((0.087975)*gconst38*gconst39))+(((-0.0135)*(gconst39*gconst39)))+(((-0.01125)*gconst39))))))+IKsqr(((x2549.value)*(((0.55)+x2547+x2546))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2548.value)*(((0.02475)+(((0.0135)*(gconst38*gconst38)))+(((0.167025)*gconst38))+(((0.087975)*gconst38*gconst39))+(((-0.0135)*(gconst39*gconst39)))+(((-0.01125)*gconst39))))), ((x2549.value)*(((0.55)+x2547+x2546))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2550=IKcos(j1);
IkReal x2551=IKsin(j1);
IkReal x2552=((0.3)*gconst38);
IkReal x2553=((0.3)*gconst39);
IkReal x2554=((0.045)*x2550);
IkReal x2555=((0.045)*x2551);
IkReal x2556=(pz*x2551);
IkReal x2557=(pz*x2550);
evalcond[0]=((-0.55)+x2557+(((-0.045)*gconst38))+(((-1.0)*x2553)));
evalcond[1]=((0.045)+x2552+(((-0.045)*gconst39))+(((-1.0)*x2556)));
evalcond[2]=((-0.2125)+(((1.1)*x2557))+(((-1.0)*pp))+(((0.09)*x2556)));
evalcond[3]=(((x2551*x2553))+(((-1.0)*x2550*x2552))+(((0.55)*x2551))+((gconst38*x2555))+(((-1.0)*x2554))+((gconst39*x2554)));
evalcond[4]=((((-0.55)*x2550))+(((-1.0)*x2550*x2553))+pz+(((-1.0)*gconst38*x2554))+(((-1.0)*x2551*x2552))+(((-1.0)*x2555))+((gconst39*x2555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2558 = IKatan2WithCheck((gconst41*(((0.045)+(((-0.045)*gconst39))+(((0.3)*gconst38))))),(gconst41*(((0.55)+(((0.045)*gconst38))+(((0.3)*gconst39))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2558.valid){
continue;
}
j1array[0]=x2558.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2559=IKcos(j1);
IkReal x2560=IKsin(j1);
IkReal x2561=((0.3)*gconst38);
IkReal x2562=((0.3)*gconst39);
IkReal x2563=((0.045)*x2559);
IkReal x2564=((0.045)*x2560);
IkReal x2565=(pz*x2560);
IkReal x2566=(pz*x2559);
evalcond[0]=((-0.55)+x2566+(((-0.045)*gconst38))+(((-1.0)*x2562)));
evalcond[1]=((0.045)+x2561+(((-1.0)*x2565))+(((-0.045)*gconst39)));
evalcond[2]=((-0.2125)+(((1.1)*x2566))+(((-1.0)*pp))+(((0.09)*x2565)));
evalcond[3]=(((x2560*x2562))+(((0.55)*x2560))+(((-1.0)*x2563))+((gconst39*x2563))+(((-1.0)*x2559*x2561))+((gconst38*x2564)));
evalcond[4]=((((-0.55)*x2559))+(((-1.0)*x2564))+((gconst39*x2564))+(((-1.0)*x2560*x2561))+(((-1.0)*x2559*x2562))+pz+(((-1.0)*gconst38*x2563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2567=((2.40588235294118)*sj3);
op[0]=((1.0)+x2567);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x2567)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2568=((0.045)*sj3);
IkReal x2569=((0.3)*cj3);
CheckValue<IkReal> x2570=IKPowWithIntegerCheck((((pz*x2568))+((pz*x2569))+(((0.55)*pz))),-1);
if(!x2570.valid){
continue;
}
CheckValue<IkReal> x2571=IKPowWithIntegerCheck(pz,-1);
if(!x2571.valid){
continue;
}
if( IKabs(((x2570.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2571.value)*(((0.55)+x2569+x2568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2570.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x2571.value)*(((0.55)+x2569+x2568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2570.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x2571.value)*(((0.55)+x2569+x2568))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2572=IKcos(j1);
IkReal x2573=IKsin(j1);
IkReal x2574=((0.045)*cj3);
IkReal x2575=((0.3)*cj3);
IkReal x2576=(sj3*x2573);
IkReal x2577=(cj3*x2573);
IkReal x2578=(sj3*x2572);
IkReal x2579=(pz*x2573);
IkReal x2580=(pz*x2572);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2580+(((-1.0)*x2575)));
evalcond[1]=((0.045)+(((-1.0)*x2579))+(((-1.0)*x2574))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2580))+(((0.09)*x2579))+(((-1.0)*pp)));
evalcond[3]=(((x2573*x2575))+(((-0.3)*x2578))+((x2572*x2574))+(((0.55)*x2573))+(((-0.045)*x2572))+(((0.045)*x2576)));
evalcond[4]=(((x2573*x2574))+(((-0.55)*x2572))+(((-0.3)*x2576))+pz+(((-1.0)*x2572*x2575))+(((-0.045)*x2578))+(((-0.045)*x2573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2582=IKPowWithIntegerCheck(pz,-1);
if(!x2582.valid){
continue;
}
IkReal x2581=x2582.value;
if( IKabs(((0.111111111111111)*x2581*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2581*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2581*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x2581*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2581*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x2581*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2583=IKcos(j1);
IkReal x2584=IKsin(j1);
IkReal x2585=((0.045)*cj3);
IkReal x2586=((0.3)*cj3);
IkReal x2587=(sj3*x2584);
IkReal x2588=(cj3*x2584);
IkReal x2589=(sj3*x2583);
IkReal x2590=(pz*x2584);
IkReal x2591=(pz*x2583);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2591+(((-1.0)*x2586)));
evalcond[1]=((0.045)+(((-1.0)*x2590))+(((-1.0)*x2585))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2591))+(((-1.0)*pp))+(((0.09)*x2590)));
evalcond[3]=(((x2584*x2586))+(((0.55)*x2584))+(((-0.3)*x2589))+(((-0.045)*x2583))+((x2583*x2585))+(((0.045)*x2587)));
evalcond[4]=(((x2584*x2585))+(((-0.3)*x2587))+pz+(((-0.045)*x2589))+(((-0.045)*x2584))+(((-0.55)*x2583))+(((-1.0)*x2583*x2586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2592 = IKatan2WithCheck((gconst33*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst33*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2592.valid){
continue;
}
j1array[0]=x2592.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2593=IKcos(j1);
IkReal x2594=IKsin(j1);
IkReal x2595=((0.045)*cj3);
IkReal x2596=((0.3)*cj3);
IkReal x2597=(sj3*x2594);
IkReal x2598=(cj3*x2594);
IkReal x2599=(sj3*x2593);
IkReal x2600=(pz*x2594);
IkReal x2601=(pz*x2593);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2596))+x2601);
evalcond[1]=((0.045)+(((-1.0)*x2600))+(((-1.0)*x2595))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2601))+(((0.09)*x2600))+(((-1.0)*pp)));
evalcond[3]=(((x2594*x2596))+(((0.55)*x2594))+(((-0.3)*x2599))+((x2593*x2595))+(((-0.045)*x2593))+(((0.045)*x2597)));
evalcond[4]=(((x2594*x2595))+(((-1.0)*x2593*x2596))+(((-0.3)*x2597))+pz+(((-0.045)*x2599))+(((-0.045)*x2594))+(((-0.55)*x2593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2602=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2602;
evalcond[3]=x2602;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst42;
gconst42=IKsign((((cj0*px))+((py*sj0))));
IkReal x2603=(((cj0*px))+((py*sj0)));
IkReal x2604=IKsign(x2603);
IkReal x2605=((0.3)*x2604);
IkReal x2606=((0.045)*x2604);
dummyeval[0]=x2603;
dummyeval[1]=((IKabs(((((-1.0)*cj3*x2606))+((sj3*x2605))+x2606)))+(IKabs((((sj3*x2606))+(((0.55)*x2604))+((cj3*x2605))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2607=(cj0*px);
IkReal x2608=(py*sj0);
IkReal x2609=((36.2220411120167)*pp);
dummyeval[0]=(x2607+x2608);
dummyeval[1]=((((-1.0)*x2608*x2609))+((sj3*x2607))+((sj3*x2608))+(((-1.0)*x2607*x2609))+(((-7.28153581454315)*x2607))+(((-7.28153581454315)*x2608)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2610=(cj0*px);
IkReal x2611=((1.3840830449827)*pp);
IkReal x2612=((3.11349480968858)*sj3);
IkReal x2613=(py*sj0);
IkReal x2614=((1.0)*x2610);
IkReal x2615=((1.0)*x2613);
IkReal x2616=(x2615+x2614);
dummyeval[0]=((((-1.0)*x2610*x2612))+((x2610*x2611))+(((-1.0)*x2612*x2613))+((x2611*x2613))+(((-1.0)*x2616)));
dummyeval[1]=((-1.0)*x2616);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst43;
CheckValue<IkReal> x2617 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x2617.valid){
continue;
}
gconst43=((-1.0)*(x2617.value));
IkReal gconst44;
gconst44=IKsin(gconst43);
IkReal gconst45;
gconst45=IKcos(gconst43);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst43))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign((((gconst45*px))+((gconst44*py))));
dummyeval[0]=(((gconst45*px))+((gconst44*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2618=(gconst44*py);
IkReal x2619=((36.2220411120167)*pp);
IkReal x2620=(gconst45*px);
dummyeval[0]=(x2618+x2620);
dummyeval[1]=(((sj3*x2620))+(((-1.0)*x2619*x2620))+(((-1.0)*x2618*x2619))+(((-7.28153581454315)*x2620))+(((-7.28153581454315)*x2618))+((sj3*x2618)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2621=(gconst44*py);
IkReal x2622=((3.11349480968858)*sj3);
IkReal x2623=(gconst45*px);
IkReal x2624=((1.3840830449827)*pp);
IkReal x2625=((1.0)*x2623);
IkReal x2626=((1.0)*x2621);
IkReal x2627=(x2626+x2625);
dummyeval[0]=((((-1.0)*x2622*x2623))+((x2621*x2624))+((x2623*x2624))+(((-1.0)*x2627))+(((-1.0)*x2621*x2622)));
dummyeval[1]=((-1.0)*x2627);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2629 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
IkReal x2628=x2629.value;
j1array[0]=((-1.0)*x2628);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2628)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2630=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2630))+(((0.1275)*x2630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2631=(gconst45*px);
IkReal x2632=((0.138057984353428)*pp);
IkReal x2633=(gconst44*py);
IkReal x2634=((0.0414173953060285)*pp);
IkReal x2635=((0.310561435803037)*sj3);
CheckValue<IkReal> x2636=IKPowWithIntegerCheck(((((-0.099746893695352)*x2633))+(((-0.099746893695352)*x2631))+((x2632*x2633))+((x2631*x2632))+(((-1.0)*x2631*x2635))+(((-1.0)*x2633*x2635))),-1);
if(!x2636.valid){
continue;
}
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(((((-1.0)*x2631))+(((-1.0)*x2633))),-1);
if(!x2637.valid){
continue;
}
if( IKabs(((x2636.value)*(((-0.00832593189139439)+((cj3*x2634))+(((-1.0)*x2634))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2637.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2636.value)*(((-0.00832593189139439)+((cj3*x2634))+(((-1.0)*x2634))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2637.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2636.value)*(((-0.00832593189139439)+((cj3*x2634))+(((-1.0)*x2634))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2637.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2638=IKsin(j1);
IkReal x2639=IKcos(j1);
IkReal x2640=((0.3)*cj3);
IkReal x2641=((0.045)*cj3);
IkReal x2642=(gconst45*px);
IkReal x2643=(gconst44*py);
IkReal x2644=(sj3*x2638);
IkReal x2645=(sj3*x2639);
IkReal x2646=((1.1)*x2638);
IkReal x2647=(x2639*x2643);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2638*x2642))+((x2638*x2643))+(((-1.0)*x2640)));
evalcond[1]=((0.045)+(((-1.0)*x2641))+(((0.3)*sj3))+(((-1.0)*x2647))+(((-1.0)*x2639*x2642)));
evalcond[2]=((-0.2125)+(((0.09)*x2647))+(((-1.0)*pp))+(((0.09)*x2639*x2642))+((x2642*x2646))+((x2643*x2646)));
evalcond[3]=((((-0.92038656235619)*pp*x2639))+(((0.099746893695352)*x2638))+(((0.310561435803037)*x2644))+(((0.0254095720202485)*x2645))+(((-0.138057984353428)*pp*x2638))+(((-0.185020708697653)*x2639)));
evalcond[4]=((((0.045)*x2639))+(((0.55)*x2638))+((x2638*x2640))+(((0.045)*x2644))+(((-1.0)*x2642))+(((-1.0)*x2643))+(((-1.0)*x2639*x2641))+(((0.3)*x2645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2648=(gconst44*py);
IkReal x2649=((0.0254095720202485)*sj3);
IkReal x2650=((0.92038656235619)*pp);
IkReal x2651=(gconst45*px);
CheckValue<IkReal> x2652=IKPowWithIntegerCheck((x2648+x2651),-1);
if(!x2652.valid){
continue;
}
CheckValue<IkReal> x2653=IKPowWithIntegerCheck((((x2649*x2651))+(((-1.0)*x2650*x2651))+((x2648*x2649))+(((-0.185020708697653)*x2651))+(((-0.185020708697653)*x2648))+(((-1.0)*x2648*x2650))),-1);
if(!x2653.valid){
continue;
}
if( IKabs(((x2652.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2653.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2652.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2653.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2652.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2653.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2654=IKsin(j1);
IkReal x2655=IKcos(j1);
IkReal x2656=((0.3)*cj3);
IkReal x2657=((0.045)*cj3);
IkReal x2658=(gconst45*px);
IkReal x2659=(gconst44*py);
IkReal x2660=(sj3*x2654);
IkReal x2661=(sj3*x2655);
IkReal x2662=((1.1)*x2654);
IkReal x2663=(x2655*x2659);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2654*x2659))+((x2654*x2658))+(((-1.0)*x2656)));
evalcond[1]=((0.045)+(((-1.0)*x2655*x2658))+(((-1.0)*x2663))+(((0.3)*sj3))+(((-1.0)*x2657)));
evalcond[2]=((-0.2125)+((x2659*x2662))+((x2658*x2662))+(((0.09)*x2663))+(((-1.0)*pp))+(((0.09)*x2655*x2658)));
evalcond[3]=((((0.099746893695352)*x2654))+(((-0.92038656235619)*pp*x2655))+(((-0.138057984353428)*pp*x2654))+(((0.310561435803037)*x2660))+(((0.0254095720202485)*x2661))+(((-0.185020708697653)*x2655)));
evalcond[4]=((((0.55)*x2654))+((x2654*x2656))+(((0.045)*x2655))+(((0.3)*x2661))+(((-1.0)*x2655*x2657))+(((-1.0)*x2659))+(((-1.0)*x2658))+(((0.045)*x2660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2664 = IKatan2WithCheck((gconst61*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst61*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2664.valid){
continue;
}
j1array[0]=x2664.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2665=IKsin(j1);
IkReal x2666=IKcos(j1);
IkReal x2667=((0.3)*cj3);
IkReal x2668=((0.045)*cj3);
IkReal x2669=(gconst45*px);
IkReal x2670=(gconst44*py);
IkReal x2671=(sj3*x2665);
IkReal x2672=(sj3*x2666);
IkReal x2673=((1.1)*x2665);
IkReal x2674=(x2666*x2670);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2667))+((x2665*x2669))+((x2665*x2670)));
evalcond[1]=((0.045)+(((-1.0)*x2674))+(((-1.0)*x2668))+(((0.3)*sj3))+(((-1.0)*x2666*x2669)));
evalcond[2]=((-0.2125)+(((0.09)*x2674))+(((-1.0)*pp))+((x2669*x2673))+((x2670*x2673))+(((0.09)*x2666*x2669)));
evalcond[3]=((((-0.92038656235619)*pp*x2666))+(((0.099746893695352)*x2665))+(((-0.138057984353428)*pp*x2665))+(((0.310561435803037)*x2671))+(((-0.185020708697653)*x2666))+(((0.0254095720202485)*x2672)));
evalcond[4]=((((-1.0)*x2669))+(((-1.0)*x2670))+(((0.55)*x2665))+(((-1.0)*x2666*x2668))+(((0.3)*x2672))+((x2665*x2667))+(((0.045)*x2666))+(((0.045)*x2671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst46;
CheckValue<IkReal> x2675 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
gconst46=((3.14159265358979)+(((-1.0)*(x2675.value))));
IkReal gconst47;
gconst47=IKsin(gconst46);
IkReal gconst48;
gconst48=IKcos(gconst46);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst46))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign((((gconst47*py))+((gconst48*px))));
dummyeval[0]=(((gconst47*py))+((gconst48*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2676=(gconst47*py);
IkReal x2677=(gconst48*px);
IkReal x2678=((36.2220411120167)*pp);
dummyeval[0]=(x2677+x2676);
dummyeval[1]=((((-1.0)*x2677*x2678))+(((-1.0)*x2676*x2678))+((sj3*x2676))+((sj3*x2677))+(((-7.28153581454315)*x2676))+(((-7.28153581454315)*x2677)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2679=((1.3840830449827)*pp);
IkReal x2680=(gconst48*px);
IkReal x2681=(gconst47*py);
IkReal x2682=((3.11349480968858)*sj3);
IkReal x2683=((1.0)*x2680);
IkReal x2684=((1.0)*x2681);
IkReal x2685=(x2684+x2683);
dummyeval[0]=((((-1.0)*x2680*x2682))+(((-1.0)*x2681*x2682))+(((-1.0)*x2685))+((x2679*x2680))+((x2679*x2681)));
dummyeval[1]=((-1.0)*x2685);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2687 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2687.valid){
continue;
}
IkReal x2686=x2687.value;
j1array[0]=((-1.0)*x2686);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2686)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2688=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2688))+(((0.1275)*x2688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2689=(gconst47*py);
IkReal x2690=(gconst48*px);
IkReal x2691=((0.310561435803037)*sj3);
IkReal x2692=((0.138057984353428)*pp);
IkReal x2693=((0.0414173953060285)*pp);
CheckValue<IkReal> x2694=IKPowWithIntegerCheck((((x2689*x2692))+(((-1.0)*x2689*x2691))+(((-0.099746893695352)*x2690))+(((-0.099746893695352)*x2689))+((x2690*x2692))+(((-1.0)*x2690*x2691))),-1);
if(!x2694.valid){
continue;
}
CheckValue<IkReal> x2695=IKPowWithIntegerCheck(((((-1.0)*x2689))+(((-1.0)*x2690))),-1);
if(!x2695.valid){
continue;
}
if( IKabs(((x2694.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2693))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2693)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2695.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2694.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2693))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2693))))))+IKsqr(((x2695.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2694.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2693))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2693))))), ((x2695.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2696=IKsin(j1);
IkReal x2697=IKcos(j1);
IkReal x2698=((0.3)*cj3);
IkReal x2699=((0.045)*cj3);
IkReal x2700=(gconst48*px);
IkReal x2701=(gconst47*py);
IkReal x2702=(sj3*x2696);
IkReal x2703=(sj3*x2697);
IkReal x2704=((1.1)*x2696);
IkReal x2705=((0.09)*x2697);
IkReal x2706=((1.0)*x2697);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2698))+((x2696*x2701))+((x2696*x2700)));
evalcond[1]=((0.045)+(((-1.0)*x2699))+(((0.3)*sj3))+(((-1.0)*x2701*x2706))+(((-1.0)*x2700*x2706)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x2700*x2705))+((x2700*x2704))+((x2701*x2705))+((x2701*x2704)));
evalcond[3]=((((0.099746893695352)*x2696))+(((0.310561435803037)*x2702))+(((-0.92038656235619)*pp*x2697))+(((-0.185020708697653)*x2697))+(((-0.138057984353428)*pp*x2696))+(((0.0254095720202485)*x2703)));
evalcond[4]=((((0.55)*x2696))+(((0.3)*x2703))+(((0.045)*x2702))+(((0.045)*x2697))+(((-1.0)*x2697*x2699))+((x2696*x2698))+(((-1.0)*x2700))+(((-1.0)*x2701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2707=(gconst47*py);
IkReal x2708=((0.0254095720202485)*sj3);
IkReal x2709=(gconst48*px);
IkReal x2710=((0.92038656235619)*pp);
CheckValue<IkReal> x2711=IKPowWithIntegerCheck((x2709+x2707),-1);
if(!x2711.valid){
continue;
}
CheckValue<IkReal> x2712=IKPowWithIntegerCheck(((((-1.0)*x2709*x2710))+((x2707*x2708))+(((-0.185020708697653)*x2707))+(((-0.185020708697653)*x2709))+((x2708*x2709))+(((-1.0)*x2707*x2710))),-1);
if(!x2712.valid){
continue;
}
if( IKabs(((x2711.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2712.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2711.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2712.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2711.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2712.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2713=IKsin(j1);
IkReal x2714=IKcos(j1);
IkReal x2715=((0.3)*cj3);
IkReal x2716=((0.045)*cj3);
IkReal x2717=(gconst48*px);
IkReal x2718=(gconst47*py);
IkReal x2719=(sj3*x2713);
IkReal x2720=(sj3*x2714);
IkReal x2721=((1.1)*x2713);
IkReal x2722=((0.09)*x2714);
IkReal x2723=((1.0)*x2714);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2715))+((x2713*x2718))+((x2713*x2717)));
evalcond[1]=((0.045)+(((-1.0)*x2716))+(((-1.0)*x2718*x2723))+(((0.3)*sj3))+(((-1.0)*x2717*x2723)));
evalcond[2]=((-0.2125)+((x2717*x2721))+((x2717*x2722))+(((-1.0)*pp))+((x2718*x2722))+((x2718*x2721)));
evalcond[3]=((((-0.138057984353428)*pp*x2713))+(((0.310561435803037)*x2719))+(((-0.185020708697653)*x2714))+(((0.099746893695352)*x2713))+(((0.0254095720202485)*x2720))+(((-0.92038656235619)*pp*x2714)));
evalcond[4]=((((-1.0)*x2717))+(((-1.0)*x2718))+(((0.3)*x2720))+(((0.55)*x2713))+(((-1.0)*x2714*x2716))+((x2713*x2715))+(((0.045)*x2714))+(((0.045)*x2719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2724 = IKatan2WithCheck((gconst62*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst62*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2724.valid){
continue;
}
j1array[0]=x2724.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2725=IKsin(j1);
IkReal x2726=IKcos(j1);
IkReal x2727=((0.3)*cj3);
IkReal x2728=((0.045)*cj3);
IkReal x2729=(gconst48*px);
IkReal x2730=(gconst47*py);
IkReal x2731=(sj3*x2725);
IkReal x2732=(sj3*x2726);
IkReal x2733=((1.1)*x2725);
IkReal x2734=((0.09)*x2726);
IkReal x2735=((1.0)*x2726);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2725*x2730))+((x2725*x2729))+(((-1.0)*x2727)));
evalcond[1]=((0.045)+(((-1.0)*x2730*x2735))+(((0.3)*sj3))+(((-1.0)*x2728))+(((-1.0)*x2729*x2735)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x2730*x2733))+((x2730*x2734))+((x2729*x2734))+((x2729*x2733)));
evalcond[3]=((((-0.138057984353428)*pp*x2725))+(((-0.185020708697653)*x2726))+(((0.099746893695352)*x2725))+(((0.310561435803037)*x2731))+(((0.0254095720202485)*x2732))+(((-0.92038656235619)*pp*x2726)));
evalcond[4]=((((0.045)*x2731))+(((0.045)*x2726))+(((0.55)*x2725))+(((0.3)*x2732))+(((-1.0)*x2726*x2728))+(((-1.0)*x2730))+(((-1.0)*x2729))+((x2725*x2727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst49;
CheckValue<IkReal> x2736 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2736.valid){
continue;
}
gconst49=((-1.0)*(x2736.value));
IkReal gconst50;
gconst50=IKsin(gconst49);
IkReal gconst51;
gconst51=IKcos(gconst49);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst49))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign((((gconst50*py))+((gconst51*px))));
dummyeval[0]=(((gconst50*py))+((gconst51*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2737=(gconst51*px);
IkReal x2738=((36.2220411120167)*pp);
IkReal x2739=(gconst50*py);
dummyeval[0]=(x2737+x2739);
dummyeval[1]=((((-1.0)*x2737*x2738))+(((-1.0)*x2738*x2739))+((sj3*x2737))+((sj3*x2739))+(((-7.28153581454315)*x2737))+(((-7.28153581454315)*x2739)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2740=(gconst51*px);
IkReal x2741=((1.3840830449827)*pp);
IkReal x2742=((3.11349480968858)*sj3);
IkReal x2743=(gconst50*py);
IkReal x2744=((1.0)*x2743);
IkReal x2745=((1.0)*x2740);
IkReal x2746=(x2745+x2744);
dummyeval[0]=((((-1.0)*x2740*x2742))+((x2740*x2741))+((x2741*x2743))+(((-1.0)*x2746))+(((-1.0)*x2742*x2743)));
dummyeval[1]=((-1.0)*x2746);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2748 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2748.valid){
continue;
}
IkReal x2747=x2748.value;
j1array[0]=((-1.0)*x2747);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2747)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2749=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2749))+(((0.1275)*x2749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2750=((0.310561435803037)*sj3);
IkReal x2751=(gconst50*py);
IkReal x2752=(gconst51*px);
IkReal x2753=((0.138057984353428)*pp);
IkReal x2754=((0.0414173953060285)*pp);
CheckValue<IkReal> x2755=IKPowWithIntegerCheck((((x2752*x2753))+(((-1.0)*x2750*x2752))+(((-1.0)*x2750*x2751))+(((-0.099746893695352)*x2751))+(((-0.099746893695352)*x2752))+((x2751*x2753))),-1);
if(!x2755.valid){
continue;
}
CheckValue<IkReal> x2756=IKPowWithIntegerCheck(((((-1.0)*x2751))+(((-1.0)*x2752))),-1);
if(!x2756.valid){
continue;
}
if( IKabs(((x2755.value)*(((-0.00832593189139439)+((cj3*x2754))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2754))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2756.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2755.value)*(((-0.00832593189139439)+((cj3*x2754))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2754))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2756.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2755.value)*(((-0.00832593189139439)+((cj3*x2754))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2754))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2756.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2757=IKsin(j1);
IkReal x2758=IKcos(j1);
IkReal x2759=((0.045)*sj3);
IkReal x2760=((0.3)*cj3);
IkReal x2761=((0.045)*cj3);
IkReal x2762=(gconst51*px);
IkReal x2763=(gconst50*py);
IkReal x2764=(sj3*x2758);
IkReal x2765=((1.1)*x2757);
IkReal x2766=(x2758*x2763);
evalcond[0]=((-0.55)+((x2757*x2763))+((x2757*x2762))+(((-1.0)*x2760))+(((-1.0)*x2759)));
evalcond[1]=((0.045)+(((-1.0)*x2766))+(((-1.0)*x2758*x2762))+(((-1.0)*x2761))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x2766))+(((0.09)*x2758*x2762))+((x2762*x2765))+(((-1.0)*pp))+((x2763*x2765)));
evalcond[3]=((((0.0254095720202485)*x2764))+(((-0.138057984353428)*pp*x2757))+(((0.310561435803037)*sj3*x2757))+(((0.099746893695352)*x2757))+(((-0.92038656235619)*pp*x2758))+(((-0.185020708697653)*x2758)));
evalcond[4]=((((-1.0)*x2763))+(((-1.0)*x2762))+((x2757*x2760))+(((0.55)*x2757))+(((0.045)*x2758))+((x2757*x2759))+(((-1.0)*x2758*x2761))+(((0.3)*x2764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2767=(gconst50*py);
IkReal x2768=((0.0254095720202485)*sj3);
IkReal x2769=(gconst51*px);
IkReal x2770=((0.92038656235619)*pp);
CheckValue<IkReal> x2771=IKPowWithIntegerCheck((x2769+x2767),-1);
if(!x2771.valid){
continue;
}
CheckValue<IkReal> x2772=IKPowWithIntegerCheck(((((-1.0)*x2769*x2770))+((x2768*x2769))+(((-1.0)*x2767*x2770))+(((-0.185020708697653)*x2767))+(((-0.185020708697653)*x2769))+((x2767*x2768))),-1);
if(!x2772.valid){
continue;
}
if( IKabs(((x2771.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2772.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2771.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2772.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2771.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2772.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2773=IKsin(j1);
IkReal x2774=IKcos(j1);
IkReal x2775=((0.045)*sj3);
IkReal x2776=((0.3)*cj3);
IkReal x2777=((0.045)*cj3);
IkReal x2778=(gconst51*px);
IkReal x2779=(gconst50*py);
IkReal x2780=(sj3*x2774);
IkReal x2781=((1.1)*x2773);
IkReal x2782=(x2774*x2779);
evalcond[0]=((-0.55)+(((-1.0)*x2776))+(((-1.0)*x2775))+((x2773*x2778))+((x2773*x2779)));
evalcond[1]=((0.045)+(((-1.0)*x2774*x2778))+(((-1.0)*x2777))+(((-1.0)*x2782))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x2779*x2781))+((x2778*x2781))+(((0.09)*x2782))+(((-1.0)*pp))+(((0.09)*x2774*x2778)));
evalcond[3]=((((0.099746893695352)*x2773))+(((0.0254095720202485)*x2780))+(((-0.138057984353428)*pp*x2773))+(((0.310561435803037)*sj3*x2773))+(((-0.92038656235619)*pp*x2774))+(((-0.185020708697653)*x2774)));
evalcond[4]=((((-1.0)*x2778))+(((-1.0)*x2779))+(((0.045)*x2774))+(((0.3)*x2780))+(((-1.0)*x2774*x2777))+(((0.55)*x2773))+((x2773*x2776))+((x2773*x2775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2783 = IKatan2WithCheck((gconst63*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst63*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2783.valid){
continue;
}
j1array[0]=x2783.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2784=IKsin(j1);
IkReal x2785=IKcos(j1);
IkReal x2786=((0.045)*sj3);
IkReal x2787=((0.3)*cj3);
IkReal x2788=((0.045)*cj3);
IkReal x2789=(gconst51*px);
IkReal x2790=(gconst50*py);
IkReal x2791=(sj3*x2785);
IkReal x2792=((1.1)*x2784);
IkReal x2793=(x2785*x2790);
evalcond[0]=((-0.55)+(((-1.0)*x2786))+(((-1.0)*x2787))+((x2784*x2790))+((x2784*x2789)));
evalcond[1]=((0.045)+(((-1.0)*x2788))+(((-1.0)*x2793))+(((0.3)*sj3))+(((-1.0)*x2785*x2789)));
evalcond[2]=((-0.2125)+(((0.09)*x2793))+((x2789*x2792))+((x2790*x2792))+(((-1.0)*pp))+(((0.09)*x2785*x2789)));
evalcond[3]=((((0.310561435803037)*sj3*x2784))+(((-0.92038656235619)*pp*x2785))+(((-0.138057984353428)*pp*x2784))+(((-0.185020708697653)*x2785))+(((0.099746893695352)*x2784))+(((0.0254095720202485)*x2791)));
evalcond[4]=((((0.55)*x2784))+((x2784*x2786))+((x2784*x2787))+(((-1.0)*x2785*x2788))+(((-1.0)*x2790))+(((-1.0)*x2789))+(((0.3)*x2791))+(((0.045)*x2785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst52;
CheckValue<IkReal> x2794 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2794.valid){
continue;
}
gconst52=((3.14159265358979)+(((-1.0)*(x2794.value))));
IkReal gconst53;
gconst53=IKsin(gconst52);
IkReal gconst54;
gconst54=IKcos(gconst52);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst52))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign((((gconst54*px))+((gconst53*py))));
dummyeval[0]=(((gconst54*px))+((gconst53*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2795=(gconst54*px);
IkReal x2796=(gconst53*py);
IkReal x2797=((36.2220411120167)*pp);
dummyeval[0]=(x2796+x2795);
dummyeval[1]=((((-1.0)*x2795*x2797))+(((-7.28153581454315)*x2796))+(((-7.28153581454315)*x2795))+(((-1.0)*x2796*x2797))+((sj3*x2796))+((sj3*x2795)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2798=(gconst54*px);
IkReal x2799=((1.3840830449827)*pp);
IkReal x2800=((3.11349480968858)*sj3);
IkReal x2801=(gconst53*py);
IkReal x2802=((1.0)*x2801);
IkReal x2803=((1.0)*x2798);
IkReal x2804=(x2802+x2803);
dummyeval[0]=((((-1.0)*x2804))+(((-1.0)*x2800*x2801))+((x2799*x2801))+(((-1.0)*x2798*x2800))+((x2798*x2799)));
dummyeval[1]=((-1.0)*x2804);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2806 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2806.valid){
continue;
}
IkReal x2805=x2806.value;
j1array[0]=((-1.0)*x2805);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2805)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2807=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2807))+(((0.1275)*x2807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2808=((0.138057984353428)*pp);
IkReal x2809=(gconst53*py);
IkReal x2810=(gconst54*px);
IkReal x2811=((0.0414173953060285)*pp);
IkReal x2812=((0.310561435803037)*sj3);
CheckValue<IkReal> x2813=IKPowWithIntegerCheck(((((-1.0)*x2810*x2812))+(((-1.0)*x2809*x2812))+(((-0.099746893695352)*x2809))+((x2808*x2809))+(((-0.099746893695352)*x2810))+((x2808*x2810))),-1);
if(!x2813.valid){
continue;
}
CheckValue<IkReal> x2814=IKPowWithIntegerCheck(((((-1.0)*x2809))+(((-1.0)*x2810))),-1);
if(!x2814.valid){
continue;
}
if( IKabs(((x2813.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2811))+((cj3*x2811))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2814.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2813.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2811))+((cj3*x2811))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2814.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2813.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2811))+((cj3*x2811))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2814.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2815=IKsin(j1);
IkReal x2816=IKcos(j1);
IkReal x2817=((0.3)*cj3);
IkReal x2818=((0.045)*cj3);
IkReal x2819=(gconst54*px);
IkReal x2820=(gconst53*py);
IkReal x2821=(sj3*x2815);
IkReal x2822=(sj3*x2816);
IkReal x2823=((1.1)*x2815);
IkReal x2824=(x2816*x2820);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2815*x2820))+(((-1.0)*x2817))+((x2815*x2819)));
evalcond[1]=((0.045)+(((-1.0)*x2816*x2819))+(((-1.0)*x2824))+(((-1.0)*x2818))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x2819*x2823))+(((0.09)*x2824))+(((-1.0)*pp))+(((0.09)*x2816*x2819))+((x2820*x2823)));
evalcond[3]=((((0.310561435803037)*x2821))+(((0.0254095720202485)*x2822))+(((-0.92038656235619)*pp*x2816))+(((-0.138057984353428)*pp*x2815))+(((-0.185020708697653)*x2816))+(((0.099746893695352)*x2815)));
evalcond[4]=((((-1.0)*x2819))+(((0.045)*x2821))+(((-1.0)*x2820))+(((0.3)*x2822))+((x2815*x2817))+(((0.045)*x2816))+(((0.55)*x2815))+(((-1.0)*x2816*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2825=((0.92038656235619)*pp);
IkReal x2826=(gconst54*px);
IkReal x2827=(gconst53*py);
IkReal x2828=((0.0254095720202485)*sj3);
CheckValue<IkReal> x2829=IKPowWithIntegerCheck((x2826+x2827),-1);
if(!x2829.valid){
continue;
}
CheckValue<IkReal> x2830=IKPowWithIntegerCheck(((((-1.0)*x2825*x2826))+(((-1.0)*x2825*x2827))+(((-0.185020708697653)*x2826))+(((-0.185020708697653)*x2827))+((x2827*x2828))+((x2826*x2828))),-1);
if(!x2830.valid){
continue;
}
if( IKabs(((x2829.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2830.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2829.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2830.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2829.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2830.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2831=IKsin(j1);
IkReal x2832=IKcos(j1);
IkReal x2833=((0.3)*cj3);
IkReal x2834=((0.045)*cj3);
IkReal x2835=(gconst54*px);
IkReal x2836=(gconst53*py);
IkReal x2837=(sj3*x2831);
IkReal x2838=(sj3*x2832);
IkReal x2839=((1.1)*x2831);
IkReal x2840=(x2832*x2836);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2833))+((x2831*x2836))+((x2831*x2835)));
evalcond[1]=((0.045)+(((-1.0)*x2834))+(((-1.0)*x2832*x2835))+(((0.3)*sj3))+(((-1.0)*x2840)));
evalcond[2]=((-0.2125)+((x2836*x2839))+(((0.09)*x2832*x2835))+(((0.09)*x2840))+(((-1.0)*pp))+((x2835*x2839)));
evalcond[3]=((((0.0254095720202485)*x2838))+(((0.099746893695352)*x2831))+(((-0.92038656235619)*pp*x2832))+(((-0.138057984353428)*pp*x2831))+(((0.310561435803037)*x2837))+(((-0.185020708697653)*x2832)));
evalcond[4]=((((0.3)*x2838))+(((-1.0)*x2836))+(((-1.0)*x2835))+(((0.045)*x2837))+(((0.045)*x2832))+((x2831*x2833))+(((-1.0)*x2832*x2834))+(((0.55)*x2831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2841 = IKatan2WithCheck((gconst64*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst64*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2841.valid){
continue;
}
j1array[0]=x2841.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2842=IKsin(j1);
IkReal x2843=IKcos(j1);
IkReal x2844=((0.3)*cj3);
IkReal x2845=((0.045)*cj3);
IkReal x2846=(gconst54*px);
IkReal x2847=(gconst53*py);
IkReal x2848=(sj3*x2842);
IkReal x2849=(sj3*x2843);
IkReal x2850=((1.1)*x2842);
IkReal x2851=(x2843*x2847);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2842*x2847))+((x2842*x2846))+(((-1.0)*x2844)));
evalcond[1]=((0.045)+(((-1.0)*x2843*x2846))+(((0.3)*sj3))+(((-1.0)*x2851))+(((-1.0)*x2845)));
evalcond[2]=((-0.2125)+(((0.09)*x2851))+((x2847*x2850))+((x2846*x2850))+(((0.09)*x2843*x2846))+(((-1.0)*pp)));
evalcond[3]=((((-0.185020708697653)*x2843))+(((0.099746893695352)*x2842))+(((0.0254095720202485)*x2849))+(((-0.92038656235619)*pp*x2843))+(((0.310561435803037)*x2848))+(((-0.138057984353428)*pp*x2842)));
evalcond[4]=((((-1.0)*x2843*x2845))+(((0.045)*x2848))+(((0.045)*x2843))+((x2842*x2844))+(((0.55)*x2842))+(((0.3)*x2849))+(((-1.0)*x2846))+(((-1.0)*x2847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst55;
CheckValue<IkReal> x2852 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2852.valid){
continue;
}
gconst55=((-1.0)*(x2852.value));
IkReal gconst56;
gconst56=IKsin(gconst55);
IkReal gconst57;
gconst57=IKcos(gconst55);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst55))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign((((gconst57*px))+((gconst56*py))));
dummyeval[0]=(((gconst57*px))+((gconst56*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2853=(gconst57*px);
IkReal x2854=(gconst56*py);
IkReal x2855=((36.2220411120167)*pp);
dummyeval[0]=(x2853+x2854);
dummyeval[1]=((((-7.28153581454315)*x2853))+(((-7.28153581454315)*x2854))+((sj3*x2853))+((sj3*x2854))+(((-1.0)*x2854*x2855))+(((-1.0)*x2853*x2855)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2856=(gconst57*px);
IkReal x2857=((1.3840830449827)*pp);
IkReal x2858=((3.11349480968858)*sj3);
IkReal x2859=(gconst56*py);
IkReal x2860=((1.0)*x2859);
IkReal x2861=((1.0)*x2856);
IkReal x2862=(x2860+x2861);
dummyeval[0]=((((-1.0)*x2862))+(((-1.0)*x2856*x2858))+((x2856*x2857))+((x2857*x2859))+(((-1.0)*x2858*x2859)));
dummyeval[1]=((-1.0)*x2862);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2864 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2864.valid){
continue;
}
IkReal x2863=x2864.value;
j1array[0]=((-1.0)*x2863);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2863)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2865=IKcos(j1);
evalcond[0]=((((0.1275)*x2865))+(((0.30675)*sj3*x2865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2866=(gconst56*py);
IkReal x2867=((0.138057984353428)*pp);
IkReal x2868=((0.310561435803037)*sj3);
IkReal x2869=(gconst57*px);
IkReal x2870=((0.0414173953060285)*pp);
CheckValue<IkReal> x2871=IKPowWithIntegerCheck((((x2867*x2869))+((x2866*x2867))+(((-0.099746893695352)*x2869))+(((-0.099746893695352)*x2866))+(((-1.0)*x2868*x2869))+(((-1.0)*x2866*x2868))),-1);
if(!x2871.valid){
continue;
}
CheckValue<IkReal> x2872=IKPowWithIntegerCheck(((((-1.0)*x2866))+(((-1.0)*x2869))),-1);
if(!x2872.valid){
continue;
}
if( IKabs(((x2871.value)*(((-0.00832593189139439)+(((-1.0)*x2870))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x2870))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2872.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2871.value)*(((-0.00832593189139439)+(((-1.0)*x2870))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x2870))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2872.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2871.value)*(((-0.00832593189139439)+(((-1.0)*x2870))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x2870))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2872.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2873=IKsin(j1);
IkReal x2874=IKcos(j1);
IkReal x2875=((0.3)*cj3);
IkReal x2876=(gconst57*px);
IkReal x2877=((0.045)*cj3);
IkReal x2878=((0.3)*sj3);
IkReal x2879=(gconst56*py);
IkReal x2880=(sj3*x2873);
IkReal x2881=((0.09)*x2874);
IkReal x2882=((1.1)*x2873);
IkReal x2883=((1.0)*x2874);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2875))+((x2873*x2879))+((x2873*x2876)));
evalcond[1]=((0.045)+(((-1.0)*x2877))+(((-1.0)*x2876*x2883))+(((-1.0)*x2879*x2883))+x2878);
evalcond[2]=((-0.2125)+((x2876*x2882))+((x2876*x2881))+((x2879*x2881))+((x2879*x2882))+(((-1.0)*pp)));
evalcond[3]=((((-0.92038656235619)*pp*x2874))+(((0.310561435803037)*x2880))+(((-0.138057984353428)*pp*x2873))+(((-0.185020708697653)*x2874))+(((0.0254095720202485)*sj3*x2874))+(((0.099746893695352)*x2873)));
evalcond[4]=((((0.045)*x2874))+(((0.55)*x2873))+(((-1.0)*x2879))+(((-1.0)*x2876))+((x2873*x2875))+((x2874*x2878))+(((-1.0)*x2874*x2877))+(((0.045)*x2880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2884=(gconst57*px);
IkReal x2885=(gconst56*py);
IkReal x2886=((0.0254095720202485)*sj3);
IkReal x2887=((0.92038656235619)*pp);
CheckValue<IkReal> x2888=IKPowWithIntegerCheck((x2884+x2885),-1);
if(!x2888.valid){
continue;
}
CheckValue<IkReal> x2889=IKPowWithIntegerCheck((((x2884*x2886))+((x2885*x2886))+(((-0.185020708697653)*x2884))+(((-0.185020708697653)*x2885))+(((-1.0)*x2885*x2887))+(((-1.0)*x2884*x2887))),-1);
if(!x2889.valid){
continue;
}
if( IKabs(((x2888.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2889.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2888.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2889.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2888.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2889.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2890=IKsin(j1);
IkReal x2891=IKcos(j1);
IkReal x2892=((0.3)*cj3);
IkReal x2893=(gconst57*px);
IkReal x2894=((0.045)*cj3);
IkReal x2895=((0.3)*sj3);
IkReal x2896=(gconst56*py);
IkReal x2897=(sj3*x2890);
IkReal x2898=((0.09)*x2891);
IkReal x2899=((1.1)*x2890);
IkReal x2900=((1.0)*x2891);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2890*x2896))+((x2890*x2893))+(((-1.0)*x2892)));
evalcond[1]=((0.045)+(((-1.0)*x2896*x2900))+(((-1.0)*x2893*x2900))+(((-1.0)*x2894))+x2895);
evalcond[2]=((-0.2125)+((x2893*x2899))+((x2893*x2898))+(((-1.0)*pp))+((x2896*x2899))+((x2896*x2898)));
evalcond[3]=((((-0.92038656235619)*pp*x2891))+(((0.099746893695352)*x2890))+(((-0.138057984353428)*pp*x2890))+(((0.310561435803037)*x2897))+(((-0.185020708697653)*x2891))+(((0.0254095720202485)*sj3*x2891)));
evalcond[4]=(((x2891*x2895))+((x2890*x2892))+(((-1.0)*x2891*x2894))+(((0.55)*x2890))+(((-1.0)*x2893))+(((-1.0)*x2896))+(((0.045)*x2897))+(((0.045)*x2891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2901 = IKatan2WithCheck((gconst65*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst65*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2901.valid){
continue;
}
j1array[0]=x2901.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2902=IKsin(j1);
IkReal x2903=IKcos(j1);
IkReal x2904=((0.3)*cj3);
IkReal x2905=(gconst57*px);
IkReal x2906=((0.045)*cj3);
IkReal x2907=((0.3)*sj3);
IkReal x2908=(gconst56*py);
IkReal x2909=(sj3*x2902);
IkReal x2910=((0.09)*x2903);
IkReal x2911=((1.1)*x2902);
IkReal x2912=((1.0)*x2903);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2902*x2908))+((x2902*x2905))+(((-1.0)*x2904)));
evalcond[1]=((0.045)+(((-1.0)*x2906))+(((-1.0)*x2905*x2912))+(((-1.0)*x2908*x2912))+x2907);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x2905*x2911))+((x2905*x2910))+((x2908*x2911))+((x2908*x2910)));
evalcond[3]=((((-0.92038656235619)*pp*x2903))+(((0.310561435803037)*x2909))+(((0.0254095720202485)*sj3*x2903))+(((-0.185020708697653)*x2903))+(((0.099746893695352)*x2902))+(((-0.138057984353428)*pp*x2902)));
evalcond[4]=(((x2902*x2904))+(((0.55)*x2902))+(((0.045)*x2903))+(((0.045)*x2909))+((x2903*x2907))+(((-1.0)*x2903*x2906))+(((-1.0)*x2908))+(((-1.0)*x2905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst58;
CheckValue<IkReal> x2913 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2913.valid){
continue;
}
gconst58=((3.14159265358979)+(((-1.0)*(x2913.value))));
IkReal gconst59;
gconst59=IKsin(gconst58);
IkReal gconst60;
gconst60=IKcos(gconst58);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst58))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign((((gconst60*px))+((gconst59*py))));
dummyeval[0]=(((gconst60*px))+((gconst59*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2914=(gconst60*px);
IkReal x2915=(gconst59*py);
IkReal x2916=((36.2220411120167)*pp);
dummyeval[0]=(x2914+x2915);
dummyeval[1]=(((sj3*x2915))+((sj3*x2914))+(((-1.0)*x2915*x2916))+(((-7.28153581454315)*x2915))+(((-7.28153581454315)*x2914))+(((-1.0)*x2914*x2916)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2917=(gconst60*px);
IkReal x2918=(gconst59*py);
IkReal x2919=((3.11349480968858)*sj3);
IkReal x2920=((1.3840830449827)*pp);
IkReal x2921=((1.0)*x2917);
IkReal x2922=((1.0)*x2918);
IkReal x2923=(x2921+x2922);
dummyeval[0]=((((-1.0)*x2917*x2919))+(((-1.0)*x2923))+((x2917*x2920))+((x2918*x2920))+(((-1.0)*x2918*x2919)));
dummyeval[1]=((-1.0)*x2923);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2925 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2925.valid){
continue;
}
IkReal x2924=x2925.value;
j1array[0]=((-1.0)*x2924);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2924)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2926=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2926))+(((0.1275)*x2926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2927=(gconst60*px);
IkReal x2928=(gconst59*py);
IkReal x2929=((0.138057984353428)*pp);
IkReal x2930=((0.0414173953060285)*pp);
IkReal x2931=((0.310561435803037)*sj3);
CheckValue<IkReal> x2932=IKPowWithIntegerCheck(((((-1.0)*x2927*x2931))+((x2928*x2929))+(((-0.099746893695352)*x2928))+(((-0.099746893695352)*x2927))+(((-1.0)*x2928*x2931))+((x2927*x2929))),-1);
if(!x2932.valid){
continue;
}
CheckValue<IkReal> x2933=IKPowWithIntegerCheck(((((-1.0)*x2928))+(((-1.0)*x2927))),-1);
if(!x2933.valid){
continue;
}
if( IKabs(((x2932.value)*(((-0.00832593189139439)+((cj3*x2930))+(((-1.0)*x2930))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2933.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2932.value)*(((-0.00832593189139439)+((cj3*x2930))+(((-1.0)*x2930))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2933.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2932.value)*(((-0.00832593189139439)+((cj3*x2930))+(((-1.0)*x2930))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2933.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2934=IKsin(j1);
IkReal x2935=IKcos(j1);
IkReal x2936=((0.045)*sj3);
IkReal x2937=((0.3)*cj3);
IkReal x2938=((0.045)*cj3);
IkReal x2939=(gconst59*py);
IkReal x2940=(gconst60*px);
IkReal x2941=((1.0)*x2935);
IkReal x2942=(sj3*x2935);
IkReal x2943=((0.09)*x2935);
IkReal x2944=(x2934*x2940);
evalcond[0]=((-0.55)+(((-1.0)*x2936))+(((-1.0)*x2937))+((x2934*x2939))+x2944);
evalcond[1]=((0.045)+(((-1.0)*x2940*x2941))+(((-1.0)*x2939*x2941))+(((-1.0)*x2938))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x2939*x2943))+((x2940*x2943))+(((-1.0)*pp))+(((1.1)*x2944))+(((1.1)*x2934*x2939)));
evalcond[3]=((((-0.92038656235619)*pp*x2935))+(((0.0254095720202485)*x2942))+(((0.310561435803037)*sj3*x2934))+(((-0.185020708697653)*x2935))+(((0.099746893695352)*x2934))+(((-0.138057984353428)*pp*x2934)));
evalcond[4]=((((-1.0)*x2940))+(((0.55)*x2934))+(((0.3)*x2942))+(((0.045)*x2935))+(((-1.0)*x2935*x2938))+(((-1.0)*x2939))+((x2934*x2937))+((x2934*x2936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2945=(gconst60*px);
IkReal x2946=(gconst59*py);
IkReal x2947=((0.0254095720202485)*sj3);
IkReal x2948=((0.92038656235619)*pp);
CheckValue<IkReal> x2949=IKPowWithIntegerCheck((x2946+x2945),-1);
if(!x2949.valid){
continue;
}
CheckValue<IkReal> x2950=IKPowWithIntegerCheck((((x2946*x2947))+((x2945*x2947))+(((-0.185020708697653)*x2946))+(((-0.185020708697653)*x2945))+(((-1.0)*x2946*x2948))+(((-1.0)*x2945*x2948))),-1);
if(!x2950.valid){
continue;
}
if( IKabs(((x2949.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2950.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2949.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2950.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2949.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2950.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2951=IKsin(j1);
IkReal x2952=IKcos(j1);
IkReal x2953=((0.045)*sj3);
IkReal x2954=((0.3)*cj3);
IkReal x2955=((0.045)*cj3);
IkReal x2956=(gconst59*py);
IkReal x2957=(gconst60*px);
IkReal x2958=((1.0)*x2952);
IkReal x2959=(sj3*x2952);
IkReal x2960=((0.09)*x2952);
IkReal x2961=(x2951*x2957);
evalcond[0]=((-0.55)+((x2951*x2956))+(((-1.0)*x2954))+(((-1.0)*x2953))+x2961);
evalcond[1]=((0.045)+(((-1.0)*x2955))+(((-1.0)*x2956*x2958))+(((0.3)*sj3))+(((-1.0)*x2957*x2958)));
evalcond[2]=((-0.2125)+(((1.1)*x2951*x2956))+((x2956*x2960))+(((-1.0)*pp))+((x2957*x2960))+(((1.1)*x2961)));
evalcond[3]=((((-0.92038656235619)*pp*x2952))+(((0.0254095720202485)*x2959))+(((-0.185020708697653)*x2952))+(((0.310561435803037)*sj3*x2951))+(((-0.138057984353428)*pp*x2951))+(((0.099746893695352)*x2951)));
evalcond[4]=((((-1.0)*x2957))+(((-1.0)*x2956))+(((0.3)*x2959))+((x2951*x2954))+((x2951*x2953))+(((-1.0)*x2952*x2955))+(((0.55)*x2951))+(((0.045)*x2952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2962 = IKatan2WithCheck((gconst66*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst66*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2962.valid){
continue;
}
j1array[0]=x2962.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2963=IKsin(j1);
IkReal x2964=IKcos(j1);
IkReal x2965=((0.045)*sj3);
IkReal x2966=((0.3)*cj3);
IkReal x2967=((0.045)*cj3);
IkReal x2968=(gconst59*py);
IkReal x2969=(gconst60*px);
IkReal x2970=((1.0)*x2964);
IkReal x2971=(sj3*x2964);
IkReal x2972=((0.09)*x2964);
IkReal x2973=(x2963*x2969);
evalcond[0]=((-0.55)+(((-1.0)*x2965))+(((-1.0)*x2966))+((x2963*x2968))+x2973);
evalcond[1]=((0.045)+(((-1.0)*x2968*x2970))+(((-1.0)*x2969*x2970))+(((-1.0)*x2967))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2963*x2968))+((x2968*x2972))+((x2969*x2972))+(((-1.0)*pp))+(((1.1)*x2973)));
evalcond[3]=((((0.099746893695352)*x2963))+(((0.0254095720202485)*x2971))+(((0.310561435803037)*sj3*x2963))+(((-0.92038656235619)*pp*x2964))+(((-0.185020708697653)*x2964))+(((-0.138057984353428)*pp*x2963)));
evalcond[4]=((((-1.0)*x2969))+(((-1.0)*x2968))+(((0.045)*x2964))+(((0.3)*x2971))+(((0.55)*x2963))+(((-1.0)*x2964*x2967))+((x2963*x2965))+((x2963*x2966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2975 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2975.valid){
continue;
}
IkReal x2974=x2975.value;
j1array[0]=((-1.0)*x2974);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2974)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2976=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2976))+(((0.1275)*x2976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2978 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2978.valid){
continue;
}
IkReal x2977=x2978.value;
j1array[0]=((-1.0)*x2977);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2977)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2979=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2979))+(((0.1275)*x2979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2981 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2981.valid){
continue;
}
IkReal x2980=x2981.value;
j1array[0]=((-1.0)*x2980);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2980)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2982=IKcos(j1);
evalcond[0]=((((0.1275)*x2982))+(((0.30675)*sj3*x2982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2984 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2984.valid){
continue;
}
IkReal x2983=x2984.value;
j1array[0]=((-1.0)*x2983);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2983)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2985=IKcos(j1);
evalcond[0]=((((0.1275)*x2985))+(((0.30675)*sj3*x2985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2987 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2987.valid){
continue;
}
IkReal x2986=x2987.value;
j1array[0]=((-1.0)*x2986);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2986)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2988=IKcos(j1);
evalcond[0]=((((0.1275)*x2988))+(((0.30675)*sj3*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2989=(py*sj0);
IkReal x2990=((0.310561435803037)*sj3);
IkReal x2991=((0.0414173953060285)*pp);
IkReal x2992=(cj0*px);
IkReal x2993=((0.138057984353428)*pp);
CheckValue<IkReal> x2994=IKPowWithIntegerCheck(((((-0.099746893695352)*x2992))+((x2992*x2993))+(((-0.099746893695352)*x2989))+(((-1.0)*x2989*x2990))+((x2989*x2993))+(((-1.0)*x2990*x2992))),-1);
if(!x2994.valid){
continue;
}
CheckValue<IkReal> x2995=IKPowWithIntegerCheck(((((-1.0)*x2989))+(((-1.0)*x2992))),-1);
if(!x2995.valid){
continue;
}
if( IKabs(((x2994.value)*(((-0.00832593189139439)+(((-1.0)*x2991))+((cj3*x2991))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2995.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2994.value)*(((-0.00832593189139439)+(((-1.0)*x2991))+((cj3*x2991))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2995.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2994.value)*(((-0.00832593189139439)+(((-1.0)*x2991))+((cj3*x2991))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2995.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2996=IKsin(j1);
IkReal x2997=IKcos(j1);
IkReal x2998=((0.045)*sj3);
IkReal x2999=((0.3)*cj3);
IkReal x3000=((0.045)*cj3);
IkReal x3001=(cj0*px);
IkReal x3002=(py*sj0);
IkReal x3003=((1.0)*x2997);
IkReal x3004=(sj3*x2997);
IkReal x3005=((0.09)*x2997);
IkReal x3006=((1.1)*x2996);
evalcond[0]=((-0.55)+(((-1.0)*x2999))+(((-1.0)*x2998))+((x2996*x3002))+((x2996*x3001)));
evalcond[1]=((0.045)+(((-1.0)*x3002*x3003))+(((-1.0)*x3000))+(((0.3)*sj3))+(((-1.0)*x3001*x3003)));
evalcond[2]=((-0.2125)+((x3001*x3006))+((x3001*x3005))+(((-1.0)*pp))+((x3002*x3006))+((x3002*x3005)));
evalcond[3]=((((0.0254095720202485)*x3004))+(((0.099746893695352)*x2996))+(((-0.185020708697653)*x2997))+(((-0.92038656235619)*pp*x2997))+(((0.310561435803037)*sj3*x2996))+(((-0.138057984353428)*pp*x2996)));
evalcond[4]=((((-1.0)*x2997*x3000))+(((-1.0)*x3001))+(((-1.0)*x3002))+((x2996*x2998))+((x2996*x2999))+(((0.3)*x3004))+(((0.55)*x2996))+(((0.045)*x2997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3007=(cj0*px);
IkReal x3008=(py*sj0);
IkReal x3009=((0.0254095720202485)*sj3);
IkReal x3010=((0.92038656235619)*pp);
CheckValue<IkReal> x3011=IKPowWithIntegerCheck((x3007+x3008),-1);
if(!x3011.valid){
continue;
}
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(((((-0.185020708697653)*x3008))+(((-0.185020708697653)*x3007))+((x3008*x3009))+((x3007*x3009))+(((-1.0)*x3007*x3010))+(((-1.0)*x3008*x3010))),-1);
if(!x3012.valid){
continue;
}
if( IKabs(((x3011.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3012.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3011.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3012.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3011.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3012.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3013=IKsin(j1);
IkReal x3014=IKcos(j1);
IkReal x3015=((0.045)*sj3);
IkReal x3016=((0.3)*cj3);
IkReal x3017=((0.045)*cj3);
IkReal x3018=(cj0*px);
IkReal x3019=(py*sj0);
IkReal x3020=((1.0)*x3014);
IkReal x3021=(sj3*x3014);
IkReal x3022=((0.09)*x3014);
IkReal x3023=((1.1)*x3013);
evalcond[0]=((-0.55)+((x3013*x3019))+((x3013*x3018))+(((-1.0)*x3016))+(((-1.0)*x3015)));
evalcond[1]=((0.045)+(((-1.0)*x3018*x3020))+(((-1.0)*x3019*x3020))+(((-1.0)*x3017))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3019*x3023))+((x3019*x3022))+(((-1.0)*pp))+((x3018*x3022))+((x3018*x3023)));
evalcond[3]=((((-0.185020708697653)*x3014))+(((0.310561435803037)*sj3*x3013))+(((-0.138057984353428)*pp*x3013))+(((-0.92038656235619)*pp*x3014))+(((0.0254095720202485)*x3021))+(((0.099746893695352)*x3013)));
evalcond[4]=(((x3013*x3016))+((x3013*x3015))+(((0.3)*x3021))+(((0.045)*x3014))+(((-1.0)*x3014*x3017))+(((0.55)*x3013))+(((-1.0)*x3019))+(((-1.0)*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3024 = IKatan2WithCheck((gconst42*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst42*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3024.valid){
continue;
}
j1array[0]=x3024.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3025=IKsin(j1);
IkReal x3026=IKcos(j1);
IkReal x3027=((0.045)*sj3);
IkReal x3028=((0.3)*cj3);
IkReal x3029=((0.045)*cj3);
IkReal x3030=(cj0*px);
IkReal x3031=(py*sj0);
IkReal x3032=((1.0)*x3026);
IkReal x3033=(sj3*x3026);
IkReal x3034=((0.09)*x3026);
IkReal x3035=((1.1)*x3025);
evalcond[0]=((-0.55)+(((-1.0)*x3027))+(((-1.0)*x3028))+((x3025*x3030))+((x3025*x3031)));
evalcond[1]=((0.045)+(((-1.0)*x3029))+(((-1.0)*x3030*x3032))+(((0.3)*sj3))+(((-1.0)*x3031*x3032)));
evalcond[2]=((-0.2125)+((x3030*x3034))+((x3030*x3035))+(((-1.0)*pp))+((x3031*x3035))+((x3031*x3034)));
evalcond[3]=((((-0.92038656235619)*pp*x3026))+(((0.0254095720202485)*x3033))+(((-0.138057984353428)*pp*x3025))+(((-0.185020708697653)*x3026))+(((0.310561435803037)*sj3*x3025))+(((0.099746893695352)*x3025)));
evalcond[4]=((((0.3)*x3033))+(((-1.0)*x3026*x3029))+(((0.045)*x3026))+(((-1.0)*x3031))+(((-1.0)*x3030))+(((0.55)*x3025))+((x3025*x3027))+((x3025*x3028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3036=(px*sj0);
IkReal x3037=(cj0*py);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x3036+(((-1.0)*x3037)));
evalcond[3]=(x3037+(((-1.0)*x3036)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst67;
gconst67=IKsign((((cj0*px))+((py*sj0))));
IkReal x3038=(((cj0*px))+((py*sj0)));
IkReal x3039=IKsign(x3038);
IkReal x3040=((0.3)*x3039);
IkReal x3041=((0.045)*x3039);
dummyeval[0]=x3038;
dummyeval[1]=((IKabs(((((-1.0)*x3041))+(((-1.0)*sj3*x3040))+((cj3*x3041)))))+(IKabs((((sj3*x3041))+(((0.55)*x3039))+((cj3*x3040))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3042=(cj0*px);
IkReal x3043=(py*sj0);
IkReal x3044=((36.2220411120167)*pp);
dummyeval[0]=(x3043+x3042);
dummyeval[1]=((((-1.0)*x3042*x3044))+((sj3*x3042))+((sj3*x3043))+(((-7.28153581454315)*x3042))+(((-7.28153581454315)*x3043))+(((-1.0)*x3043*x3044)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3045=(cj0*px);
IkReal x3046=((1.3840830449827)*pp);
IkReal x3047=((3.11349480968858)*sj3);
IkReal x3048=(py*sj0);
dummyeval[0]=((((-1.0)*x3045*x3047))+((x3046*x3048))+(((-1.0)*x3047*x3048))+(((-1.0)*x3048))+(((-1.0)*x3045))+((x3045*x3046)));
dummyeval[1]=(x3048+x3045);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst68;
CheckValue<IkReal> x3049 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3049.valid){
continue;
}
gconst68=((-1.0)*(x3049.value));
IkReal gconst69;
gconst69=IKsin(gconst68);
IkReal gconst70;
gconst70=IKcos(gconst68);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst68))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst86;
gconst86=IKsign((((gconst69*py))+((gconst70*px))));
dummyeval[0]=(((gconst69*py))+((gconst70*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3050=(gconst69*py);
IkReal x3051=((36.2220411120167)*pp);
IkReal x3052=(gconst70*px);
dummyeval[0]=(x3052+x3050);
dummyeval[1]=((((-7.28153581454315)*x3052))+(((-7.28153581454315)*x3050))+(((-1.0)*x3051*x3052))+(((-1.0)*x3050*x3051))+((sj3*x3052))+((sj3*x3050)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3053=((1.3840830449827)*pp);
IkReal x3054=(gconst69*py);
IkReal x3055=(gconst70*px);
IkReal x3056=((3.11349480968858)*sj3);
dummyeval[0]=((((-1.0)*x3055*x3056))+(((-1.0)*x3054))+(((-1.0)*x3055))+((x3053*x3054))+((x3053*x3055))+(((-1.0)*x3054*x3056)));
dummyeval[1]=(x3054+x3055);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3058 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3058.valid){
continue;
}
IkReal x3057=x3058.value;
j1array[0]=((-1.0)*x3057);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3057)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3059=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x3059))+(((-0.1275)*x3059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3060=(gconst69*py);
IkReal x3061=((0.310561435803037)*sj3);
IkReal x3062=(gconst70*px);
IkReal x3063=((0.0414173953060285)*pp);
IkReal x3064=((0.138057984353428)*pp);
CheckValue<IkReal> x3065=IKPowWithIntegerCheck(((((-1.0)*x3060*x3061))+(((-1.0)*x3061*x3062))+(((-0.099746893695352)*x3062))+(((-0.099746893695352)*x3060))+((x3060*x3064))+((x3062*x3064))),-1);
if(!x3065.valid){
continue;
}
CheckValue<IkReal> x3066=IKPowWithIntegerCheck((x3062+x3060),-1);
if(!x3066.valid){
continue;
}
if( IKabs(((x3065.value)*(((-0.00832593189139439)+((cj3*x3063))+(((-1.0)*x3063))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3066.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3065.value)*(((-0.00832593189139439)+((cj3*x3063))+(((-1.0)*x3063))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3066.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3065.value)*(((-0.00832593189139439)+((cj3*x3063))+(((-1.0)*x3063))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3066.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3067=IKsin(j1);
IkReal x3068=IKcos(j1);
IkReal x3069=(gconst69*py);
IkReal x3070=((0.3)*cj3);
IkReal x3071=((0.045)*cj3);
IkReal x3072=((0.045)*sj3);
IkReal x3073=(gconst70*px);
IkReal x3074=(sj3*x3068);
IkReal x3075=((0.09)*x3068);
IkReal x3076=((1.1)*x3067);
evalcond[0]=((-0.55)+(((-1.0)*x3070))+(((-1.0)*x3072))+((x3067*x3069))+((x3067*x3073)));
evalcond[1]=((0.045)+(((-1.0)*x3071))+((x3068*x3069))+((x3068*x3073))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x3073*x3075))+(((-1.0)*pp))+(((-1.0)*x3069*x3075))+((x3069*x3076))+((x3073*x3076)));
evalcond[3]=((((-0.92038656235619)*pp*x3068))+(((0.138057984353428)*pp*x3067))+(((-0.099746893695352)*x3067))+(((0.0254095720202485)*x3074))+(((-0.310561435803037)*sj3*x3067))+(((-0.185020708697653)*x3068)));
evalcond[4]=((((-1.0)*x3073))+(((-1.0)*x3069))+(((-0.3)*x3074))+((x3068*x3071))+(((-0.045)*x3068))+((x3067*x3072))+((x3067*x3070))+(((0.55)*x3067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3077=(gconst70*px);
IkReal x3078=(gconst69*py);
IkReal x3079=((0.92038656235619)*pp);
IkReal x3080=((0.0254095720202485)*sj3);
CheckValue<IkReal> x3081=IKPowWithIntegerCheck((x3077+x3078),-1);
if(!x3081.valid){
continue;
}
CheckValue<IkReal> x3082=IKPowWithIntegerCheck(((((-1.0)*x3078*x3079))+(((-0.185020708697653)*x3077))+(((-0.185020708697653)*x3078))+((x3077*x3080))+((x3078*x3080))+(((-1.0)*x3077*x3079))),-1);
if(!x3082.valid){
continue;
}
if( IKabs(((x3081.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3082.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3081.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3082.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3081.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3082.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3083=IKsin(j1);
IkReal x3084=IKcos(j1);
IkReal x3085=(gconst69*py);
IkReal x3086=((0.3)*cj3);
IkReal x3087=((0.045)*cj3);
IkReal x3088=((0.045)*sj3);
IkReal x3089=(gconst70*px);
IkReal x3090=(sj3*x3084);
IkReal x3091=((0.09)*x3084);
IkReal x3092=((1.1)*x3083);
evalcond[0]=((-0.55)+(((-1.0)*x3086))+(((-1.0)*x3088))+((x3083*x3089))+((x3083*x3085)));
evalcond[1]=((0.045)+(((-1.0)*x3087))+((x3084*x3089))+((x3084*x3085))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x3085*x3091))+(((-1.0)*x3089*x3091))+((x3085*x3092))+(((-1.0)*pp))+((x3089*x3092)));
evalcond[3]=((((-0.310561435803037)*sj3*x3083))+(((-0.185020708697653)*x3084))+(((0.0254095720202485)*x3090))+(((0.138057984353428)*pp*x3083))+(((-0.099746893695352)*x3083))+(((-0.92038656235619)*pp*x3084)));
evalcond[4]=(((x3083*x3088))+((x3083*x3086))+(((0.55)*x3083))+(((-1.0)*x3085))+(((-1.0)*x3089))+(((-0.045)*x3084))+((x3084*x3087))+(((-0.3)*x3090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3093 = IKatan2WithCheck((gconst86*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst86*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3093.valid){
continue;
}
j1array[0]=x3093.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3094=IKsin(j1);
IkReal x3095=IKcos(j1);
IkReal x3096=(gconst69*py);
IkReal x3097=((0.3)*cj3);
IkReal x3098=((0.045)*cj3);
IkReal x3099=((0.045)*sj3);
IkReal x3100=(gconst70*px);
IkReal x3101=(sj3*x3095);
IkReal x3102=((0.09)*x3095);
IkReal x3103=((1.1)*x3094);
evalcond[0]=((-0.55)+((x3094*x3100))+(((-1.0)*x3099))+(((-1.0)*x3097))+((x3094*x3096)));
evalcond[1]=((0.045)+(((-1.0)*x3098))+(((0.3)*sj3))+((x3095*x3100))+((x3095*x3096)));
evalcond[2]=((-0.2125)+((x3096*x3103))+(((-1.0)*pp))+(((-1.0)*x3100*x3102))+(((-1.0)*x3096*x3102))+((x3100*x3103)));
evalcond[3]=((((-0.92038656235619)*pp*x3095))+(((-0.185020708697653)*x3095))+(((0.138057984353428)*pp*x3094))+(((0.0254095720202485)*x3101))+(((-0.310561435803037)*sj3*x3094))+(((-0.099746893695352)*x3094)));
evalcond[4]=((((-1.0)*x3100))+(((-0.3)*x3101))+(((-0.045)*x3095))+(((0.55)*x3094))+((x3095*x3098))+(((-1.0)*x3096))+((x3094*x3099))+((x3094*x3097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst71;
CheckValue<IkReal> x3104 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3104.valid){
continue;
}
gconst71=((3.14159265358979)+(((-1.0)*(x3104.value))));
IkReal gconst72;
gconst72=IKsin(gconst71);
IkReal gconst73;
gconst73=IKcos(gconst71);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst71))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst87;
gconst87=IKsign((((gconst72*py))+((gconst73*px))));
dummyeval[0]=(((gconst72*py))+((gconst73*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3105=(gconst72*py);
IkReal x3106=(gconst73*px);
IkReal x3107=((36.2220411120167)*pp);
dummyeval[0]=(x3105+x3106);
dummyeval[1]=(((sj3*x3106))+((sj3*x3105))+(((-7.28153581454315)*x3106))+(((-7.28153581454315)*x3105))+(((-1.0)*x3106*x3107))+(((-1.0)*x3105*x3107)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3108=(gconst73*px);
IkReal x3109=((3.11349480968858)*sj3);
IkReal x3110=(gconst72*py);
IkReal x3111=((1.3840830449827)*pp);
dummyeval[0]=((((-1.0)*x3108))+(((-1.0)*x3109*x3110))+(((-1.0)*x3110))+((x3108*x3111))+((x3110*x3111))+(((-1.0)*x3108*x3109)));
dummyeval[1]=(x3108+x3110);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3113 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3113.valid){
continue;
}
IkReal x3112=x3113.value;
j1array[0]=((-1.0)*x3112);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3112)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3114=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x3114))+(((-0.1275)*x3114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3115=(gconst73*px);
IkReal x3116=((0.138057984353428)*pp);
IkReal x3117=(gconst72*py);
IkReal x3118=((0.310561435803037)*sj3);
IkReal x3119=((0.0414173953060285)*pp);
CheckValue<IkReal> x3120=IKPowWithIntegerCheck(((((-1.0)*x3115*x3118))+(((-1.0)*x3117*x3118))+(((-0.099746893695352)*x3115))+(((-0.099746893695352)*x3117))+((x3116*x3117))+((x3115*x3116))),-1);
if(!x3120.valid){
continue;
}
CheckValue<IkReal> x3121=IKPowWithIntegerCheck((x3117+x3115),-1);
if(!x3121.valid){
continue;
}
if( IKabs(((x3120.value)*(((-0.00832593189139439)+((cj3*x3119))+(((-1.0)*x3119))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3121.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3120.value)*(((-0.00832593189139439)+((cj3*x3119))+(((-1.0)*x3119))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3121.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3120.value)*(((-0.00832593189139439)+((cj3*x3119))+(((-1.0)*x3119))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3121.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3122=IKsin(j1);
IkReal x3123=IKcos(j1);
IkReal x3124=((0.045)*sj3);
IkReal x3125=((0.3)*cj3);
IkReal x3126=((0.045)*cj3);
IkReal x3127=(gconst73*px);
IkReal x3128=(gconst72*py);
IkReal x3129=(sj3*x3123);
IkReal x3130=((0.09)*x3123);
IkReal x3131=((1.1)*x3122);
evalcond[0]=((-0.55)+(((-1.0)*x3124))+(((-1.0)*x3125))+((x3122*x3127))+((x3122*x3128)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x3126))+((x3123*x3127))+((x3123*x3128)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x3128*x3130))+((x3127*x3131))+(((-1.0)*x3127*x3130))+((x3128*x3131)));
evalcond[3]=((((-0.92038656235619)*pp*x3123))+(((0.138057984353428)*pp*x3122))+(((0.0254095720202485)*x3129))+(((-0.310561435803037)*sj3*x3122))+(((-0.185020708697653)*x3123))+(((-0.099746893695352)*x3122)));
evalcond[4]=((((-0.045)*x3123))+(((-0.3)*x3129))+(((-1.0)*x3128))+(((-1.0)*x3127))+(((0.55)*x3122))+((x3122*x3125))+((x3122*x3124))+((x3123*x3126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3132=(gconst72*py);
IkReal x3133=((0.92038656235619)*pp);
IkReal x3134=(gconst73*px);
IkReal x3135=((0.0254095720202485)*sj3);
CheckValue<IkReal> x3136=IKPowWithIntegerCheck((x3134+x3132),-1);
if(!x3136.valid){
continue;
}
CheckValue<IkReal> x3137=IKPowWithIntegerCheck((((x3132*x3135))+(((-1.0)*x3132*x3133))+(((-1.0)*x3133*x3134))+((x3134*x3135))+(((-0.185020708697653)*x3132))+(((-0.185020708697653)*x3134))),-1);
if(!x3137.valid){
continue;
}
if( IKabs(((x3136.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3137.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3136.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3137.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3136.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3137.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3138=IKsin(j1);
IkReal x3139=IKcos(j1);
IkReal x3140=((0.045)*sj3);
IkReal x3141=((0.3)*cj3);
IkReal x3142=((0.045)*cj3);
IkReal x3143=(gconst73*px);
IkReal x3144=(gconst72*py);
IkReal x3145=(sj3*x3139);
IkReal x3146=((0.09)*x3139);
IkReal x3147=((1.1)*x3138);
evalcond[0]=((-0.55)+(((-1.0)*x3141))+(((-1.0)*x3140))+((x3138*x3143))+((x3138*x3144)));
evalcond[1]=((0.045)+(((-1.0)*x3142))+((x3139*x3144))+((x3139*x3143))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x3143*x3146))+((x3144*x3147))+(((-1.0)*x3144*x3146))+((x3143*x3147))+(((-1.0)*pp)));
evalcond[3]=((((-0.92038656235619)*pp*x3139))+(((0.138057984353428)*pp*x3138))+(((-0.310561435803037)*sj3*x3138))+(((-0.185020708697653)*x3139))+(((-0.099746893695352)*x3138))+(((0.0254095720202485)*x3145)));
evalcond[4]=((((-1.0)*x3143))+(((-1.0)*x3144))+(((-0.045)*x3139))+((x3139*x3142))+(((0.55)*x3138))+(((-0.3)*x3145))+((x3138*x3140))+((x3138*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3148 = IKatan2WithCheck((gconst87*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst87*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3148.valid){
continue;
}
j1array[0]=x3148.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3149=IKsin(j1);
IkReal x3150=IKcos(j1);
IkReal x3151=((0.045)*sj3);
IkReal x3152=((0.3)*cj3);
IkReal x3153=((0.045)*cj3);
IkReal x3154=(gconst73*px);
IkReal x3155=(gconst72*py);
IkReal x3156=(sj3*x3150);
IkReal x3157=((0.09)*x3150);
IkReal x3158=((1.1)*x3149);
evalcond[0]=((-0.55)+(((-1.0)*x3151))+(((-1.0)*x3152))+((x3149*x3154))+((x3149*x3155)));
evalcond[1]=((0.045)+(((-1.0)*x3153))+((x3150*x3154))+((x3150*x3155))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3155*x3158))+((x3154*x3158))+(((-1.0)*pp))+(((-1.0)*x3154*x3157))+(((-1.0)*x3155*x3157)));
evalcond[3]=((((-0.185020708697653)*x3150))+(((0.138057984353428)*pp*x3149))+(((0.0254095720202485)*x3156))+(((-0.92038656235619)*pp*x3150))+(((-0.099746893695352)*x3149))+(((-0.310561435803037)*sj3*x3149)));
evalcond[4]=((((-0.3)*x3156))+((x3149*x3151))+((x3149*x3152))+(((-1.0)*x3155))+(((-1.0)*x3154))+(((0.55)*x3149))+((x3150*x3153))+(((-0.045)*x3150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst74;
CheckValue<IkReal> x3159 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3159.valid){
continue;
}
gconst74=((-1.0)*(x3159.value));
IkReal gconst75;
gconst75=IKsin(gconst74);
IkReal gconst76;
gconst76=IKcos(gconst74);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst74))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst88;
gconst88=IKsign((((gconst76*px))+((gconst75*py))));
dummyeval[0]=(((gconst76*px))+((gconst75*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3160=((36.2220411120167)*pp);
IkReal x3161=(gconst76*px);
IkReal x3162=(gconst75*py);
dummyeval[0]=(x3162+x3161);
dummyeval[1]=(((sj3*x3162))+((sj3*x3161))+(((-1.0)*x3160*x3161))+(((-1.0)*x3160*x3162))+(((-7.28153581454315)*x3162))+(((-7.28153581454315)*x3161)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3163=(gconst75*py);
IkReal x3164=(gconst76*px);
IkReal x3165=((3.11349480968858)*sj3);
IkReal x3166=((1.3840830449827)*pp);
dummyeval[0]=((((-1.0)*x3163*x3165))+(((-1.0)*x3164))+(((-1.0)*x3163))+(((-1.0)*x3164*x3165))+((x3163*x3166))+((x3164*x3166)));
dummyeval[1]=(x3164+x3163);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3168 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3168.valid){
continue;
}
IkReal x3167=x3168.value;
j1array[0]=((-1.0)*x3167);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3167)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3169=IKcos(j1);
evalcond[0]=((((-0.1275)*x3169))+(((-0.30675)*sj3*x3169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3170=(gconst75*py);
IkReal x3171=((0.310561435803037)*sj3);
IkReal x3172=((0.0414173953060285)*pp);
IkReal x3173=(gconst76*px);
IkReal x3174=((0.138057984353428)*pp);
CheckValue<IkReal> x3175=IKPowWithIntegerCheck((((x3170*x3174))+((x3173*x3174))+(((-0.099746893695352)*x3173))+(((-0.099746893695352)*x3170))+(((-1.0)*x3171*x3173))+(((-1.0)*x3170*x3171))),-1);
if(!x3175.valid){
continue;
}
CheckValue<IkReal> x3176=IKPowWithIntegerCheck((x3170+x3173),-1);
if(!x3176.valid){
continue;
}
if( IKabs(((x3175.value)*(((-0.00832593189139439)+((cj3*x3172))+(((-1.0)*x3172))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3176.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3175.value)*(((-0.00832593189139439)+((cj3*x3172))+(((-1.0)*x3172))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3176.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3175.value)*(((-0.00832593189139439)+((cj3*x3172))+(((-1.0)*x3172))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3176.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3177=IKsin(j1);
IkReal x3178=IKcos(j1);
IkReal x3179=((0.3)*sj3);
IkReal x3180=((0.3)*cj3);
IkReal x3181=((0.045)*cj3);
IkReal x3182=((0.045)*sj3);
IkReal x3183=(gconst75*py);
IkReal x3184=(gconst76*px);
IkReal x3185=((0.09)*x3178);
IkReal x3186=(x3177*x3184);
evalcond[0]=((-0.55)+x3186+((x3177*x3183))+(((-1.0)*x3182))+(((-1.0)*x3180)));
evalcond[1]=((0.045)+x3179+((x3178*x3184))+((x3178*x3183))+(((-1.0)*x3181)));
evalcond[2]=((-0.2125)+(((-1.0)*x3184*x3185))+(((1.1)*x3177*x3183))+(((-1.0)*x3183*x3185))+(((1.1)*x3186))+(((-1.0)*pp)));
evalcond[3]=((((-0.099746893695352)*x3177))+(((0.0254095720202485)*sj3*x3178))+(((-0.92038656235619)*pp*x3178))+(((0.138057984353428)*pp*x3177))+(((-0.310561435803037)*sj3*x3177))+(((-0.185020708697653)*x3178)));
evalcond[4]=((((-0.045)*x3178))+(((0.55)*x3177))+((x3178*x3181))+((x3177*x3180))+((x3177*x3182))+(((-1.0)*x3184))+(((-1.0)*x3183))+(((-1.0)*x3178*x3179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3187=(gconst76*px);
IkReal x3188=((0.0254095720202485)*sj3);
IkReal x3189=((0.92038656235619)*pp);
IkReal x3190=(gconst75*py);
CheckValue<IkReal> x3191=IKPowWithIntegerCheck((x3187+x3190),-1);
if(!x3191.valid){
continue;
}
CheckValue<IkReal> x3192=IKPowWithIntegerCheck(((((-1.0)*x3187*x3189))+(((-0.185020708697653)*x3190))+(((-0.185020708697653)*x3187))+((x3188*x3190))+((x3187*x3188))+(((-1.0)*x3189*x3190))),-1);
if(!x3192.valid){
continue;
}
if( IKabs(((x3191.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3192.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3191.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3192.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3191.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3192.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3193=IKsin(j1);
IkReal x3194=IKcos(j1);
IkReal x3195=((0.3)*sj3);
IkReal x3196=((0.3)*cj3);
IkReal x3197=((0.045)*cj3);
IkReal x3198=((0.045)*sj3);
IkReal x3199=(gconst75*py);
IkReal x3200=(gconst76*px);
IkReal x3201=((0.09)*x3194);
IkReal x3202=(x3193*x3200);
evalcond[0]=((-0.55)+x3202+(((-1.0)*x3196))+(((-1.0)*x3198))+((x3193*x3199)));
evalcond[1]=((0.045)+x3195+((x3194*x3199))+((x3194*x3200))+(((-1.0)*x3197)));
evalcond[2]=((-0.2125)+(((-1.0)*x3199*x3201))+(((-1.0)*x3200*x3201))+(((-1.0)*pp))+(((1.1)*x3193*x3199))+(((1.1)*x3202)));
evalcond[3]=((((0.138057984353428)*pp*x3193))+(((0.0254095720202485)*sj3*x3194))+(((-0.92038656235619)*pp*x3194))+(((-0.185020708697653)*x3194))+(((-0.310561435803037)*sj3*x3193))+(((-0.099746893695352)*x3193)));
evalcond[4]=((((0.55)*x3193))+(((-1.0)*x3200))+(((-0.045)*x3194))+((x3194*x3197))+(((-1.0)*x3199))+((x3193*x3198))+((x3193*x3196))+(((-1.0)*x3194*x3195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3203 = IKatan2WithCheck((gconst88*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst88*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3203.valid){
continue;
}
j1array[0]=x3203.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3204=IKsin(j1);
IkReal x3205=IKcos(j1);
IkReal x3206=((0.3)*sj3);
IkReal x3207=((0.3)*cj3);
IkReal x3208=((0.045)*cj3);
IkReal x3209=((0.045)*sj3);
IkReal x3210=(gconst75*py);
IkReal x3211=(gconst76*px);
IkReal x3212=((0.09)*x3205);
IkReal x3213=(x3204*x3211);
evalcond[0]=((-0.55)+x3213+(((-1.0)*x3207))+(((-1.0)*x3209))+((x3204*x3210)));
evalcond[1]=((0.045)+((x3205*x3211))+((x3205*x3210))+x3206+(((-1.0)*x3208)));
evalcond[2]=((-0.2125)+(((-1.0)*x3211*x3212))+(((1.1)*x3213))+(((-1.0)*x3210*x3212))+(((-1.0)*pp))+(((1.1)*x3204*x3210)));
evalcond[3]=((((0.138057984353428)*pp*x3204))+(((0.0254095720202485)*sj3*x3205))+(((-0.310561435803037)*sj3*x3204))+(((-0.92038656235619)*pp*x3205))+(((-0.099746893695352)*x3204))+(((-0.185020708697653)*x3205)));
evalcond[4]=(((x3204*x3209))+((x3204*x3207))+((x3205*x3208))+(((-1.0)*x3210))+(((-1.0)*x3211))+(((0.55)*x3204))+(((-0.045)*x3205))+(((-1.0)*x3205*x3206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst77;
CheckValue<IkReal> x3214 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3214.valid){
continue;
}
gconst77=((3.14159265358979)+(((-1.0)*(x3214.value))));
IkReal gconst78;
gconst78=IKsin(gconst77);
IkReal gconst79;
gconst79=IKcos(gconst77);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst77))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst89;
gconst89=IKsign((((gconst78*py))+((gconst79*px))));
dummyeval[0]=(((gconst78*py))+((gconst79*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3215=(gconst78*py);
IkReal x3216=((36.2220411120167)*pp);
IkReal x3217=(gconst79*px);
dummyeval[0]=(x3215+x3217);
dummyeval[1]=((((-1.0)*x3215*x3216))+(((-1.0)*x3216*x3217))+(((-7.28153581454315)*x3215))+(((-7.28153581454315)*x3217))+((sj3*x3215))+((sj3*x3217)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3218=(gconst79*px);
IkReal x3219=((3.11349480968858)*sj3);
IkReal x3220=(gconst78*py);
IkReal x3221=((1.3840830449827)*pp);
dummyeval[0]=(((x3218*x3221))+(((-1.0)*x3218))+((x3220*x3221))+(((-1.0)*x3218*x3219))+(((-1.0)*x3220))+(((-1.0)*x3219*x3220)));
dummyeval[1]=(x3218+x3220);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3223 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3223.valid){
continue;
}
IkReal x3222=x3223.value;
j1array[0]=((-1.0)*x3222);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3222)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3224=IKcos(j1);
evalcond[0]=((((-0.1275)*x3224))+(((-0.30675)*sj3*x3224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3225=(gconst78*py);
IkReal x3226=(gconst79*px);
IkReal x3227=((0.138057984353428)*pp);
IkReal x3228=((0.310561435803037)*sj3);
IkReal x3229=((0.0414173953060285)*pp);
CheckValue<IkReal> x3230=IKPowWithIntegerCheck(((((-0.099746893695352)*x3225))+(((-0.099746893695352)*x3226))+(((-1.0)*x3225*x3228))+((x3226*x3227))+((x3225*x3227))+(((-1.0)*x3226*x3228))),-1);
if(!x3230.valid){
continue;
}
CheckValue<IkReal> x3231=IKPowWithIntegerCheck((x3225+x3226),-1);
if(!x3231.valid){
continue;
}
if( IKabs(((x3230.value)*(((-0.00832593189139439)+((cj3*x3229))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x3229)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3231.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3230.value)*(((-0.00832593189139439)+((cj3*x3229))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x3229))))))+IKsqr(((x3231.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3230.value)*(((-0.00832593189139439)+((cj3*x3229))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x3229))))), ((x3231.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3232=IKsin(j1);
IkReal x3233=IKcos(j1);
IkReal x3234=((0.3)*cj3);
IkReal x3235=((0.045)*cj3);
IkReal x3236=(gconst79*px);
IkReal x3237=(gconst78*py);
IkReal x3238=(sj3*x3232);
IkReal x3239=(sj3*x3233);
IkReal x3240=((0.09)*x3233);
IkReal x3241=((1.1)*x3232);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3232*x3237))+((x3232*x3236))+(((-1.0)*x3234)));
evalcond[1]=((0.045)+(((-1.0)*x3235))+(((0.3)*sj3))+((x3233*x3236))+((x3233*x3237)));
evalcond[2]=((-0.2125)+(((-1.0)*x3236*x3240))+((x3236*x3241))+(((-1.0)*x3237*x3240))+((x3237*x3241))+(((-1.0)*pp)));
evalcond[3]=((((0.138057984353428)*pp*x3232))+(((-0.310561435803037)*x3238))+(((0.0254095720202485)*x3239))+(((-0.92038656235619)*pp*x3233))+(((-0.099746893695352)*x3232))+(((-0.185020708697653)*x3233)));
evalcond[4]=(((x3232*x3234))+(((-0.3)*x3239))+(((-1.0)*x3236))+(((-1.0)*x3237))+(((0.045)*x3238))+(((-0.045)*x3233))+(((0.55)*x3232))+((x3233*x3235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3242=(gconst79*px);
IkReal x3243=((0.0254095720202485)*sj3);
IkReal x3244=(gconst78*py);
IkReal x3245=((0.92038656235619)*pp);
CheckValue<IkReal> x3246=IKPowWithIntegerCheck((x3242+x3244),-1);
if(!x3246.valid){
continue;
}
CheckValue<IkReal> x3247=IKPowWithIntegerCheck(((((-0.185020708697653)*x3242))+(((-0.185020708697653)*x3244))+(((-1.0)*x3244*x3245))+(((-1.0)*x3242*x3245))+((x3242*x3243))+((x3243*x3244))),-1);
if(!x3247.valid){
continue;
}
if( IKabs(((x3246.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3247.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3246.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3247.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3246.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3247.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3248=IKsin(j1);
IkReal x3249=IKcos(j1);
IkReal x3250=((0.3)*cj3);
IkReal x3251=((0.045)*cj3);
IkReal x3252=(gconst79*px);
IkReal x3253=(gconst78*py);
IkReal x3254=(sj3*x3248);
IkReal x3255=(sj3*x3249);
IkReal x3256=((0.09)*x3249);
IkReal x3257=((1.1)*x3248);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3248*x3253))+((x3248*x3252))+(((-1.0)*x3250)));
evalcond[1]=((0.045)+((x3249*x3253))+((x3249*x3252))+(((0.3)*sj3))+(((-1.0)*x3251)));
evalcond[2]=((-0.2125)+(((-1.0)*x3253*x3256))+(((-1.0)*pp))+((x3252*x3257))+(((-1.0)*x3252*x3256))+((x3253*x3257)));
evalcond[3]=((((-0.185020708697653)*x3249))+(((0.138057984353428)*pp*x3248))+(((-0.099746893695352)*x3248))+(((-0.92038656235619)*pp*x3249))+(((-0.310561435803037)*x3254))+(((0.0254095720202485)*x3255)));
evalcond[4]=((((0.045)*x3254))+((x3249*x3251))+(((0.55)*x3248))+((x3248*x3250))+(((-0.045)*x3249))+(((-1.0)*x3253))+(((-1.0)*x3252))+(((-0.3)*x3255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3258 = IKatan2WithCheck((gconst89*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst89*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3258.valid){
continue;
}
j1array[0]=x3258.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3259=IKsin(j1);
IkReal x3260=IKcos(j1);
IkReal x3261=((0.3)*cj3);
IkReal x3262=((0.045)*cj3);
IkReal x3263=(gconst79*px);
IkReal x3264=(gconst78*py);
IkReal x3265=(sj3*x3259);
IkReal x3266=(sj3*x3260);
IkReal x3267=((0.09)*x3260);
IkReal x3268=((1.1)*x3259);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3261))+((x3259*x3264))+((x3259*x3263)));
evalcond[1]=((0.045)+(((-1.0)*x3262))+(((0.3)*sj3))+((x3260*x3264))+((x3260*x3263)));
evalcond[2]=((-0.2125)+((x3263*x3268))+(((-1.0)*x3264*x3267))+(((-1.0)*pp))+(((-1.0)*x3263*x3267))+((x3264*x3268)));
evalcond[3]=((((0.138057984353428)*pp*x3259))+(((-0.185020708697653)*x3260))+(((-0.099746893695352)*x3259))+(((-0.92038656235619)*pp*x3260))+(((0.0254095720202485)*x3266))+(((-0.310561435803037)*x3265)));
evalcond[4]=((((-1.0)*x3263))+(((-1.0)*x3264))+(((-0.045)*x3260))+(((-0.3)*x3266))+(((0.045)*x3265))+(((0.55)*x3259))+((x3259*x3261))+((x3260*x3262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst80;
CheckValue<IkReal> x3269 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3269.valid){
continue;
}
gconst80=((-1.0)*(x3269.value));
IkReal gconst81;
gconst81=IKsin(gconst80);
IkReal gconst82;
gconst82=IKcos(gconst80);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst80))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst90;
gconst90=IKsign((((gconst82*px))+((gconst81*py))));
dummyeval[0]=(((gconst82*px))+((gconst81*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3270=(gconst82*px);
IkReal x3271=((36.2220411120167)*pp);
IkReal x3272=(gconst81*py);
dummyeval[0]=(x3272+x3270);
dummyeval[1]=(((sj3*x3272))+((sj3*x3270))+(((-7.28153581454315)*x3272))+(((-7.28153581454315)*x3270))+(((-1.0)*x3270*x3271))+(((-1.0)*x3271*x3272)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3273=(gconst82*px);
IkReal x3274=(gconst81*py);
IkReal x3275=((1.3840830449827)*pp);
IkReal x3276=((3.11349480968858)*sj3);
dummyeval[0]=((((-1.0)*x3274))+(((-1.0)*x3273))+(((-1.0)*x3273*x3276))+((x3273*x3275))+((x3274*x3275))+(((-1.0)*x3274*x3276)));
dummyeval[1]=(x3274+x3273);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3278 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3278.valid){
continue;
}
IkReal x3277=x3278.value;
j1array[0]=((-1.0)*x3277);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3277)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3279=IKcos(j1);
evalcond[0]=((((-0.1275)*x3279))+(((-0.30675)*sj3*x3279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3280=(gconst82*px);
IkReal x3281=(gconst81*py);
IkReal x3282=((0.138057984353428)*pp);
IkReal x3283=((0.310561435803037)*sj3);
IkReal x3284=((0.0414173953060285)*pp);
CheckValue<IkReal> x3285=IKPowWithIntegerCheck(((((-0.099746893695352)*x3281))+(((-0.099746893695352)*x3280))+(((-1.0)*x3280*x3283))+(((-1.0)*x3281*x3283))+((x3280*x3282))+((x3281*x3282))),-1);
if(!x3285.valid){
continue;
}
CheckValue<IkReal> x3286=IKPowWithIntegerCheck((x3281+x3280),-1);
if(!x3286.valid){
continue;
}
if( IKabs(((x3285.value)*(((-0.00832593189139439)+((cj3*x3284))+(((-1.0)*x3284))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3286.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3285.value)*(((-0.00832593189139439)+((cj3*x3284))+(((-1.0)*x3284))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3286.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3285.value)*(((-0.00832593189139439)+((cj3*x3284))+(((-1.0)*x3284))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3286.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3287=IKsin(j1);
IkReal x3288=IKcos(j1);
IkReal x3289=((0.3)*cj3);
IkReal x3290=((0.045)*cj3);
IkReal x3291=(gconst82*px);
IkReal x3292=(gconst81*py);
IkReal x3293=(sj3*x3287);
IkReal x3294=(sj3*x3288);
IkReal x3295=((1.1)*x3287);
IkReal x3296=((0.09)*x3288);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3287*x3292))+((x3287*x3291))+(((-1.0)*x3289)));
evalcond[1]=((0.045)+((x3288*x3292))+((x3288*x3291))+(((-1.0)*x3290))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3292*x3295))+((x3291*x3295))+(((-1.0)*x3292*x3296))+(((-1.0)*x3291*x3296))+(((-1.0)*pp)));
evalcond[3]=((((-0.099746893695352)*x3287))+(((-0.185020708697653)*x3288))+(((-0.92038656235619)*pp*x3288))+(((0.138057984353428)*pp*x3287))+(((0.0254095720202485)*x3294))+(((-0.310561435803037)*x3293)));
evalcond[4]=((((0.045)*x3293))+((x3287*x3289))+((x3288*x3290))+(((0.55)*x3287))+(((-0.3)*x3294))+(((-1.0)*x3291))+(((-1.0)*x3292))+(((-0.045)*x3288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3297=(gconst82*px);
IkReal x3298=(gconst81*py);
IkReal x3299=((0.92038656235619)*pp);
IkReal x3300=((0.0254095720202485)*sj3);
CheckValue<IkReal> x3301=IKPowWithIntegerCheck((x3298+x3297),-1);
if(!x3301.valid){
continue;
}
CheckValue<IkReal> x3302=IKPowWithIntegerCheck(((((-0.185020708697653)*x3297))+(((-0.185020708697653)*x3298))+(((-1.0)*x3298*x3299))+((x3298*x3300))+(((-1.0)*x3297*x3299))+((x3297*x3300))),-1);
if(!x3302.valid){
continue;
}
if( IKabs(((x3301.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3302.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3301.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3302.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3301.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3302.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3303=IKsin(j1);
IkReal x3304=IKcos(j1);
IkReal x3305=((0.3)*cj3);
IkReal x3306=((0.045)*cj3);
IkReal x3307=(gconst82*px);
IkReal x3308=(gconst81*py);
IkReal x3309=(sj3*x3303);
IkReal x3310=(sj3*x3304);
IkReal x3311=((1.1)*x3303);
IkReal x3312=((0.09)*x3304);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3303*x3308))+((x3303*x3307))+(((-1.0)*x3305)));
evalcond[1]=((0.045)+(((-1.0)*x3306))+((x3304*x3308))+((x3304*x3307))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x3308*x3312))+((x3307*x3311))+(((-1.0)*x3307*x3312))+((x3308*x3311)));
evalcond[3]=((((-0.185020708697653)*x3304))+(((-0.099746893695352)*x3303))+(((0.0254095720202485)*x3310))+(((-0.310561435803037)*x3309))+(((0.138057984353428)*pp*x3303))+(((-0.92038656235619)*pp*x3304)));
evalcond[4]=(((x3303*x3305))+(((0.55)*x3303))+((x3304*x3306))+(((-0.045)*x3304))+(((-1.0)*x3307))+(((-1.0)*x3308))+(((-0.3)*x3310))+(((0.045)*x3309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3313 = IKatan2WithCheck((gconst90*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst90*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3313.valid){
continue;
}
j1array[0]=x3313.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3314=IKsin(j1);
IkReal x3315=IKcos(j1);
IkReal x3316=((0.3)*cj3);
IkReal x3317=((0.045)*cj3);
IkReal x3318=(gconst82*px);
IkReal x3319=(gconst81*py);
IkReal x3320=(sj3*x3314);
IkReal x3321=(sj3*x3315);
IkReal x3322=((1.1)*x3314);
IkReal x3323=((0.09)*x3315);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3316))+((x3314*x3318))+((x3314*x3319)));
evalcond[1]=((0.045)+((x3315*x3318))+((x3315*x3319))+(((-1.0)*x3317))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x3319*x3323))+(((-1.0)*pp))+(((-1.0)*x3318*x3323))+((x3318*x3322))+((x3319*x3322)));
evalcond[3]=((((-0.099746893695352)*x3314))+(((-0.310561435803037)*x3320))+(((-0.185020708697653)*x3315))+(((0.138057984353428)*pp*x3314))+(((-0.92038656235619)*pp*x3315))+(((0.0254095720202485)*x3321)));
evalcond[4]=((((0.045)*x3320))+(((0.55)*x3314))+(((-0.3)*x3321))+((x3315*x3317))+(((-0.045)*x3315))+(((-1.0)*x3319))+(((-1.0)*x3318))+((x3314*x3316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst83;
CheckValue<IkReal> x3324 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3324.valid){
continue;
}
gconst83=((3.14159265358979)+(((-1.0)*(x3324.value))));
IkReal gconst84;
gconst84=IKsin(gconst83);
IkReal gconst85;
gconst85=IKcos(gconst83);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst83))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst91;
gconst91=IKsign((((gconst85*px))+((gconst84*py))));
dummyeval[0]=(((gconst85*px))+((gconst84*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3325=(gconst85*px);
IkReal x3326=(gconst84*py);
IkReal x3327=((36.2220411120167)*pp);
dummyeval[0]=(x3325+x3326);
dummyeval[1]=(((sj3*x3326))+((sj3*x3325))+(((-1.0)*x3326*x3327))+(((-1.0)*x3325*x3327))+(((-7.28153581454315)*x3326))+(((-7.28153581454315)*x3325)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3328=(gconst84*py);
IkReal x3329=((1.3840830449827)*pp);
IkReal x3330=(gconst85*px);
IkReal x3331=((3.11349480968858)*sj3);
dummyeval[0]=((((-1.0)*x3328))+((x3328*x3329))+(((-1.0)*x3330*x3331))+((x3329*x3330))+(((-1.0)*x3330))+(((-1.0)*x3328*x3331)));
dummyeval[1]=(x3328+x3330);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3333 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3333.valid){
continue;
}
IkReal x3332=x3333.value;
j1array[0]=((-1.0)*x3332);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3332)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3334=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x3334))+(((-0.1275)*x3334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3335=(gconst85*px);
IkReal x3336=((0.138057984353428)*pp);
IkReal x3337=((0.310561435803037)*sj3);
IkReal x3338=((0.0414173953060285)*pp);
IkReal x3339=(gconst84*py);
CheckValue<IkReal> x3340=IKPowWithIntegerCheck(((((-0.099746893695352)*x3335))+(((-0.099746893695352)*x3339))+(((-1.0)*x3337*x3339))+(((-1.0)*x3335*x3337))+((x3335*x3336))+((x3336*x3339))),-1);
if(!x3340.valid){
continue;
}
CheckValue<IkReal> x3341=IKPowWithIntegerCheck((x3335+x3339),-1);
if(!x3341.valid){
continue;
}
if( IKabs(((x3340.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-1.0)*x3338))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3338))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3341.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3340.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-1.0)*x3338))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3338))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3341.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3340.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-1.0)*x3338))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3338))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3341.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3342=IKsin(j1);
IkReal x3343=IKcos(j1);
IkReal x3344=((0.3)*cj3);
IkReal x3345=((0.045)*cj3);
IkReal x3346=(gconst85*px);
IkReal x3347=(gconst84*py);
IkReal x3348=(sj3*x3342);
IkReal x3349=(sj3*x3343);
IkReal x3350=((0.09)*x3343);
IkReal x3351=((1.1)*x3342);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3342*x3347))+((x3342*x3346))+(((-1.0)*x3344)));
evalcond[1]=((0.045)+((x3343*x3347))+((x3343*x3346))+(((-1.0)*x3345))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3347*x3351))+(((-1.0)*x3346*x3350))+(((-1.0)*x3347*x3350))+(((-1.0)*pp))+((x3346*x3351)));
evalcond[3]=((((0.0254095720202485)*x3349))+(((-0.310561435803037)*x3348))+(((0.138057984353428)*pp*x3342))+(((-0.185020708697653)*x3343))+(((-0.92038656235619)*pp*x3343))+(((-0.099746893695352)*x3342)));
evalcond[4]=((((-0.3)*x3349))+(((-1.0)*x3346))+(((-1.0)*x3347))+((x3343*x3345))+((x3342*x3344))+(((-0.045)*x3343))+(((0.55)*x3342))+(((0.045)*x3348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3352=(gconst85*px);
IkReal x3353=((0.92038656235619)*pp);
IkReal x3354=((0.0254095720202485)*sj3);
IkReal x3355=(gconst84*py);
CheckValue<IkReal> x3356=IKPowWithIntegerCheck((x3355+x3352),-1);
if(!x3356.valid){
continue;
}
CheckValue<IkReal> x3357=IKPowWithIntegerCheck(((((-1.0)*x3352*x3353))+((x3352*x3354))+(((-1.0)*x3353*x3355))+((x3354*x3355))+(((-0.185020708697653)*x3352))+(((-0.185020708697653)*x3355))),-1);
if(!x3357.valid){
continue;
}
if( IKabs(((x3356.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3357.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3356.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3357.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3356.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3357.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3358=IKsin(j1);
IkReal x3359=IKcos(j1);
IkReal x3360=((0.3)*cj3);
IkReal x3361=((0.045)*cj3);
IkReal x3362=(gconst85*px);
IkReal x3363=(gconst84*py);
IkReal x3364=(sj3*x3358);
IkReal x3365=(sj3*x3359);
IkReal x3366=((0.09)*x3359);
IkReal x3367=((1.1)*x3358);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3360))+((x3358*x3362))+((x3358*x3363)));
evalcond[1]=((0.045)+(((-1.0)*x3361))+((x3359*x3362))+((x3359*x3363))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3363*x3367))+((x3362*x3367))+(((-1.0)*x3362*x3366))+(((-1.0)*pp))+(((-1.0)*x3363*x3366)));
evalcond[3]=((((0.138057984353428)*pp*x3358))+(((-0.92038656235619)*pp*x3359))+(((0.0254095720202485)*x3365))+(((-0.099746893695352)*x3358))+(((-0.310561435803037)*x3364))+(((-0.185020708697653)*x3359)));
evalcond[4]=((((-0.045)*x3359))+((x3358*x3360))+(((-1.0)*x3362))+(((-1.0)*x3363))+(((0.55)*x3358))+((x3359*x3361))+(((0.045)*x3364))+(((-0.3)*x3365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3368 = IKatan2WithCheck((gconst91*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst91*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3368.valid){
continue;
}
j1array[0]=x3368.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3369=IKsin(j1);
IkReal x3370=IKcos(j1);
IkReal x3371=((0.3)*cj3);
IkReal x3372=((0.045)*cj3);
IkReal x3373=(gconst85*px);
IkReal x3374=(gconst84*py);
IkReal x3375=(sj3*x3369);
IkReal x3376=(sj3*x3370);
IkReal x3377=((0.09)*x3370);
IkReal x3378=((1.1)*x3369);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3371))+((x3369*x3374))+((x3369*x3373)));
evalcond[1]=((0.045)+(((-1.0)*x3372))+((x3370*x3374))+((x3370*x3373))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x3374*x3377))+(((-1.0)*x3373*x3377))+((x3373*x3378))+((x3374*x3378))+(((-1.0)*pp)));
evalcond[3]=((((0.138057984353428)*pp*x3369))+(((0.0254095720202485)*x3376))+(((-0.310561435803037)*x3375))+(((-0.185020708697653)*x3370))+(((-0.099746893695352)*x3369))+(((-0.92038656235619)*pp*x3370)));
evalcond[4]=((((-1.0)*x3374))+(((-1.0)*x3373))+(((-0.3)*x3376))+(((-0.045)*x3370))+((x3370*x3372))+((x3369*x3371))+(((0.045)*x3375))+(((0.55)*x3369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3380 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3380.valid){
continue;
}
IkReal x3379=x3380.value;
j1array[0]=((-1.0)*x3379);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3379)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3381=IKcos(j1);
evalcond[0]=((((-0.1275)*x3381))+(((-0.30675)*sj3*x3381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3383 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3383.valid){
continue;
}
IkReal x3382=x3383.value;
j1array[0]=((-1.0)*x3382);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3382)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3384=IKcos(j1);
evalcond[0]=((((-0.1275)*x3384))+(((-0.30675)*sj3*x3384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3386 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
IkReal x3385=x3386.value;
j1array[0]=((-1.0)*x3385);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3385)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3387=IKcos(j1);
evalcond[0]=((((-0.1275)*x3387))+(((-0.30675)*sj3*x3387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3389 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3389.valid){
continue;
}
IkReal x3388=x3389.value;
j1array[0]=((-1.0)*x3388);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3388)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3390=IKcos(j1);
evalcond[0]=((((-0.1275)*x3390))+(((-0.30675)*sj3*x3390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3392 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3392.valid){
continue;
}
IkReal x3391=x3392.value;
j1array[0]=((-1.0)*x3391);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3391)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3393=IKcos(j1);
evalcond[0]=((((-0.1275)*x3393))+(((-0.30675)*sj3*x3393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3394=(py*sj0);
IkReal x3395=((0.310561435803037)*sj3);
IkReal x3396=((0.0414173953060285)*pp);
IkReal x3397=(cj0*px);
IkReal x3398=((0.138057984353428)*pp);
CheckValue<IkReal> x3399=IKPowWithIntegerCheck(((((-1.0)*x3394*x3395))+((x3394*x3398))+(((-0.099746893695352)*x3394))+(((-0.099746893695352)*x3397))+(((-1.0)*x3395*x3397))+((x3397*x3398))),-1);
if(!x3399.valid){
continue;
}
CheckValue<IkReal> x3400=IKPowWithIntegerCheck((x3394+x3397),-1);
if(!x3400.valid){
continue;
}
if( IKabs(((x3399.value)*(((-0.00832593189139439)+((cj3*x3396))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3396))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3400.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3399.value)*(((-0.00832593189139439)+((cj3*x3396))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3396))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3400.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3399.value)*(((-0.00832593189139439)+((cj3*x3396))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3396))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3400.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3401=IKsin(j1);
IkReal x3402=IKcos(j1);
IkReal x3403=((0.045)*sj3);
IkReal x3404=((0.3)*cj3);
IkReal x3405=((0.045)*cj3);
IkReal x3406=(cj0*px);
IkReal x3407=(py*sj0);
IkReal x3408=(sj3*x3402);
IkReal x3409=((0.09)*x3402);
IkReal x3410=((1.1)*x3401);
evalcond[0]=((-0.55)+((x3401*x3406))+((x3401*x3407))+(((-1.0)*x3404))+(((-1.0)*x3403)));
evalcond[1]=((0.045)+(((0.3)*sj3))+((x3402*x3406))+((x3402*x3407))+(((-1.0)*x3405)));
evalcond[2]=((-0.2125)+((x3406*x3410))+(((-1.0)*x3407*x3409))+(((-1.0)*pp))+((x3407*x3410))+(((-1.0)*x3406*x3409)));
evalcond[3]=((((-0.310561435803037)*sj3*x3401))+(((0.0254095720202485)*x3408))+(((-0.185020708697653)*x3402))+(((-0.099746893695352)*x3401))+(((0.138057984353428)*pp*x3401))+(((-0.92038656235619)*pp*x3402)));
evalcond[4]=((((-1.0)*x3406))+(((-1.0)*x3407))+(((-0.3)*x3408))+((x3401*x3404))+((x3401*x3403))+(((0.55)*x3401))+((x3402*x3405))+(((-0.045)*x3402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3411=(cj0*px);
IkReal x3412=(py*sj0);
IkReal x3413=((0.92038656235619)*pp);
IkReal x3414=((0.0254095720202485)*sj3);
CheckValue<IkReal> x3415=IKPowWithIntegerCheck((x3412+x3411),-1);
if(!x3415.valid){
continue;
}
CheckValue<IkReal> x3416=IKPowWithIntegerCheck(((((-1.0)*x3412*x3413))+(((-1.0)*x3411*x3413))+((x3411*x3414))+(((-0.185020708697653)*x3412))+(((-0.185020708697653)*x3411))+((x3412*x3414))),-1);
if(!x3416.valid){
continue;
}
if( IKabs(((x3415.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3416.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3415.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3416.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3415.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3416.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3417=IKsin(j1);
IkReal x3418=IKcos(j1);
IkReal x3419=((0.045)*sj3);
IkReal x3420=((0.3)*cj3);
IkReal x3421=((0.045)*cj3);
IkReal x3422=(cj0*px);
IkReal x3423=(py*sj0);
IkReal x3424=(sj3*x3418);
IkReal x3425=((0.09)*x3418);
IkReal x3426=((1.1)*x3417);
evalcond[0]=((-0.55)+(((-1.0)*x3420))+((x3417*x3422))+((x3417*x3423))+(((-1.0)*x3419)));
evalcond[1]=((0.045)+((x3418*x3422))+((x3418*x3423))+(((-1.0)*x3421))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x3422*x3426))+(((-1.0)*x3422*x3425))+(((-1.0)*x3423*x3425))+((x3423*x3426)));
evalcond[3]=((((-0.099746893695352)*x3417))+(((-0.185020708697653)*x3418))+(((0.0254095720202485)*x3424))+(((0.138057984353428)*pp*x3417))+(((-0.310561435803037)*sj3*x3417))+(((-0.92038656235619)*pp*x3418)));
evalcond[4]=(((x3417*x3419))+((x3418*x3421))+((x3417*x3420))+(((-1.0)*x3423))+(((-1.0)*x3422))+(((0.55)*x3417))+(((-0.3)*x3424))+(((-0.045)*x3418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3427 = IKatan2WithCheck((gconst67*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst67*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3427.valid){
continue;
}
j1array[0]=x3427.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3428=IKsin(j1);
IkReal x3429=IKcos(j1);
IkReal x3430=((0.045)*sj3);
IkReal x3431=((0.3)*cj3);
IkReal x3432=((0.045)*cj3);
IkReal x3433=(cj0*px);
IkReal x3434=(py*sj0);
IkReal x3435=(sj3*x3429);
IkReal x3436=((0.09)*x3429);
IkReal x3437=((1.1)*x3428);
evalcond[0]=((-0.55)+((x3428*x3433))+((x3428*x3434))+(((-1.0)*x3431))+(((-1.0)*x3430)));
evalcond[1]=((0.045)+((x3429*x3434))+((x3429*x3433))+(((-1.0)*x3432))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3434*x3437))+(((-1.0)*x3433*x3436))+((x3433*x3437))+(((-1.0)*pp))+(((-1.0)*x3434*x3436)));
evalcond[3]=((((-0.185020708697653)*x3429))+(((-0.92038656235619)*pp*x3429))+(((-0.310561435803037)*sj3*x3428))+(((0.138057984353428)*pp*x3428))+(((0.0254095720202485)*x3435))+(((-0.099746893695352)*x3428)));
evalcond[4]=(((x3429*x3432))+(((0.55)*x3428))+((x3428*x3430))+((x3428*x3431))+(((-0.045)*x3429))+(((-1.0)*x3434))+(((-1.0)*x3433))+(((-0.3)*x3435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3438=(cj2*pz);
IkReal x3439=((1.0)*cj0);
IkReal x3440=(cj0*px);
IkReal x3441=(py*sj0);
IkReal x3442=((0.55)*sj2);
IkReal x3443=(cj2*sj0);
IkReal x3444=((0.3)*cj3*sj2);
IkReal x3445=(cj2*px*py);
IkReal x3446=((0.045)*sj2*sj3);
CheckValue<IkReal> x3447 = IKatan2WithCheck((gconst1*((((px*sj0*x3438))+(((-1.0)*py*x3438*x3439))+((x3440*x3442))+((x3440*x3444))+((x3440*x3446))+((x3441*x3444))+((x3441*x3446))+((x3441*x3442))))),(gconst1*((((pz*x3446))+((pz*x3444))+((pz*x3442))+((cj0*cj2*py*x3440))+((cj0*cj2*py*x3441))+(((-1.0)*px*x3441*x3443))+(((-1.0)*x3439*x3443*(px*px)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3447.valid){
continue;
}
j1array[0]=x3447.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3448=IKsin(j1);
IkReal x3449=IKcos(j1);
IkReal x3450=(px*sj2);
IkReal x3451=((0.3)*sj3);
IkReal x3452=((0.09)*sj0);
IkReal x3453=(cj2*px);
IkReal x3454=((0.045)*cj3);
IkReal x3455=((0.045)*cj2);
IkReal x3456=(py*sj0);
IkReal x3457=((0.045)*sj3);
IkReal x3458=((1.0)*cj0);
IkReal x3459=((0.3)*cj3);
IkReal x3460=(py*sj2);
IkReal x3461=(cj0*x3449);
IkReal x3462=(cj3*x3448);
IkReal x3463=(cj2*x3449);
IkReal x3464=(cj2*x3448);
IkReal x3465=(pz*x3449);
IkReal x3466=(cj0*px*x3448);
evalcond[0]=((-0.55)+(((-1.0)*x3457))+(((-1.0)*x3459))+((x3448*x3456))+x3466+x3465);
evalcond[1]=(((sj0*x3453))+(((-1.0)*cj2*py*x3458))+(((-1.0)*pz*sj2*x3448))+((x3450*x3461))+((sj2*x3449*x3456)));
evalcond[2]=(((x3448*x3455))+(((-0.55)*x3449))+((x3451*x3464))+pz+(((-1.0)*x3449*x3459))+(((-1.0)*x3449*x3457))+(((-1.0)*x3454*x3464)));
evalcond[3]=((0.045)+(((-1.0)*x3454))+(((-1.0)*x3456*x3463))+((sj0*x3450))+(((-1.0)*x3458*x3460))+x3451+(((-1.0)*x3449*x3453*x3458))+((pz*x3464)));
evalcond[4]=((((0.55)*x3448))+(((-1.0)*px*x3458))+((x3448*x3457))+((x3448*x3459))+(((-1.0)*x3456))+((x3451*x3463))+(((-1.0)*x3454*x3463))+((x3449*x3455)));
evalcond[5]=((-0.2125)+(((0.09)*x3453*x3461))+(((1.1)*x3448*x3456))+(((0.09)*cj0*x3460))+((py*x3452*x3463))+(((-1.0)*pp))+(((-1.0)*x3450*x3452))+(((-0.09)*pz*x3464))+(((1.1)*x3466))+(((1.1)*x3465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3467=cj3*cj3;
IkReal x3468=sj3*sj3;
IkReal x3469=(cj2*sj3);
IkReal x3470=((0.0135)*cj2);
IkReal x3471=((1.0)*pz);
CheckValue<IkReal> x3472 = IKatan2WithCheck((gconst0*(((-0.3025)+(((-0.0495)*sj3))+(((-0.002025)*x3468))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.09)*x3467))+(((-0.33)*cj3))))),(gconst0*(((((-1.0)*py*sj0*x3471))+((x3467*x3470))+(((-0.02475)*cj2))+(((-0.167025)*x3469))+(((-1.0)*x3468*x3470))+(((-0.087975)*cj3*x3469))+(((-1.0)*cj0*px*x3471))+(((0.01125)*cj2*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3472.valid){
continue;
}
j1array[0]=x3472.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3473=IKsin(j1);
IkReal x3474=IKcos(j1);
IkReal x3475=(px*sj2);
IkReal x3476=((0.3)*sj3);
IkReal x3477=((0.09)*sj0);
IkReal x3478=(cj2*px);
IkReal x3479=((0.045)*cj3);
IkReal x3480=((0.045)*cj2);
IkReal x3481=(py*sj0);
IkReal x3482=((0.045)*sj3);
IkReal x3483=((1.0)*cj0);
IkReal x3484=((0.3)*cj3);
IkReal x3485=(py*sj2);
IkReal x3486=(cj0*x3474);
IkReal x3487=(cj3*x3473);
IkReal x3488=(cj2*x3474);
IkReal x3489=(cj2*x3473);
IkReal x3490=(pz*x3474);
IkReal x3491=(cj0*px*x3473);
evalcond[0]=((-0.55)+((x3473*x3481))+x3490+x3491+(((-1.0)*x3482))+(((-1.0)*x3484)));
evalcond[1]=(((sj2*x3474*x3481))+((x3475*x3486))+(((-1.0)*pz*sj2*x3473))+((sj0*x3478))+(((-1.0)*cj2*py*x3483)));
evalcond[2]=(((x3473*x3480))+((x3476*x3489))+(((-1.0)*x3479*x3489))+pz+(((-1.0)*x3474*x3482))+(((-1.0)*x3474*x3484))+(((-0.55)*x3474)));
evalcond[3]=((0.045)+(((-1.0)*x3483*x3485))+(((-1.0)*x3481*x3488))+(((-1.0)*x3474*x3478*x3483))+x3476+((sj0*x3475))+((pz*x3489))+(((-1.0)*x3479)));
evalcond[4]=(((x3473*x3482))+((x3473*x3484))+((x3474*x3480))+(((-1.0)*px*x3483))+((x3476*x3488))+(((-1.0)*x3479*x3488))+(((0.55)*x3473))+(((-1.0)*x3481)));
evalcond[5]=((-0.2125)+(((0.09)*cj0*x3485))+((py*x3477*x3488))+(((-1.0)*pp))+(((-1.0)*x3475*x3477))+(((1.1)*x3490))+(((1.1)*x3491))+(((-0.09)*pz*x3489))+(((0.09)*x3478*x3486))+(((1.1)*x3473*x3481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x3492=((0.045)*cj2);
IkReal x3493=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
IkReal x3494=((((-1.0)*cj3*x3492))+(((0.3)*cj2*sj3))+x3492);
CheckValue<IkReal> x3497 = IKatan2WithCheck(x3493,x3494,IKFAST_ATAN2_MAGTHRESH);
if(!x3497.valid){
continue;
}
IkReal x3495=((1.0)*(x3497.value));
if((((x3494*x3494)+(x3493*x3493))) < -0.00001)
continue;
CheckValue<IkReal> x3498=IKPowWithIntegerCheck(IKabs(IKsqrt(((x3494*x3494)+(x3493*x3493)))),-1);
if(!x3498.valid){
continue;
}
if( ((pz*(x3498.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x3498.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x3496=IKasin((pz*(x3498.value)));
j1array[0]=((((-1.0)*x3495))+(((-1.0)*x3496)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3495))+x3496);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst92;
gconst92=IKsign((((sj1*(py*py)))+((sj1*(px*px)))));
dummyeval[0]=(((sj1*(py*py)))+((sj1*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst93;
IkReal x3499=((1.0)*cj2*sj1);
gconst93=IKsign(((((-1.0)*x3499*(px*px)))+(((-1.0)*x3499*(py*py)))));
IkReal x3500=((1.0)*cj2*sj1);
dummyeval[0]=((((-1.0)*x3500*(py*py)))+(((-1.0)*x3500*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst94;
gconst94=IKsign((((cj1*(px*px)))+((cj1*(py*py)))));
dummyeval[0]=(((cj1*(px*px)))+((cj1*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst95;
gconst95=IKsign((((sj1*(py*py)))+((sj1*(px*px)))));
dummyeval[0]=(((sj1*(py*py)))+((sj1*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst96;
gconst96=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3501=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x3501;
evalcond[2]=0;
evalcond[3]=x3501;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3502=((0.30675)*sj3);
IkReal x3503=((0.15)*pz);
CheckValue<IkReal> x3504 = IKatan2WithCheck((gconst96*(((((0.1275)*px))+(((-1.0)*px*x3503))+((px*x3502))))),(gconst96*((((py*x3503))+(((-0.1275)*py))+(((-1.0)*py*x3502))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3504.valid){
continue;
}
j0array[0]=x3504.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3505=IKsin(j0);
IkReal x3506=IKcos(j0);
IkReal x3507=(px*x3505);
IkReal x3508=(py*x3506);
evalcond[0]=(((py*x3505))+((px*x3506)));
evalcond[1]=((0.1275)+x3507+(((-0.15)*pz))+(((0.30675)*sj3))+(((-1.0)*x3508)));
evalcond[2]=((-0.2125)+(((-0.09)*x3507))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x3508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst98;
gconst98=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3509=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x3509;
evalcond[2]=0;
evalcond[3]=x3509;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3510=((0.15)*pz);
IkReal x3511=((0.30675)*sj3);
CheckValue<IkReal> x3512 = IKatan2WithCheck((gconst98*(((((0.1275)*px))+((px*x3510))+((px*x3511))))),(gconst98*(((((-1.0)*py*x3510))+(((-1.0)*py*x3511))+(((-0.1275)*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3512.valid){
continue;
}
j0array[0]=x3512.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3513=IKsin(j0);
IkReal x3514=IKcos(j0);
IkReal x3515=(px*x3513);
IkReal x3516=((1.0)*x3514);
evalcond[0]=((((-1.0)*px*x3516))+(((-1.0)*py*x3513)));
evalcond[1]=((0.1275)+(((0.15)*pz))+x3515+(((-1.0)*py*x3516))+(((0.30675)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x3514))+(((-0.09)*x3515))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst100;
gconst100=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3517=((0.045)*sj3);
IkReal x3518=((0.3)*cj3);
IkReal x3519=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x3520=(x3518+x3517);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x3520)));
evalcond[2]=x3519;
evalcond[3]=x3519;
evalcond[4]=((0.55)+x3520);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3521=((0.3)*py);
IkReal x3522=((0.045)*px);
IkReal x3523=((0.045)*py);
IkReal x3524=((0.3)*px);
CheckValue<IkReal> x3525 = IKatan2WithCheck((gconst100*(((((-0.55)*py))+(((-1.0)*cj3*x3522))+(((-1.0)*cj3*x3521))+x3522+(((-1.0)*sj3*x3523))+((sj3*x3524))))),(gconst100*(((((-0.55)*px))+(((-1.0)*cj3*x3524))+(((-1.0)*x3523))+(((-1.0)*sj3*x3522))+(((-1.0)*sj3*x3521))+((cj3*x3523))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3525.valid){
continue;
}
j0array[0]=x3525.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3526=IKsin(j0);
IkReal x3527=IKcos(j0);
IkReal x3528=(px*x3526);
IkReal x3529=(py*x3527);
IkReal x3530=(px*x3527);
IkReal x3531=(py*x3526);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3531+x3530);
evalcond[1]=((0.045)+(((-1.0)*x3529))+x3528+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x3528))+(((-1.0)*pp))+(((1.1)*x3531))+(((1.1)*x3530))+(((0.09)*x3529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst102;
gconst102=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3532=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x3533=x3493;
evalcond[0]=((px*px)+(py*py));
evalcond[1]=x3533;
evalcond[2]=x3532;
evalcond[3]=x3532;
evalcond[4]=x3533;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3534=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x3535=x3493;
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x3535;
evalcond[2]=x3534;
evalcond[3]=x3534;
evalcond[4]=x3535;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3536=((0.3)*py);
IkReal x3537=((0.045)*px);
IkReal x3538=((0.045)*py);
IkReal x3539=((0.3)*px);
CheckValue<IkReal> x3540 = IKatan2WithCheck((gconst102*(((((-0.55)*py))+(((-1.0)*sj3*x3538))+(((-1.0)*sj3*x3539))+((cj3*x3537))+(((-1.0)*cj3*x3536))+(((-1.0)*x3537))))),(gconst102*(((((-0.55)*px))+(((-1.0)*sj3*x3537))+((sj3*x3536))+x3538+(((-1.0)*cj3*x3539))+(((-1.0)*cj3*x3538))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3540.valid){
continue;
}
j0array[0]=x3540.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3541=IKcos(j0);
IkReal x3542=IKsin(j0);
IkReal x3543=(px*x3542);
IkReal x3544=((1.0)*x3541);
IkReal x3545=(py*x3542);
evalcond[0]=((0.045)+(((-1.0)*py*x3544))+x3543+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x3545))+(((-1.0)*px*x3544)));
evalcond[2]=((-0.2125)+(((-1.1)*x3545))+(((-0.09)*x3543))+(((-1.1)*px*x3541))+(((-1.0)*pp))+(((0.09)*py*x3541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3546=(cj1*pz);
IkReal x3547=((0.3)*cj3);
IkReal x3548=((0.045)*sj3);
IkReal x3549=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+x3546+(((-1.0)*x3547))+(((-1.0)*x3548)));
evalcond[2]=x3549;
evalcond[3]=((-1.0)*pz*sj1);
evalcond[4]=x3549;
evalcond[5]=(((sj1*x3548))+((sj1*x3547))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x3546)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3550=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=x3550;
evalcond[2]=0;
evalcond[3]=x3550;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3552=IKPowWithIntegerCheck(py,-1);
if(!x3552.valid){
continue;
}
IkReal x3551=x3552.value;
cj0array[0]=((((0.1275)*x3551))+(((-0.15)*pz*x3551))+(((0.30675)*sj3*x3551)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3553=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=x3553;
evalcond[2]=0;
evalcond[3]=x3553;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3555=IKPowWithIntegerCheck(py,-1);
if(!x3555.valid){
continue;
}
IkReal x3554=x3555.value;
cj0array[0]=((((0.1275)*x3554))+(((0.30675)*sj3*x3554))+(((0.15)*pz*x3554)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3556=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x3556;
evalcond[2]=0;
evalcond[3]=x3556;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3558=IKPowWithIntegerCheck(px,-1);
if(!x3558.valid){
continue;
}
IkReal x3557=x3558.value;
sj0array[0]=((((-0.30675)*sj3*x3557))+(((0.15)*pz*x3557))+(((-0.1275)*x3557)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3559=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x3559;
evalcond[2]=0;
evalcond[3]=x3559;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3561=IKPowWithIntegerCheck(px,-1);
if(!x3561.valid){
continue;
}
IkReal x3560=x3561.value;
sj0array[0]=((((-0.15)*pz*x3560))+(((-0.30675)*sj3*x3560))+(((-0.1275)*x3560)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst104;
gconst104=IKsign(py);
IkReal x3562=IKsign(py);
IkReal x3563=((0.045)*x3562);
IkReal x3564=((0.3)*x3562);
dummyeval[0]=py;
dummyeval[1]=((IKabs(((((-1.0)*cj3*x3563))+x3563+((sj3*x3564)))))+(IKabs(((((0.55)*x3562))+((cj3*x3564))+((sj3*x3563))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3565=((0.045)*sj3);
IkReal x3566=((0.3)*cj3);
IkReal x3567=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x3568=(x3566+x3565);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+(((-1.0)*x3568)));
evalcond[2]=x3567;
evalcond[3]=x3567;
evalcond[4]=((0.55)+x3568);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3570=IKPowWithIntegerCheck(py,-1);
if(!x3570.valid){
continue;
}
IkReal x3569=x3570.value;
if( IKabs((x3569*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x3569*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3569*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x3569*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x3569*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x3569*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3571=IKsin(j0);
IkReal x3572=IKcos(j0);
IkReal x3573=(py*x3572);
IkReal x3574=(py*x3571);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3574);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x3573)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x3574))+(((0.09)*x3573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3575 = IKatan2WithCheck((gconst104*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst104*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3575.valid){
continue;
}
j0array[0]=x3575.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3576=IKsin(j0);
IkReal x3577=IKcos(j0);
IkReal x3578=(py*x3577);
IkReal x3579=(py*x3576);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3579);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x3578)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x3579))+(((0.09)*x3578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst105;
gconst105=IKsign(py);
IkReal x3580=IKsign(py);
IkReal x3581=((0.045)*x3580);
IkReal x3582=((0.3)*x3580);
dummyeval[0]=py;
dummyeval[1]=((IKabs(((((-1.0)*cj3*x3582))+(((-0.55)*x3580))+(((-1.0)*sj3*x3581)))))+(IKabs(((((-1.0)*cj3*x3581))+((sj3*x3582))+x3581))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3583=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x3584=x3493;
evalcond[0]=IKabs(py);
evalcond[1]=x3584;
evalcond[2]=x3583;
evalcond[3]=x3583;
evalcond[4]=x3584;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3586=IKPowWithIntegerCheck(py,-1);
if(!x3586.valid){
continue;
}
IkReal x3585=x3586.value;
if( IKabs((x3585*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x3585*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3585*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x3585*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x3585*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x3585*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3587=IKcos(j0);
IkReal x3588=IKsin(j0);
IkReal x3589=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x3588*x3589)));
evalcond[1]=((0.045)+(((-1.0)*x3587*x3589))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x3588))+(((-1.0)*pp))+(((0.09)*py*x3587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3590 = IKatan2WithCheck((gconst105*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst105*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3590.valid){
continue;
}
j0array[0]=x3590.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3591=IKcos(j0);
IkReal x3592=IKsin(j0);
IkReal x3593=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x3592*x3593)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x3591*x3593))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*py*x3591))+(((-1.1)*py*x3592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst106;
gconst106=IKsign(px);
IkReal x3594=IKsign(px);
IkReal x3595=(cj3*x3594);
IkReal x3596=((0.045)*x3594);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((0.045)*x3595))+(((-0.3)*sj3*x3594))+(((-1.0)*x3596)))))+(IKabs((((sj3*x3596))+(((0.55)*x3594))+(((0.3)*x3595))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3597=((0.045)*sj3);
IkReal x3598=((0.3)*cj3);
IkReal x3599=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x3600=(x3597+x3598);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x3600)));
evalcond[2]=x3599;
evalcond[3]=x3599;
evalcond[4]=((0.55)+x3600);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3602=IKPowWithIntegerCheck(px,-1);
if(!x3602.valid){
continue;
}
IkReal x3601=x3602.value;
if( IKabs(((0.111111111111111)*x3601*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3601*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x3601*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x3601*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x3601*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x3601*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3603=IKcos(j0);
IkReal x3604=IKsin(j0);
IkReal x3605=(px*x3604);
IkReal x3606=(px*x3603);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3606);
evalcond[1]=((0.045)+x3605+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x3605))+(((1.1)*x3606))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3607 = IKatan2WithCheck((gconst106*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst106*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3607.valid){
continue;
}
j0array[0]=x3607.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3608=IKcos(j0);
IkReal x3609=IKsin(j0);
IkReal x3610=(px*x3609);
IkReal x3611=(px*x3608);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3611);
evalcond[1]=((0.045)+x3610+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x3610))+(((1.1)*x3611))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst107;
gconst107=IKsign(px);
IkReal x3612=IKsign(px);
IkReal x3613=(cj3*x3612);
IkReal x3614=((0.045)*x3612);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((-1.0)*x3614))+(((0.045)*x3613))+(((-0.3)*sj3*x3612)))))+(IKabs(((((-0.3)*x3613))+(((-1.0)*sj3*x3614))+(((-0.55)*x3612))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3615=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x3616=x3493;
evalcond[0]=IKabs(px);
evalcond[1]=x3616;
evalcond[2]=x3615;
evalcond[3]=x3615;
evalcond[4]=x3616;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3618=IKPowWithIntegerCheck(px,-1);
if(!x3618.valid){
continue;
}
IkReal x3617=x3618.value;
if( IKabs((x3617*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x3617*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3617*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x3617*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x3617*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x3617*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3619=IKsin(j0);
IkReal x3620=IKcos(j0);
IkReal x3621=(px*x3619);
IkReal x3622=(px*x3620);
evalcond[0]=((0.045)+x3621+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x3622)));
evalcond[2]=((-0.2125)+(((-1.1)*x3622))+(((-1.0)*pp))+(((-0.09)*x3621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3623 = IKatan2WithCheck((gconst107*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst107*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3623.valid){
continue;
}
j0array[0]=x3623.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3624=IKsin(j0);
IkReal x3625=IKcos(j0);
IkReal x3626=(px*x3624);
IkReal x3627=(px*x3625);
evalcond[0]=((0.045)+x3626+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x3627)));
evalcond[2]=((-0.2125)+(((-1.1)*x3627))+(((-1.0)*pp))+(((-0.09)*x3626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3628=(px*sj3);
IkReal x3629=(py*sj1);
IkReal x3630=((0.3)*cj3);
IkReal x3631=((0.045)*cj3);
IkReal x3632=(px*sj1);
IkReal x3633=((1.0)*cj1*pz);
CheckValue<IkReal> x3634 = IKatan2WithCheck((gconst95*(((((-1.0)*py*x3633))+((py*x3630))+(((0.045)*py*sj3))+((x3631*x3632))+(((-0.045)*x3632))+(((-0.3)*sj1*x3628))+(((0.55)*py))))),(gconst95*(((((0.045)*x3628))+(((0.045)*x3629))+(((-1.0)*px*x3633))+((px*x3630))+(((0.3)*sj3*x3629))+(((0.55)*px))+(((-1.0)*x3629*x3631))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
j0array[0]=x3634.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3635=IKsin(j0);
IkReal x3636=IKcos(j0);
IkReal x3637=((0.3)*cj3);
IkReal x3638=((0.045)*sj3);
IkReal x3639=(cj1*pz);
IkReal x3640=(px*x3635);
IkReal x3641=(px*x3636);
IkReal x3642=(py*x3635);
IkReal x3643=(py*x3636);
IkReal x3644=(sj1*x3642);
evalcond[0]=(((cj1*x3642))+((cj1*x3641))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x3640+(((-0.045)*cj3))+(((-1.0)*x3643))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x3638))+(((-1.0)*x3637))+x3639+x3644+((sj1*x3641)));
evalcond[3]=((((-1.0)*x3642))+(((-1.0)*x3641))+(((0.55)*sj1))+((sj1*x3637))+((sj1*x3638)));
evalcond[4]=((-0.2125)+(((1.1)*x3639))+(((-0.09)*x3640))+(((-1.0)*pp))+(((0.09)*x3643))+(((1.1)*x3644))+(((1.1)*sj1*x3641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3645=((0.045)*cj1);
IkReal x3646=(pz*sj1);
IkReal x3647=((0.3)*cj1*sj3);
CheckValue<IkReal> x3648 = IKatan2WithCheck((gconst94*((((cj3*px*x3645))+(((-1.0)*px*x3645))+(((-1.0)*px*x3647))+((py*x3646))))),(gconst94*(((((-1.0)*cj3*py*x3645))+((px*x3646))+((py*x3645))+((py*x3647))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3648.valid){
continue;
}
j0array[0]=x3648.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3649=IKsin(j0);
IkReal x3650=IKcos(j0);
IkReal x3651=((0.3)*cj3);
IkReal x3652=((0.045)*sj3);
IkReal x3653=(cj1*pz);
IkReal x3654=(px*x3649);
IkReal x3655=(px*x3650);
IkReal x3656=(py*x3649);
IkReal x3657=(py*x3650);
IkReal x3658=(sj1*x3656);
evalcond[0]=(((cj1*x3655))+((cj1*x3656))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x3654+(((-1.0)*x3657))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x3658+x3653+((sj1*x3655))+(((-1.0)*x3652))+(((-1.0)*x3651)));
evalcond[3]=((((-1.0)*x3655))+(((-1.0)*x3656))+((sj1*x3652))+((sj1*x3651))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-0.09)*x3654))+(((0.09)*x3657))+(((-1.0)*pp))+(((1.1)*sj1*x3655))+(((1.1)*x3653))+(((1.1)*x3658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst108;
gconst108=IKsign((((cj1*(px*px)))+((cj1*(py*py)))));
dummyeval[0]=(((cj1*(px*px)))+((cj1*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst109;
gconst109=IKsign((((sj1*(py*py)))+((sj1*(px*px)))));
dummyeval[0]=(((sj1*(py*py)))+((sj1*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst110;
gconst110=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3659=((0.30675)*sj3);
IkReal x3660=((0.15)*pz);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.1275)+x3660+(((-1.0)*x3659)));
evalcond[2]=0;
evalcond[3]=((0.1275)+(((-1.0)*x3660))+x3659);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3661=((0.30675)*sj3);
IkReal x3662=((0.15)*pz);
CheckValue<IkReal> x3663 = IKatan2WithCheck((gconst110*((((px*x3662))+(((-0.1275)*px))+(((-1.0)*px*x3661))))),(gconst110*((((py*x3661))+(((0.1275)*py))+(((-1.0)*py*x3662))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3663.valid){
continue;
}
j0array[0]=x3663.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3664=IKsin(j0);
IkReal x3665=IKcos(j0);
IkReal x3666=(px*x3664);
IkReal x3667=((1.0)*x3665);
evalcond[0]=((((-1.0)*py*x3664))+(((-1.0)*px*x3667)));
evalcond[1]=((-0.1275)+(((0.15)*pz))+(((-1.0)*py*x3667))+x3666+(((-0.30675)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x3665))+(((-1.0)*pp))+(((0.09)*x3666))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst112;
gconst112=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3668=((0.15)*pz);
IkReal x3669=((0.30675)*sj3);
IkReal x3670=(x3669+x3668);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.1275)+(((-1.0)*x3670)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x3670);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3671=((0.30675)*sj3);
IkReal x3672=((0.15)*pz);
CheckValue<IkReal> x3673 = IKatan2WithCheck((gconst112*(((((-0.1275)*px))+(((-1.0)*px*x3671))+(((-1.0)*px*x3672))))),(gconst112*(((((0.1275)*py))+((py*x3672))+((py*x3671))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3673.valid){
continue;
}
j0array[0]=x3673.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3674=IKsin(j0);
IkReal x3675=IKcos(j0);
IkReal x3676=(px*x3674);
IkReal x3677=(py*x3675);
evalcond[0]=(((px*x3675))+((py*x3674)));
evalcond[1]=((-0.1275)+(((-0.15)*pz))+x3676+(((-0.30675)*sj3))+(((-1.0)*x3677)));
evalcond[2]=((-0.2125)+(((-0.09)*x3677))+(((0.09)*x3676))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst114;
gconst114=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3678=((0.3)*sj3);
IkReal x3679=((0.045)*cj3);
IkReal x3680=((0.045)*sj3);
IkReal x3681=((0.3)*cj3);
IkReal x3682=(x3681+x3680);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x3682)));
evalcond[2]=((-0.045)+x3679+(((-1.0)*x3678)));
evalcond[3]=((0.045)+x3678+(((-1.0)*x3679)));
evalcond[4]=((0.55)+x3682);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3683=((0.3)*py);
IkReal x3684=((0.045)*px);
IkReal x3685=((0.045)*py);
IkReal x3686=((0.3)*px);
CheckValue<IkReal> x3687 = IKatan2WithCheck((gconst114*(((((-0.55)*py))+((cj3*x3684))+(((-1.0)*x3684))+(((-1.0)*sj3*x3685))+(((-1.0)*sj3*x3686))+(((-1.0)*cj3*x3683))))),(gconst114*(((((-0.55)*px))+x3685+(((-1.0)*sj3*x3684))+(((-1.0)*cj3*x3686))+(((-1.0)*cj3*x3685))+((sj3*x3683))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3687.valid){
continue;
}
j0array[0]=x3687.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3688=IKsin(j0);
IkReal x3689=IKcos(j0);
IkReal x3690=(px*x3688);
IkReal x3691=(py*x3689);
IkReal x3692=(px*x3689);
IkReal x3693=(py*x3688);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3692+x3693);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x3690+(((-1.0)*x3691))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3692))+(((1.1)*x3693))+(((0.09)*x3690))+(((-1.0)*pp))+(((-0.09)*x3691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst116;
gconst116=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3694=((0.3)*sj3);
IkReal x3695=((0.045)*cj3);
IkReal x3696=x3493;
evalcond[0]=((px*px)+(py*py));
evalcond[1]=x3696;
evalcond[2]=((-0.045)+x3695+(((-1.0)*x3694)));
evalcond[3]=((0.045)+x3694+(((-1.0)*x3695)));
evalcond[4]=x3696;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3697=((0.3)*sj3);
IkReal x3698=((0.045)*cj3);
IkReal x3699=x3493;
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x3699;
evalcond[2]=((-0.045)+x3698+(((-1.0)*x3697)));
evalcond[3]=((0.045)+x3697+(((-1.0)*x3698)));
evalcond[4]=x3699;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3700=((0.3)*py);
IkReal x3701=((0.045)*px);
IkReal x3702=((0.045)*py);
IkReal x3703=((0.3)*px);
CheckValue<IkReal> x3704 = IKatan2WithCheck((gconst116*(((((-0.55)*py))+(((-1.0)*cj3*x3700))+(((-1.0)*cj3*x3701))+x3701+(((-1.0)*sj3*x3702))+((sj3*x3703))))),(gconst116*(((((-0.55)*px))+(((-1.0)*cj3*x3703))+(((-1.0)*x3702))+(((-1.0)*sj3*x3701))+(((-1.0)*sj3*x3700))+((cj3*x3702))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3704.valid){
continue;
}
j0array[0]=x3704.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3705=IKcos(j0);
IkReal x3706=IKsin(j0);
IkReal x3707=(px*x3706);
IkReal x3708=((1.0)*x3705);
IkReal x3709=(py*x3706);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x3707+(((-1.0)*py*x3708))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*px*x3708))+(((-1.0)*x3709)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x3705))+(((-0.09)*py*x3705))+(((-1.1)*x3709))+(((-1.0)*pp))+(((0.09)*x3707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3710=((0.3)*sj3);
IkReal x3711=((0.045)*cj3);
IkReal x3712=(cj1*pz);
IkReal x3713=((0.3)*cj3);
IkReal x3714=((0.045)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x3713))+(((-1.0)*x3714))+x3712);
evalcond[2]=((-0.045)+(((-1.0)*x3710))+x3711);
evalcond[3]=(pz*sj1);
evalcond[4]=((0.045)+(((-1.0)*x3711))+x3710);
evalcond[5]=(((sj1*x3713))+((sj1*x3714))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x3712)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3715=((0.30675)*sj3);
IkReal x3716=((0.15)*pz);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.1275)+(((-1.0)*x3715))+x3716);
evalcond[2]=0;
evalcond[3]=((0.1275)+(((-1.0)*x3716))+x3715);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(py,-1);
if(!x3718.valid){
continue;
}
IkReal x3717=x3718.value;
cj0array[0]=((((-0.30675)*sj3*x3717))+(((0.15)*pz*x3717))+(((-0.1275)*x3717)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3719=((0.15)*pz);
IkReal x3720=((0.30675)*sj3);
IkReal x3721=(x3720+x3719);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.1275)+(((-1.0)*x3721)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x3721);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3723=IKPowWithIntegerCheck(py,-1);
if(!x3723.valid){
continue;
}
IkReal x3722=x3723.value;
cj0array[0]=((((-0.15)*pz*x3722))+(((-0.30675)*sj3*x3722))+(((-0.1275)*x3722)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3724=((0.30675)*sj3);
IkReal x3725=((0.15)*pz);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+(((-1.0)*x3724))+x3725);
evalcond[2]=0;
evalcond[3]=((0.1275)+(((-1.0)*x3725))+x3724);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3727=IKPowWithIntegerCheck(px,-1);
if(!x3727.valid){
continue;
}
IkReal x3726=x3727.value;
sj0array[0]=((((-0.15)*pz*x3726))+(((0.1275)*x3726))+(((0.30675)*sj3*x3726)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3728=((0.15)*pz);
IkReal x3729=((0.30675)*sj3);
IkReal x3730=(x3728+x3729);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+(((-1.0)*x3730)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x3730);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(px,-1);
if(!x3732.valid){
continue;
}
IkReal x3731=x3732.value;
sj0array[0]=((((0.1275)*x3731))+(((0.30675)*sj3*x3731))+(((0.15)*pz*x3731)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst118;
gconst118=IKsign(py);
IkReal x3733=IKsign(py);
IkReal x3734=((0.045)*x3733);
IkReal x3735=((0.3)*x3733);
dummyeval[0]=py;
dummyeval[1]=((IKabs((((cj3*x3734))+(((-1.0)*x3734))+(((-1.0)*sj3*x3735)))))+(IKabs((((cj3*x3735))+((sj3*x3734))+(((0.55)*x3733))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3736=((0.3)*sj3);
IkReal x3737=((0.045)*cj3);
IkReal x3738=((0.045)*sj3);
IkReal x3739=((0.3)*cj3);
IkReal x3740=(x3739+x3738);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+(((-1.0)*x3740)));
evalcond[2]=((-0.045)+(((-1.0)*x3736))+x3737);
evalcond[3]=((0.045)+(((-1.0)*x3737))+x3736);
evalcond[4]=((0.55)+x3740);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3742=IKPowWithIntegerCheck(py,-1);
if(!x3742.valid){
continue;
}
IkReal x3741=x3742.value;
if( IKabs((x3741*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x3741*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3741*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x3741*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x3741*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x3741*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3743=IKsin(j0);
IkReal x3744=IKcos(j0);
IkReal x3745=(py*x3744);
IkReal x3746=(py*x3743);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3746);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x3745))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3746))+(((-1.0)*pp))+(((-0.09)*x3745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3747 = IKatan2WithCheck((gconst118*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst118*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3747.valid){
continue;
}
j0array[0]=x3747.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3748=IKsin(j0);
IkReal x3749=IKcos(j0);
IkReal x3750=(py*x3749);
IkReal x3751=(py*x3748);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3751);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x3750))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3751))+(((-1.0)*pp))+(((-0.09)*x3750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst119;
gconst119=IKsign(py);
IkReal x3752=IKsign(py);
IkReal x3753=((0.045)*x3752);
IkReal x3754=((0.3)*x3752);
dummyeval[0]=py;
dummyeval[1]=((IKabs(((((-1.0)*cj3*x3754))+(((-1.0)*sj3*x3753))+(((-0.55)*x3752)))))+(IKabs((((cj3*x3753))+(((-1.0)*x3753))+(((-1.0)*sj3*x3754))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3755=((0.3)*sj3);
IkReal x3756=((0.045)*cj3);
IkReal x3757=x3493;
evalcond[0]=IKabs(py);
evalcond[1]=x3757;
evalcond[2]=((-0.045)+(((-1.0)*x3755))+x3756);
evalcond[3]=((0.045)+(((-1.0)*x3756))+x3755);
evalcond[4]=x3757;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(py,-1);
if(!x3759.valid){
continue;
}
IkReal x3758=x3759.value;
if( IKabs((x3758*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x3758*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3758*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x3758*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x3758*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x3758*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3760=IKsin(j0);
IkReal x3761=IKcos(j0);
IkReal x3762=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x3760*x3762)));
evalcond[1]=((-0.045)+(((-1.0)*x3761*x3762))+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x3761))+(((-1.0)*pp))+(((-1.1)*py*x3760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3763 = IKatan2WithCheck((gconst119*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst119*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3763.valid){
continue;
}
j0array[0]=x3763.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3764=IKsin(j0);
IkReal x3765=IKcos(j0);
IkReal x3766=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x3764*x3766)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x3765*x3766))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x3765))+(((-1.0)*pp))+(((-1.1)*py*x3764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst120;
gconst120=IKsign(px);
IkReal x3767=IKsign(px);
IkReal x3768=(cj3*x3767);
IkReal x3769=((0.045)*x3767);
dummyeval[0]=px;
dummyeval[1]=((IKabs((((sj3*x3769))+(((0.55)*x3767))+(((0.3)*x3768)))))+(IKabs(((((-0.045)*x3768))+(((0.3)*sj3*x3767))+x3769))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3770=((0.3)*sj3);
IkReal x3771=((0.045)*cj3);
IkReal x3772=((0.045)*sj3);
IkReal x3773=((0.3)*cj3);
IkReal x3774=(x3773+x3772);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x3774)));
evalcond[2]=((-0.045)+x3771+(((-1.0)*x3770)));
evalcond[3]=((0.045)+x3770+(((-1.0)*x3771)));
evalcond[4]=((0.55)+x3774);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3776=IKPowWithIntegerCheck(px,-1);
if(!x3776.valid){
continue;
}
IkReal x3775=x3776.value;
if( IKabs(((0.111111111111111)*x3775*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3775*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x3775*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x3775*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x3775*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x3775*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3777=IKsin(j0);
IkReal x3778=IKcos(j0);
IkReal x3779=(px*x3777);
IkReal x3780=(px*x3778);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3780);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x3779+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3780))+(((0.09)*x3779))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3781 = IKatan2WithCheck((gconst120*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst120*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3781.valid){
continue;
}
j0array[0]=x3781.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3782=IKsin(j0);
IkReal x3783=IKcos(j0);
IkReal x3784=(px*x3782);
IkReal x3785=(px*x3783);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x3785);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x3784+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x3784))+(((1.1)*x3785))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst121;
gconst121=IKsign(px);
IkReal x3786=IKsign(px);
IkReal x3787=(cj3*x3786);
IkReal x3788=((0.045)*x3786);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((-0.045)*x3787))+(((0.3)*sj3*x3786))+x3788)))+(IKabs(((((-0.3)*x3787))+(((-1.0)*sj3*x3788))+(((-0.55)*x3786))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3789=((0.3)*sj3);
IkReal x3790=((0.045)*cj3);
IkReal x3791=x3493;
evalcond[0]=IKabs(px);
evalcond[1]=x3791;
evalcond[2]=((-0.045)+(((-1.0)*x3789))+x3790);
evalcond[3]=((0.045)+(((-1.0)*x3790))+x3789);
evalcond[4]=x3791;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3793=IKPowWithIntegerCheck(px,-1);
if(!x3793.valid){
continue;
}
IkReal x3792=x3793.value;
if( IKabs((x3792*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x3792*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3792*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x3792*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x3792*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x3792*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3794=IKsin(j0);
IkReal x3795=IKcos(j0);
IkReal x3796=(px*x3794);
IkReal x3797=(px*x3795);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x3796+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3797))+(((-0.3)*cj3)));
evalcond[2]=((-0.2125)+(((0.09)*x3796))+(((-1.0)*pp))+(((-1.1)*x3797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3798 = IKatan2WithCheck((gconst121*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst121*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3798.valid){
continue;
}
j0array[0]=x3798.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3799=IKsin(j0);
IkReal x3800=IKcos(j0);
IkReal x3801=(px*x3799);
IkReal x3802=(px*x3800);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x3801+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x3802)));
evalcond[2]=((-0.2125)+(((0.09)*x3801))+(((-1.1)*x3802))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3803=(px*sj3);
IkReal x3804=((0.3)*cj3);
IkReal x3805=((0.3)*sj1);
IkReal x3806=(py*sj3);
IkReal x3807=((1.0)*cj1*pz);
IkReal x3808=((0.045)*py*sj1);
IkReal x3809=((0.045)*px*sj1);
CheckValue<IkReal> x3810 = IKatan2WithCheck((gconst109*(((((-1.0)*cj3*x3809))+(((-1.0)*py*x3807))+x3809+(((0.045)*x3806))+((x3803*x3805))+(((0.55)*py))+((py*x3804))))),(gconst109*(((((-1.0)*x3805*x3806))+(((-1.0)*x3808))+(((0.045)*x3803))+(((-1.0)*px*x3807))+((px*x3804))+(((0.55)*px))+((cj3*x3808))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3810.valid){
continue;
}
j0array[0]=x3810.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3811=IKsin(j0);
IkReal x3812=IKcos(j0);
IkReal x3813=((1.1)*sj1);
IkReal x3814=((0.3)*cj3);
IkReal x3815=((0.045)*sj3);
IkReal x3816=((1.0)*cj1);
IkReal x3817=(cj1*pz);
IkReal x3818=(px*x3811);
IkReal x3819=(px*x3812);
IkReal x3820=(py*x3811);
IkReal x3821=(py*x3812);
evalcond[0]=((((-1.0)*x3816*x3820))+(((-1.0)*x3816*x3819))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x3821))+x3818+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x3814))+(((-1.0)*x3815))+x3817+((sj1*x3820))+((sj1*x3819)));
evalcond[3]=((((-1.0)*x3820))+(((-1.0)*x3819))+(((0.55)*sj1))+((sj1*x3814))+((sj1*x3815)));
evalcond[4]=((-0.2125)+((x3813*x3820))+((x3813*x3819))+(((-0.09)*x3821))+(((-1.0)*pp))+(((1.1)*x3817))+(((0.09)*x3818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3822=((0.045)*cj1);
IkReal x3823=(pz*sj1);
IkReal x3824=((0.3)*cj1*sj3);
CheckValue<IkReal> x3825 = IKatan2WithCheck((gconst108*(((((-1.0)*cj3*px*x3822))+((px*x3822))+((px*x3824))+((py*x3823))))),(gconst108*((((cj3*py*x3822))+(((-1.0)*py*x3822))+(((-1.0)*py*x3824))+((px*x3823))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3825.valid){
continue;
}
j0array[0]=x3825.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3826=IKsin(j0);
IkReal x3827=IKcos(j0);
IkReal x3828=((1.1)*sj1);
IkReal x3829=((0.3)*cj3);
IkReal x3830=((0.045)*sj3);
IkReal x3831=((1.0)*cj1);
IkReal x3832=(cj1*pz);
IkReal x3833=(px*x3826);
IkReal x3834=(px*x3827);
IkReal x3835=(py*x3826);
IkReal x3836=(py*x3827);
evalcond[0]=((((-1.0)*x3831*x3834))+(((-1.0)*x3831*x3835))+((pz*sj1)));
evalcond[1]=((-0.045)+(((-1.0)*x3836))+(((0.045)*cj3))+x3833+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+((sj1*x3835))+((sj1*x3834))+(((-1.0)*x3829))+x3832+(((-1.0)*x3830)));
evalcond[3]=((((-1.0)*x3834))+(((-1.0)*x3835))+((sj1*x3830))+((sj1*x3829))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*x3832))+((x3828*x3835))+((x3828*x3834))+(((-1.0)*pp))+(((0.09)*x3833))+(((-0.09)*x3836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3837=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3837;
evalcond[3]=x3837;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst122;
gconst122=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst123;
IkReal x3838=((1.0)*sj2);
gconst123=IKsign(((((-1.0)*x3838*(py*py)))+(((-1.0)*x3838*(px*px)))));
IkReal x3839=((1.0)*sj2);
dummyeval[0]=((((-1.0)*x3839*(py*py)))+(((-1.0)*x3839*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst124;
gconst124=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3840=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=x3840;
evalcond[3]=x3840;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3841=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=x3841;
evalcond[3]=x3841;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3842=((0.3)*sj3);
IkReal x3843=((0.045)*px);
IkReal x3844=((0.045)*py);
CheckValue<IkReal> x3845 = IKatan2WithCheck((gconst124*((((py*x3842))+x3844+(((-1.0)*cj3*x3844))))),(gconst124*((x3843+((px*x3842))+(((-1.0)*cj3*x3843))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3845.valid){
continue;
}
j0array[0]=x3845.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3846=IKcos(j0);
IkReal x3847=IKsin(j0);
IkReal x3848=((1.0)*py);
IkReal x3849=(px*x3846);
evalcond[0]=(((px*x3847))+(((-1.0)*x3846*x3848)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x3849))+(((0.3)*sj3))+(((-1.0)*x3847*x3848)));
evalcond[2]=((-0.2125)+(((0.09)*x3849))+(((-1.0)*pp))+(((0.09)*py*x3847))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst126;
gconst126=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3850=((0.045)*cj3);
IkReal x3851=((0.3)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x3850))+x3851);
evalcond[3]=((-0.045)+(((-1.0)*x3851))+x3850);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3852=((0.3)*sj3);
IkReal x3853=((0.045)*px);
IkReal x3854=((0.045)*py);
CheckValue<IkReal> x3855 = IKatan2WithCheck((gconst126*(((((-1.0)*cj3*x3854))+((py*x3852))+x3854))),(gconst126*(((((-1.0)*cj3*x3853))+x3853+((px*x3852))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3855.valid){
continue;
}
j0array[0]=x3855.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3856=IKsin(j0);
IkReal x3857=IKcos(j0);
IkReal x3858=(px*x3857);
IkReal x3859=(py*x3856);
evalcond[0]=((((-1.0)*py*x3857))+((px*x3856)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x3858+x3859+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x3859))+(((-0.09)*x3858))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3860=((0.045)*cj2);
IkReal x3861=((0.3)*sj3);
IkReal x3862=((0.045)*cj3);
evalcond[0]=((px*px)+(py*py));
evalcond[1]=(((sj2*x3861))+(((0.045)*sj2))+(((-1.0)*sj2*x3862)));
evalcond[2]=0;
evalcond[3]=((0.045)+(((-1.0)*x3862))+x3861);
evalcond[4]=((((-1.0)*cj3*x3860))+((cj2*x3861))+x3860);
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3863=((0.045)*cj2);
IkReal x3864=((0.3)*sj3);
IkReal x3865=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=(((sj2*x3864))+(((0.045)*sj2))+(((-1.0)*sj2*x3865)));
evalcond[2]=0;
evalcond[3]=((0.045)+(((-1.0)*x3865))+x3864);
evalcond[4]=((((-1.0)*cj3*x3863))+((cj2*x3864))+x3863);
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3866=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=x3866;
evalcond[3]=x3866;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3869=IKPowWithIntegerCheck(py,-1);
if(!x3869.valid){
continue;
}
IkReal x3867=x3869.value;
IkReal x3868=((0.045)*x3867);
sj0array[0]=((((-1.0)*cj3*x3868))+x3868+(((0.3)*sj3*x3867)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3870=((0.045)*cj3);
IkReal x3871=((0.3)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.045)+x3871+(((-1.0)*x3870)));
evalcond[3]=((-0.045)+x3870+(((-1.0)*x3871)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3874=IKPowWithIntegerCheck(py,-1);
if(!x3874.valid){
continue;
}
IkReal x3872=x3874.value;
IkReal x3873=((0.045)*x3872);
sj0array[0]=((((-0.3)*sj3*x3872))+(((-1.0)*x3873))+((cj3*x3873)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3875=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x3875;
evalcond[3]=x3875;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3878=IKPowWithIntegerCheck(px,-1);
if(!x3878.valid){
continue;
}
IkReal x3876=x3878.value;
IkReal x3877=((0.045)*x3876);
cj0array[0]=((((0.3)*sj3*x3876))+x3877+(((-1.0)*cj3*x3877)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3879=((0.045)*cj3);
IkReal x3880=((0.3)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.045)+x3880+(((-1.0)*x3879)));
evalcond[3]=((-0.045)+(((-1.0)*x3880))+x3879);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3883=IKPowWithIntegerCheck(px,-1);
if(!x3883.valid){
continue;
}
IkReal x3881=x3883.value;
IkReal x3882=((0.045)*x3881);
cj0array[0]=((((-1.0)*x3882))+((cj3*x3882))+(((-0.3)*sj3*x3881)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3884=sj2*sj2;
IkReal x3885=(cj2*sj2);
IkReal x3886=((0.3)*sj3);
IkReal x3887=((0.045)*cj3);
IkReal x3888=(px*x3887);
IkReal x3889=(px*x3884);
IkReal x3890=(py*x3884);
CheckValue<IkReal> x3891 = IKatan2WithCheck((gconst123*(((((-0.045)*py*x3885))+((x3886*x3889))+(((-1.0)*py*x3885*x3886))+((py*x3885*x3887))+(((0.045)*x3889))+(((-1.0)*x3884*x3888))))),(gconst123*(((((-0.045)*px*x3885))+(((-1.0)*px*x3885*x3886))+(((-1.0)*x3886*x3890))+((x3887*x3890))+((x3885*x3888))+(((-0.045)*x3890))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3891.valid){
continue;
}
j0array[0]=x3891.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3892=IKcos(j0);
IkReal x3893=IKsin(j0);
IkReal x3894=((0.045)*cj2);
IkReal x3895=((0.09)*sj2);
IkReal x3896=((0.3)*sj3);
IkReal x3897=((0.045)*cj3);
IkReal x3898=((0.09)*cj2);
IkReal x3899=((1.0)*cj2);
IkReal x3900=(px*x3893);
IkReal x3901=(px*x3892);
IkReal x3902=(py*x3892);
IkReal x3903=(py*x3893);
evalcond[0]=((((0.045)*sj2))+(((-1.0)*x3902))+x3900+(((-1.0)*sj2*x3897))+((sj2*x3896)));
evalcond[1]=(((cj2*x3896))+(((-1.0)*x3901))+(((-1.0)*x3903))+x3894+(((-1.0)*cj3*x3894)));
evalcond[2]=(((sj2*x3901))+((sj2*x3903))+(((-1.0)*x3899*x3902))+((cj2*x3900)));
evalcond[3]=((0.045)+((sj2*x3900))+(((-1.0)*sj2*x3902))+(((-1.0)*x3899*x3903))+(((-1.0)*x3899*x3901))+x3896+(((-1.0)*x3897)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+((x3895*x3902))+(((1.1)*pz))+(((-1.0)*x3895*x3900))+((x3898*x3903))+((x3898*x3901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3904=((0.045)*px);
IkReal x3905=(cj2*py);
IkReal x3906=((0.3)*sj3);
IkReal x3907=(py*sj2);
IkReal x3908=((0.045)*cj3*py);
CheckValue<IkReal> x3909 = IKatan2WithCheck((gconst122*(((((-1.0)*px*sj2*x3906))+((cj3*sj2*x3904))+((x3905*x3906))+(((0.045)*x3905))+(((-1.0)*sj2*x3904))+(((-0.045)*cj3*x3905))))),(gconst122*((((x3906*x3907))+(((0.045)*x3907))+((cj2*px*x3906))+(((-1.0)*cj2*cj3*x3904))+(((-0.045)*cj3*x3907))+((cj2*x3904))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3909.valid){
continue;
}
j0array[0]=x3909.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3910=IKcos(j0);
IkReal x3911=IKsin(j0);
IkReal x3912=((0.045)*cj2);
IkReal x3913=((0.09)*sj2);
IkReal x3914=((0.3)*sj3);
IkReal x3915=((0.045)*cj3);
IkReal x3916=((0.09)*cj2);
IkReal x3917=((1.0)*cj2);
IkReal x3918=(px*x3911);
IkReal x3919=(px*x3910);
IkReal x3920=(py*x3910);
IkReal x3921=(py*x3911);
evalcond[0]=((((-1.0)*x3920))+(((-1.0)*sj2*x3915))+(((0.045)*sj2))+x3918+((sj2*x3914)));
evalcond[1]=((((-1.0)*x3921))+(((-1.0)*x3919))+(((-1.0)*cj3*x3912))+x3912+((cj2*x3914)));
evalcond[2]=(((sj2*x3921))+(((-1.0)*x3917*x3920))+((cj2*x3918))+((sj2*x3919)));
evalcond[3]=((0.045)+(((-1.0)*x3915))+(((-1.0)*x3917*x3919))+(((-1.0)*x3917*x3921))+x3914+(((-1.0)*sj2*x3920))+((sj2*x3918)));
evalcond[4]=((-0.2125)+((x3916*x3921))+(((-1.0)*pp))+(((1.1)*pz))+((x3916*x3919))+(((-1.0)*x3913*x3918))+((x3913*x3920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3922=((0.045)*sj3);
IkReal x3923=((0.3)*cj3);
IkReal x3924=(x3922+x3923);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x3924))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x3924+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst128;
gconst128=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst129;
gconst129=IKsign((((sj2*(px*px)))+((sj2*(py*py)))));
dummyeval[0]=(((sj2*(px*px)))+((sj2*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst130;
gconst130=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3925=((0.045)*cj3);
IkReal x3926=((0.3)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x3925))+x3926);
evalcond[3]=((-0.045)+(((-1.0)*x3926))+x3925);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3927=((0.3)*sj3);
IkReal x3928=((0.045)*px);
IkReal x3929=((0.045)*py);
CheckValue<IkReal> x3930 = IKatan2WithCheck((gconst130*((x3929+((py*x3927))+(((-1.0)*cj3*x3929))))),(gconst130*((((px*x3927))+x3928+(((-1.0)*cj3*x3928))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3930.valid){
continue;
}
j0array[0]=x3930.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3931=IKsin(j0);
IkReal x3932=IKcos(j0);
IkReal x3933=(px*x3932);
IkReal x3934=(py*x3931);
evalcond[0]=((((-1.0)*py*x3932))+((px*x3931)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x3934+x3933+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x3933))+(((-0.09)*x3934))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst132;
gconst132=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3935=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=x3935;
evalcond[3]=x3935;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3936=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=x3936;
evalcond[3]=x3936;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3937=((0.3)*sj3);
IkReal x3938=((0.045)*px);
IkReal x3939=((0.045)*py);
CheckValue<IkReal> x3940 = IKatan2WithCheck((gconst132*((((py*x3937))+x3939+(((-1.0)*cj3*x3939))))),(gconst132*((x3938+(((-1.0)*cj3*x3938))+((px*x3937))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3940.valid){
continue;
}
j0array[0]=x3940.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3941=IKcos(j0);
IkReal x3942=IKsin(j0);
IkReal x3943=((1.0)*py);
IkReal x3944=(px*x3941);
evalcond[0]=((((-1.0)*x3941*x3943))+((px*x3942)));
evalcond[1]=((0.045)+(((-1.0)*x3944))+(((-1.0)*x3942*x3943))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x3944))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*x3942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3945=((0.045)*cj2);
IkReal x3946=((0.3)*sj3);
IkReal x3947=((0.045)*cj3);
evalcond[0]=((px*px)+(py*py));
evalcond[1]=((((-1.0)*sj2*x3947))+(((0.045)*sj2))+((sj2*x3946)));
evalcond[2]=0;
evalcond[3]=((0.045)+x3946+(((-1.0)*x3947)));
evalcond[4]=(((cj3*x3945))+(((-1.0)*cj2*x3946))+(((-1.0)*x3945)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3948=((0.045)*cj2);
IkReal x3949=((0.3)*sj3);
IkReal x3950=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((((-1.0)*sj2*x3950))+(((0.045)*sj2))+((sj2*x3949)));
evalcond[2]=0;
evalcond[3]=((0.045)+x3949+(((-1.0)*x3950)));
evalcond[4]=(((cj3*x3948))+(((-1.0)*cj2*x3949))+(((-1.0)*x3948)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3951=((0.045)*cj3);
IkReal x3952=((0.3)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.045)+x3952+(((-1.0)*x3951)));
evalcond[3]=((-0.045)+x3951+(((-1.0)*x3952)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3955=IKPowWithIntegerCheck(py,-1);
if(!x3955.valid){
continue;
}
IkReal x3953=x3955.value;
IkReal x3954=((0.045)*x3953);
sj0array[0]=((((-1.0)*x3954))+((cj3*x3954))+(((-0.3)*sj3*x3953)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3956=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=x3956;
evalcond[3]=x3956;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3959=IKPowWithIntegerCheck(py,-1);
if(!x3959.valid){
continue;
}
IkReal x3957=x3959.value;
IkReal x3958=((0.045)*x3957);
sj0array[0]=((((-1.0)*cj3*x3958))+(((0.3)*sj3*x3957))+x3958);
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3960=((0.045)*cj3);
IkReal x3961=((0.3)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x3960))+x3961);
evalcond[3]=((-0.045)+(((-1.0)*x3961))+x3960);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3964=IKPowWithIntegerCheck(px,-1);
if(!x3964.valid){
continue;
}
IkReal x3962=x3964.value;
IkReal x3963=((0.045)*x3962);
cj0array[0]=((((-1.0)*x3963))+(((-0.3)*sj3*x3962))+((cj3*x3963)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3965=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x3965;
evalcond[3]=x3965;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3968=IKPowWithIntegerCheck(px,-1);
if(!x3968.valid){
continue;
}
IkReal x3966=x3968.value;
IkReal x3967=((0.045)*x3966);
cj0array[0]=((((0.3)*sj3*x3966))+x3967+(((-1.0)*cj3*x3967)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3969=sj2*sj2;
IkReal x3970=(cj2*sj2);
IkReal x3971=((0.3)*sj3);
IkReal x3972=((0.045)*py);
IkReal x3973=((0.045)*cj3*px);
IkReal x3974=(px*x3969);
IkReal x3975=(x3969*x3972);
CheckValue<IkReal> x3976 = IKatan2WithCheck((gconst129*((((cj3*x3970*x3972))+(((-1.0)*x3970*x3972))+(((-1.0)*x3971*x3974))+((x3969*x3973))+(((-0.045)*x3974))+(((-1.0)*py*x3970*x3971))))),(gconst129*(((((-1.0)*px*x3970*x3971))+((x3970*x3973))+x3975+((py*x3969*x3971))+(((-0.045)*px*x3970))+(((-1.0)*cj3*x3975))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3976.valid){
continue;
}
j0array[0]=x3976.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3977=IKcos(j0);
IkReal x3978=IKsin(j0);
IkReal x3979=((0.045)*cj2);
IkReal x3980=((0.09)*sj2);
IkReal x3981=((0.3)*sj3);
IkReal x3982=((0.045)*cj3);
IkReal x3983=((1.0)*sj2);
IkReal x3984=((0.09)*cj2);
IkReal x3985=(px*x3978);
IkReal x3986=(px*x3977);
IkReal x3987=(py*x3977);
IkReal x3988=(py*x3978);
evalcond[0]=((((-1.0)*sj2*x3982))+(((0.045)*sj2))+x3985+((sj2*x3981))+(((-1.0)*x3987)));
evalcond[1]=((((-1.0)*cj2*x3981))+(((-1.0)*x3979))+((cj3*x3979))+(((-1.0)*x3988))+(((-1.0)*x3986)));
evalcond[2]=(((cj2*x3985))+(((-1.0)*x3983*x3988))+(((-1.0)*x3983*x3986))+(((-1.0)*cj2*x3987)));
evalcond[3]=((0.045)+((cj2*x3986))+((cj2*x3988))+(((-1.0)*x3983*x3987))+x3981+((sj2*x3985))+(((-1.0)*x3982)));
evalcond[4]=((-0.2125)+(((-1.0)*x3984*x3986))+(((-1.0)*x3984*x3988))+(((-1.0)*pp))+(((-1.1)*pz))+((x3980*x3987))+(((-1.0)*x3980*x3985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3989=(px*sj2);
IkReal x3990=((0.3)*sj3);
IkReal x3991=(cj2*py);
IkReal x3992=(py*sj2);
IkReal x3993=((0.045)*cj3*py);
IkReal x3994=((0.045)*cj2*px);
CheckValue<IkReal> x3995 = IKatan2WithCheck((gconst128*(((((-1.0)*x3989*x3990))+(((-1.0)*x3990*x3991))+(((-0.045)*x3989))+(((0.045)*cj3*x3991))+(((-0.045)*x3991))+(((0.045)*cj3*x3989))))),(gconst128*(((((-1.0)*x3994))+(((-1.0)*cj2*px*x3990))+((x3990*x3992))+(((-0.045)*cj3*x3992))+((cj3*x3994))+(((0.045)*x3992))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3995.valid){
continue;
}
j0array[0]=x3995.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3996=IKcos(j0);
IkReal x3997=IKsin(j0);
IkReal x3998=((0.045)*cj2);
IkReal x3999=((0.09)*sj2);
IkReal x4000=((0.3)*sj3);
IkReal x4001=((0.045)*cj3);
IkReal x4002=((1.0)*sj2);
IkReal x4003=((0.09)*cj2);
IkReal x4004=(px*x3997);
IkReal x4005=(px*x3996);
IkReal x4006=(py*x3996);
IkReal x4007=(py*x3997);
evalcond[0]=((((-1.0)*x4006))+(((0.045)*sj2))+x4004+(((-1.0)*sj2*x4001))+((sj2*x4000)));
evalcond[1]=((((-1.0)*x3998))+(((-1.0)*x4007))+(((-1.0)*x4005))+(((-1.0)*cj2*x4000))+((cj3*x3998)));
evalcond[2]=((((-1.0)*x4002*x4007))+(((-1.0)*x4002*x4005))+(((-1.0)*cj2*x4006))+((cj2*x4004)));
evalcond[3]=((0.045)+(((-1.0)*x4001))+(((-1.0)*x4002*x4006))+x4000+((sj2*x4004))+((cj2*x4005))+((cj2*x4007)));
evalcond[4]=((-0.2125)+(((-1.0)*x3999*x4004))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x4003*x4007))+(((-1.0)*x4003*x4005))+((x3999*x4006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4008=((1.0)*pp);
IkReal x4009=((0.3)*sj3);
IkReal x4010=((0.045)*cj3);
IkReal x4011=((0.045)*cj2);
IkReal x4012=((0.3)*cj3);
IkReal x4013=((0.045)*sj3);
IkReal x4014=(pz*sj1);
IkReal x4015=(cj2*sj1);
IkReal x4016=(cj1*cj2);
IkReal x4017=(cj1*pz);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x4008))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+x4017+(((-1.0)*x4012))+(((-1.0)*x4013)));
evalcond[3]=((((0.045)*sj2))+((sj2*x4009))+(((-1.0)*sj2*x4010)));
evalcond[4]=((-1.0)*sj2*x4014);
evalcond[5]=(((sj1*x4011))+(((-0.55)*cj1))+(((-1.0)*cj1*x4013))+(((-1.0)*cj1*x4012))+pz+((x4009*x4015))+(((-1.0)*x4010*x4015)));
evalcond[6]=((0.045)+x4009+(((-1.0)*x4010))+((cj2*x4014)));
evalcond[7]=(((sj1*x4012))+((sj1*x4013))+((cj1*x4011))+((x4009*x4016))+(((0.55)*sj1))+(((-1.0)*x4010*x4016)));
evalcond[8]=((-0.2125)+(((-0.09)*cj2*x4014))+(((-1.0)*x4008))+(((1.1)*x4017)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst134;
gconst134=IKsign(py);
IkReal x4018=IKsign(py);
IkReal x4019=((0.045)*x4018);
IkReal x4020=(sj1*x4018);
dummyeval[0]=py;
dummyeval[1]=((IKabs(((((0.3)*sj3*x4018))+(((-1.0)*cj3*x4019))+x4019)))+(IKabs(((((0.3)*cj3*x4020))+(((0.55)*x4020))+((sj1*sj3*x4019))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4021=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=x4021;
evalcond[2]=0;
evalcond[3]=x4021;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4023=IKPowWithIntegerCheck(py,-1);
if(!x4023.valid){
continue;
}
IkReal x4022=x4023.value;
cj0array[0]=((((0.1275)*x4022))+(((0.30675)*sj3*x4022))+(((-0.15)*pz*x4022)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4024=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=x4024;
evalcond[2]=0;
evalcond[3]=x4024;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(py,-1);
if(!x4026.valid){
continue;
}
IkReal x4025=x4026.value;
cj0array[0]=((((0.1275)*x4025))+(((0.15)*pz*x4025))+(((0.30675)*sj3*x4025)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst135;
gconst135=IKsign(py);
IkReal x4027=IKsign(py);
IkReal x4028=((0.045)*x4027);
IkReal x4029=((0.3)*x4027);
dummyeval[0]=py;
dummyeval[1]=((IKabs((((sj3*x4029))+(((-1.0)*cj3*x4028))+x4028)))+(IKabs((((sj3*x4028))+(((0.55)*x4027))+((cj3*x4029))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4030=((0.045)*sj3);
IkReal x4031=((0.3)*cj3);
IkReal x4032=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x4033=(x4031+x4030);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+(((-1.0)*x4033)));
evalcond[2]=x4032;
evalcond[3]=x4032;
evalcond[4]=((0.55)+x4033);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4035=IKPowWithIntegerCheck(py,-1);
if(!x4035.valid){
continue;
}
IkReal x4034=x4035.value;
if( IKabs((x4034*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x4034*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4034*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x4034*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4034*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x4034*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4036=IKsin(j0);
IkReal x4037=IKcos(j0);
IkReal x4038=(py*x4037);
IkReal x4039=(py*x4036);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x4039);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x4038))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x4039))+(((-1.0)*pp))+(((0.09)*x4038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4040 = IKatan2WithCheck((gconst135*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst135*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4040.valid){
continue;
}
j0array[0]=x4040.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4041=IKsin(j0);
IkReal x4042=IKcos(j0);
IkReal x4043=(py*x4042);
IkReal x4044=(py*x4041);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x4044);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x4043))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x4044))+(((0.09)*x4043))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst136;
gconst136=IKsign(py);
IkReal x4045=IKsign(py);
IkReal x4046=((0.045)*x4045);
IkReal x4047=((0.3)*x4045);
dummyeval[0]=py;
dummyeval[1]=((IKabs(((((-1.0)*cj3*x4046))+((sj3*x4047))+x4046)))+(IKabs(((((-1.0)*sj3*x4046))+(((-1.0)*cj3*x4047))+(((-0.55)*x4045))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4048=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x4049=x3493;
evalcond[0]=IKabs(py);
evalcond[1]=x4049;
evalcond[2]=x4048;
evalcond[3]=x4048;
evalcond[4]=x4049;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4051=IKPowWithIntegerCheck(py,-1);
if(!x4051.valid){
continue;
}
IkReal x4050=x4051.value;
if( IKabs((x4050*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x4050*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4050*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x4050*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4050*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x4050*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4052=IKcos(j0);
IkReal x4053=IKsin(j0);
IkReal x4054=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x4053*x4054)));
evalcond[1]=((0.045)+(((-1.0)*x4052*x4054))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x4053))+(((-1.0)*pp))+(((0.09)*py*x4052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4055 = IKatan2WithCheck((gconst136*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst136*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4055.valid){
continue;
}
j0array[0]=x4055.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4056=IKcos(j0);
IkReal x4057=IKsin(j0);
IkReal x4058=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x4057*x4058)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x4056*x4058)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x4057))+(((-1.0)*pp))+(((0.09)*py*x4056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4059=(cj1*pz);
IkReal x4060=((0.3)*cj3);
IkReal x4061=((0.045)*sj3);
IkReal x4062=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+x4059+(((-1.0)*x4061))+(((-1.0)*x4060)));
evalcond[2]=x4062;
evalcond[3]=((-1.0)*pz*sj1);
evalcond[4]=x4062;
evalcond[5]=((((0.55)*sj1))+((sj1*x4061))+((sj1*x4060)));
evalcond[6]=((-0.2125)+(((1.1)*x4059))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4064=IKPowWithIntegerCheck(py,-1);
if(!x4064.valid){
continue;
}
IkReal x4063=x4064.value;
cj0array[0]=((((11.1111111111111)*pp*x4063))+(((-8.02777777777778)*x4063)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-1.0)*py*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4066=IKPowWithIntegerCheck(py,-1);
if(!x4066.valid){
continue;
}
IkReal x4065=x4066.value;
cj0array[0]=((((11.1111111111111)*pp*x4065))+(((-8.02777777777778)*x4065)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4067=((-1.0)*py);
evalcond[0]=(x4067*(IKcos(j0)));
evalcond[1]=(x4067*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4069=IKPowWithIntegerCheck(py,-1);
if(!x4069.valid){
continue;
}
IkReal x4068=x4069.value;
CheckValue<IkReal> x4070=IKPowWithIntegerCheck(sj1,-1);
if(!x4070.valid){
continue;
}
if( IKabs((x4068*(x4070.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4068*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4068*(x4070.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))+IKsqr((x4068*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4068*(x4070.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))), (x4068*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4071=IKsin(j0);
IkReal x4072=IKcos(j0);
IkReal x4073=(cj1*pz);
IkReal x4074=((0.3)*cj3);
IkReal x4075=((0.045)*sj3);
IkReal x4076=(py*x4071);
IkReal x4077=(py*x4072);
evalcond[0]=(((cj1*x4076))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-1.0)*x4077))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x4074))+(((-1.0)*x4075))+((sj1*x4076))+x4073);
evalcond[3]=((((-1.0)*x4076))+((sj1*x4074))+((sj1*x4075))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((0.09)*x4077))+(((-1.0)*pp))+(((1.1)*sj1*x4076))+(((1.1)*x4073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(py,-1);
if(!x4079.valid){
continue;
}
IkReal x4078=x4079.value;
CheckValue<IkReal> x4080=IKPowWithIntegerCheck(cj1,-1);
if(!x4080.valid){
continue;
}
if( IKabs((pz*sj1*x4078*(x4080.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4078*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((pz*sj1*x4078*(x4080.value)))+IKsqr((x4078*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((pz*sj1*x4078*(x4080.value)), (x4078*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4081=IKsin(j0);
IkReal x4082=IKcos(j0);
IkReal x4083=(cj1*pz);
IkReal x4084=((0.3)*cj3);
IkReal x4085=((0.045)*sj3);
IkReal x4086=(py*x4081);
IkReal x4087=(py*x4082);
evalcond[0]=((((-1.0)*pz*sj1))+((cj1*x4086)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x4087))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x4085))+(((-1.0)*x4084))+x4083+((sj1*x4086)));
evalcond[3]=((((-1.0)*x4086))+(((0.55)*sj1))+((sj1*x4085))+((sj1*x4084)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x4086))+(((-1.0)*pp))+(((0.09)*x4087))+(((1.1)*x4083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4088 = IKatan2WithCheck((gconst134*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),(gconst134*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4088.valid){
continue;
}
j0array[0]=x4088.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4089=IKsin(j0);
IkReal x4090=IKcos(j0);
IkReal x4091=(cj1*pz);
IkReal x4092=((0.3)*cj3);
IkReal x4093=((0.045)*sj3);
IkReal x4094=(py*x4089);
IkReal x4095=(py*x4090);
evalcond[0]=((((-1.0)*pz*sj1))+((cj1*x4094)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x4095)));
evalcond[2]=((-0.55)+(((-1.0)*x4092))+(((-1.0)*x4093))+x4091+((sj1*x4094)));
evalcond[3]=((((-1.0)*x4094))+(((0.55)*sj1))+((sj1*x4092))+((sj1*x4093)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x4094))+(((-1.0)*pp))+(((1.1)*x4091))+(((0.09)*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst137;
gconst137=IKsign(py);
IkReal x4096=IKsign(py);
IkReal x4097=((0.045)*x4096);
IkReal x4098=(sj1*x4096);
dummyeval[0]=py;
dummyeval[1]=((IKabs(((((0.55)*x4098))+(((0.3)*cj3*x4098))+((sj1*sj3*x4097)))))+(IKabs(((((-0.3)*sj3*x4096))+(((-1.0)*x4097))+((cj3*x4097))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4099=((0.30675)*sj3);
IkReal x4100=((0.15)*pz);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.1275)+(((-1.0)*x4099))+x4100);
evalcond[2]=0;
evalcond[3]=((0.1275)+x4099+(((-1.0)*x4100)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4102=IKPowWithIntegerCheck(py,-1);
if(!x4102.valid){
continue;
}
IkReal x4101=x4102.value;
cj0array[0]=((((-0.1275)*x4101))+(((0.15)*pz*x4101))+(((-0.30675)*sj3*x4101)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4103=((0.15)*pz);
IkReal x4104=((0.30675)*sj3);
IkReal x4105=(x4103+x4104);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.1275)+(((-1.0)*x4105)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x4105);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4107=IKPowWithIntegerCheck(py,-1);
if(!x4107.valid){
continue;
}
IkReal x4106=x4107.value;
cj0array[0]=((((-0.1275)*x4106))+(((-0.30675)*sj3*x4106))+(((-0.15)*pz*x4106)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst138;
gconst138=IKsign(py);
IkReal x4108=IKsign(py);
IkReal x4109=((0.045)*x4108);
IkReal x4110=((0.3)*x4108);
dummyeval[0]=py;
dummyeval[1]=((IKabs((((sj3*x4109))+(((0.55)*x4108))+((cj3*x4110)))))+(IKabs(((((-1.0)*sj3*x4110))+(((-1.0)*x4109))+((cj3*x4109))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4111=((0.3)*sj3);
IkReal x4112=((0.045)*cj3);
IkReal x4113=((0.045)*sj3);
IkReal x4114=((0.3)*cj3);
IkReal x4115=(x4114+x4113);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+(((-1.0)*x4115)));
evalcond[2]=((-0.045)+(((-1.0)*x4111))+x4112);
evalcond[3]=((0.045)+(((-1.0)*x4112))+x4111);
evalcond[4]=((0.55)+x4115);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4117=IKPowWithIntegerCheck(py,-1);
if(!x4117.valid){
continue;
}
IkReal x4116=x4117.value;
if( IKabs((x4116*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x4116*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4116*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x4116*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4116*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x4116*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4118=IKsin(j0);
IkReal x4119=IKcos(j0);
IkReal x4120=(py*x4119);
IkReal x4121=(py*x4118);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x4121);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x4120))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x4121))+(((-1.0)*pp))+(((-0.09)*x4120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4122 = IKatan2WithCheck((gconst138*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst138*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4122.valid){
continue;
}
j0array[0]=x4122.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4123=IKsin(j0);
IkReal x4124=IKcos(j0);
IkReal x4125=(py*x4124);
IkReal x4126=(py*x4123);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x4126);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x4125))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x4126))+(((-1.0)*pp))+(((-0.09)*x4125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst139;
gconst139=IKsign(py);
IkReal x4127=IKsign(py);
IkReal x4128=((0.045)*x4127);
IkReal x4129=((0.3)*x4127);
dummyeval[0]=py;
dummyeval[1]=((IKabs(((((-1.0)*cj3*x4129))+(((-1.0)*sj3*x4128))+(((-0.55)*x4127)))))+(IKabs(((((-1.0)*sj3*x4129))+(((-1.0)*x4128))+((cj3*x4128))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4130=((0.3)*sj3);
IkReal x4131=((0.045)*cj3);
IkReal x4132=x3493;
evalcond[0]=IKabs(py);
evalcond[1]=x4132;
evalcond[2]=((-0.045)+x4131+(((-1.0)*x4130)));
evalcond[3]=((0.045)+x4130+(((-1.0)*x4131)));
evalcond[4]=x4132;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4134=IKPowWithIntegerCheck(py,-1);
if(!x4134.valid){
continue;
}
IkReal x4133=x4134.value;
if( IKabs((x4133*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x4133*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4133*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x4133*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4133*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x4133*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4135=IKsin(j0);
IkReal x4136=IKcos(j0);
IkReal x4137=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x4135*x4137)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x4136*x4137))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x4136))+(((-1.0)*pp))+(((-1.1)*py*x4135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4138 = IKatan2WithCheck((gconst139*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst139*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4138.valid){
continue;
}
j0array[0]=x4138.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4139=IKsin(j0);
IkReal x4140=IKcos(j0);
IkReal x4141=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x4139*x4141)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x4140*x4141))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*py*x4140))+(((-1.1)*py*x4139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4142=((0.3)*sj3);
IkReal x4143=((0.045)*cj3);
IkReal x4144=(cj1*pz);
IkReal x4145=((0.3)*cj3);
IkReal x4146=((0.045)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+x4144+(((-1.0)*x4145))+(((-1.0)*x4146)));
evalcond[2]=((-0.045)+x4143+(((-1.0)*x4142)));
evalcond[3]=(pz*sj1);
evalcond[4]=((0.045)+x4142+(((-1.0)*x4143)));
evalcond[5]=(((sj1*x4146))+((sj1*x4145))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x4144)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4148=IKPowWithIntegerCheck(py,-1);
if(!x4148.valid){
continue;
}
IkReal x4147=x4148.value;
cj0array[0]=((((-11.1111111111111)*pp*x4147))+(((8.02777777777778)*x4147)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4149=((-1.0)*py);
evalcond[0]=(x4149*(IKcos(j0)));
evalcond[1]=(x4149*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4151=IKPowWithIntegerCheck(py,-1);
if(!x4151.valid){
continue;
}
IkReal x4150=x4151.value;
cj0array[0]=((((-11.1111111111111)*pp*x4150))+(((8.02777777777778)*x4150)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-1.0)*py*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4153=IKPowWithIntegerCheck(py,-1);
if(!x4153.valid){
continue;
}
IkReal x4152=x4153.value;
CheckValue<IkReal> x4154=IKPowWithIntegerCheck(sj1,-1);
if(!x4154.valid){
continue;
}
if( IKabs((x4152*(x4154.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4152*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4152*(x4154.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))+IKsqr((x4152*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4152*(x4154.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))), (x4152*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4155=IKsin(j0);
IkReal x4156=IKcos(j0);
IkReal x4157=(cj1*pz);
IkReal x4158=((0.045)*sj3);
IkReal x4159=((0.3)*cj3);
IkReal x4160=(py*x4155);
IkReal x4161=(py*x4156);
evalcond[0]=((((-1.0)*cj1*x4160))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x4161))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x4157+(((-1.0)*x4158))+(((-1.0)*x4159))+((sj1*x4160)));
evalcond[3]=((((-1.0)*x4160))+((sj1*x4159))+((sj1*x4158))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x4160))+(((-1.0)*pp))+(((-0.09)*x4161))+(((1.1)*x4157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4163=IKPowWithIntegerCheck(py,-1);
if(!x4163.valid){
continue;
}
IkReal x4162=x4163.value;
CheckValue<IkReal> x4164=IKPowWithIntegerCheck(cj1,-1);
if(!x4164.valid){
continue;
}
if( IKabs((pz*sj1*x4162*(x4164.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4162*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((pz*sj1*x4162*(x4164.value)))+IKsqr((x4162*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((pz*sj1*x4162*(x4164.value)), (x4162*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4165=IKsin(j0);
IkReal x4166=IKcos(j0);
IkReal x4167=(cj1*pz);
IkReal x4168=((0.045)*sj3);
IkReal x4169=((0.3)*cj3);
IkReal x4170=(py*x4165);
IkReal x4171=(py*x4166);
evalcond[0]=((((-1.0)*cj1*x4170))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x4171))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x4168))+(((-1.0)*x4169))+((sj1*x4170))+x4167);
evalcond[3]=((((-1.0)*x4170))+(((0.55)*sj1))+((sj1*x4168))+((sj1*x4169)));
evalcond[4]=((-0.2125)+(((-0.09)*x4171))+(((1.1)*x4167))+(((-1.0)*pp))+(((1.1)*sj1*x4170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4172 = IKatan2WithCheck((gconst137*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),(gconst137*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4172.valid){
continue;
}
j0array[0]=x4172.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4173=IKsin(j0);
IkReal x4174=IKcos(j0);
IkReal x4175=(cj1*pz);
IkReal x4176=((0.045)*sj3);
IkReal x4177=((0.3)*cj3);
IkReal x4178=(py*x4173);
IkReal x4179=(py*x4174);
evalcond[0]=((((-1.0)*cj1*x4178))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x4179))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x4177))+(((-1.0)*x4176))+((sj1*x4178))+x4175);
evalcond[3]=(((sj1*x4177))+((sj1*x4176))+(((-1.0)*x4178))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-0.09)*x4179))+(((-1.0)*pp))+(((1.1)*x4175))+(((1.1)*sj1*x4178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4180=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4180;
evalcond[3]=x4180;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst140;
gconst140=IKsign((((py*(cj2*cj2)))+((py*(sj2*sj2)))));
dummyeval[0]=(((py*(cj2*cj2)))+((py*(sj2*sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4181=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=x4181;
evalcond[3]=x4181;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4184=IKPowWithIntegerCheck(py,-1);
if(!x4184.valid){
continue;
}
IkReal x4182=x4184.value;
IkReal x4183=((0.045)*x4182);
sj0array[0]=((((0.3)*sj3*x4182))+x4183+(((-1.0)*cj3*x4183)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4185=((0.045)*cj3);
IkReal x4186=((0.3)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x4185))+x4186);
evalcond[3]=((-0.045)+(((-1.0)*x4186))+x4185);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4189=IKPowWithIntegerCheck(py,-1);
if(!x4189.valid){
continue;
}
IkReal x4187=x4189.value;
IkReal x4188=((0.045)*x4187);
sj0array[0]=((((-0.3)*sj3*x4187))+(((-1.0)*x4188))+((cj3*x4188)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4190=((0.045)*cj2);
IkReal x4191=((0.3)*sj3);
IkReal x4192=((0.045)*cj3);
evalcond[0]=IKabs(py);
evalcond[1]=(((sj2*x4191))+(((0.045)*sj2))+(((-1.0)*sj2*x4192)));
evalcond[2]=0;
evalcond[3]=((0.045)+(((-1.0)*x4192))+x4191);
evalcond[4]=(((cj2*x4191))+x4190+(((-1.0)*cj3*x4190)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4196=IKPowWithIntegerCheck(py,-1);
if(!x4196.valid){
continue;
}
IkReal x4193=x4196.value;
IkReal x4194=((0.045)*cj2);
IkReal x4195=((0.3)*cj2*sj3);
CheckValue<IkReal> x4197=IKPowWithIntegerCheck(cj2,-1);
if(!x4197.valid){
continue;
}
if( IKabs((x4193*((x4194+x4195+(((-1.0)*cj3*x4194)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4193*(x4197.value)*((((sj2*x4195))+((sj2*x4194))+(((-1.0)*cj3*sj2*x4194)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4193*((x4194+x4195+(((-1.0)*cj3*x4194))))))+IKsqr((x4193*(x4197.value)*((((sj2*x4195))+((sj2*x4194))+(((-1.0)*cj3*sj2*x4194))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4193*((x4194+x4195+(((-1.0)*cj3*x4194))))), (x4193*(x4197.value)*((((sj2*x4195))+((sj2*x4194))+(((-1.0)*cj3*sj2*x4194))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4198=IKcos(j0);
IkReal x4199=IKsin(j0);
IkReal x4200=((0.045)*cj2);
IkReal x4201=((0.3)*sj3);
IkReal x4202=((1.0)*py);
IkReal x4203=((0.045)*cj3);
IkReal x4204=(py*x4199);
IkReal x4205=(py*sj2*x4198);
evalcond[0]=(((sj2*x4204))+(((-1.0)*cj2*x4198*x4202)));
evalcond[1]=(((sj2*x4201))+(((0.045)*sj2))+(((-1.0)*sj2*x4203))+(((-1.0)*x4198*x4202)));
evalcond[2]=((((-1.0)*cj3*x4200))+((cj2*x4201))+x4200+(((-1.0)*x4199*x4202)));
evalcond[3]=((0.045)+(((-1.0)*sj2*x4198*x4202))+(((-1.0)*x4203))+x4201+(((-1.0)*cj2*x4199*x4202)));
evalcond[4]=((-0.2125)+(((0.09)*x4205))+(((0.09)*cj2*x4204))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4210=IKPowWithIntegerCheck(py,-1);
if(!x4210.valid){
continue;
}
IkReal x4206=x4210.value;
IkReal x4207=((0.045)*sj2);
IkReal x4208=((0.3)*sj2*sj3);
IkReal x4209=(cj3*x4207);
CheckValue<IkReal> x4211=IKPowWithIntegerCheck(sj2,-1);
if(!x4211.valid){
continue;
}
if( IKabs((x4206*(x4211.value)*(((((-1.0)*cj2*x4209))+((cj2*x4208))+((cj2*x4207)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4206*(((((-1.0)*x4209))+x4208+x4207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4206*(x4211.value)*(((((-1.0)*cj2*x4209))+((cj2*x4208))+((cj2*x4207))))))+IKsqr((x4206*(((((-1.0)*x4209))+x4208+x4207))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4206*(x4211.value)*(((((-1.0)*cj2*x4209))+((cj2*x4208))+((cj2*x4207))))), (x4206*(((((-1.0)*x4209))+x4208+x4207))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4212=IKcos(j0);
IkReal x4213=IKsin(j0);
IkReal x4214=((0.045)*cj2);
IkReal x4215=((0.3)*sj3);
IkReal x4216=((1.0)*py);
IkReal x4217=((0.045)*cj3);
IkReal x4218=(py*x4213);
IkReal x4219=(py*sj2*x4212);
evalcond[0]=((((-1.0)*cj2*x4212*x4216))+((sj2*x4218)));
evalcond[1]=((((-1.0)*sj2*x4217))+(((0.045)*sj2))+((sj2*x4215))+(((-1.0)*x4212*x4216)));
evalcond[2]=((((-1.0)*x4213*x4216))+x4214+(((-1.0)*cj3*x4214))+((cj2*x4215)));
evalcond[3]=((0.045)+(((-1.0)*sj2*x4212*x4216))+(((-1.0)*cj2*x4213*x4216))+x4215+(((-1.0)*x4217)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x4219))+(((0.09)*cj2*x4218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4220=((0.3)*sj3);
IkReal x4221=((0.045)*cj3);
CheckValue<IkReal> x4222 = IKatan2WithCheck((gconst140*(((((-1.0)*cj2*x4221))+(((0.045)*cj2))+((cj2*x4220))))),(gconst140*(((((-1.0)*sj2*x4221))+(((0.045)*sj2))+((sj2*x4220))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4222.valid){
continue;
}
j0array[0]=x4222.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4223=IKcos(j0);
IkReal x4224=IKsin(j0);
IkReal x4225=((0.045)*cj2);
IkReal x4226=((0.3)*sj3);
IkReal x4227=((1.0)*py);
IkReal x4228=((0.045)*cj3);
IkReal x4229=(py*x4224);
IkReal x4230=(py*sj2*x4223);
evalcond[0]=(((sj2*x4229))+(((-1.0)*cj2*x4223*x4227)));
evalcond[1]=((((-1.0)*sj2*x4228))+(((-1.0)*x4223*x4227))+(((0.045)*sj2))+((sj2*x4226)));
evalcond[2]=((((-1.0)*cj3*x4225))+(((-1.0)*x4224*x4227))+((cj2*x4226))+x4225);
evalcond[3]=((0.045)+(((-1.0)*x4228))+(((-1.0)*cj2*x4224*x4227))+x4226+(((-1.0)*sj2*x4223*x4227)));
evalcond[4]=((-0.2125)+(((0.09)*x4230))+(((0.09)*cj2*x4229))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4231=((0.045)*sj3);
IkReal x4232=((0.3)*cj3);
IkReal x4233=(x4232+x4231);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x4233))+(((-1.0)*pz)));
evalcond[3]=((0.55)+pz+x4233);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst141;
gconst141=IKsign((((py*(cj2*cj2)))+((py*(sj2*sj2)))));
dummyeval[0]=(((py*(cj2*cj2)))+((py*(sj2*sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4234=((0.045)*cj3);
IkReal x4235=((0.3)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x4234))+x4235);
evalcond[3]=((-0.045)+(((-1.0)*x4235))+x4234);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4238=IKPowWithIntegerCheck(py,-1);
if(!x4238.valid){
continue;
}
IkReal x4236=x4238.value;
IkReal x4237=((0.045)*x4236);
sj0array[0]=((((-1.0)*x4237))+(((-0.3)*sj3*x4236))+((cj3*x4237)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4239=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=x4239;
evalcond[3]=x4239;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4242=IKPowWithIntegerCheck(py,-1);
if(!x4242.valid){
continue;
}
IkReal x4240=x4242.value;
IkReal x4241=((0.045)*x4240);
sj0array[0]=((((0.3)*sj3*x4240))+(((-1.0)*cj3*x4241))+x4241);
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4243=((0.045)*cj2);
IkReal x4244=((0.3)*sj3);
IkReal x4245=((0.045)*cj3);
evalcond[0]=IKabs(py);
evalcond[1]=((((0.045)*sj2))+(((-1.0)*sj2*x4245))+((sj2*x4244)));
evalcond[2]=0;
evalcond[3]=((0.045)+(((-1.0)*x4245))+x4244);
evalcond[4]=((((-1.0)*x4243))+(((-1.0)*cj2*x4244))+((cj3*x4243)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4249=IKPowWithIntegerCheck(py,-1);
if(!x4249.valid){
continue;
}
IkReal x4246=x4249.value;
IkReal x4247=((0.045)*cj2);
IkReal x4248=((0.3)*cj2*sj3);
CheckValue<IkReal> x4250=IKPowWithIntegerCheck(cj2,-1);
if(!x4250.valid){
continue;
}
if( IKabs((x4246*(((((-1.0)*x4247))+(((-1.0)*x4248))+((cj3*x4247)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4246*(x4250.value)*(((((-1.0)*cj3*sj2*x4247))+((sj2*x4248))+((sj2*x4247)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4246*(((((-1.0)*x4247))+(((-1.0)*x4248))+((cj3*x4247))))))+IKsqr((x4246*(x4250.value)*(((((-1.0)*cj3*sj2*x4247))+((sj2*x4248))+((sj2*x4247))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4246*(((((-1.0)*x4247))+(((-1.0)*x4248))+((cj3*x4247))))), (x4246*(x4250.value)*(((((-1.0)*cj3*sj2*x4247))+((sj2*x4248))+((sj2*x4247))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4251=IKcos(j0);
IkReal x4252=IKsin(j0);
IkReal x4253=((0.045)*cj2);
IkReal x4254=((0.3)*sj3);
IkReal x4255=((1.0)*py);
IkReal x4256=((0.045)*cj3);
IkReal x4257=(py*sj2*x4251);
IkReal x4258=(cj2*py*x4252);
evalcond[0]=((((-1.0)*cj2*x4251*x4255))+(((-1.0)*sj2*x4252*x4255)));
evalcond[1]=(((sj2*x4254))+(((-1.0)*sj2*x4256))+(((0.045)*sj2))+(((-1.0)*x4251*x4255)));
evalcond[2]=(((cj3*x4253))+(((-1.0)*x4252*x4255))+(((-1.0)*x4253))+(((-1.0)*cj2*x4254)));
evalcond[3]=((0.045)+(((-1.0)*x4256))+x4258+x4254+(((-1.0)*sj2*x4251*x4255)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x4257))+(((-0.09)*x4258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4262=IKPowWithIntegerCheck(py,-1);
if(!x4262.valid){
continue;
}
IkReal x4259=x4262.value;
IkReal x4260=((0.045)*sj2);
IkReal x4261=((0.3)*sj2*sj3);
CheckValue<IkReal> x4263=IKPowWithIntegerCheck(sj2,-1);
if(!x4263.valid){
continue;
}
if( IKabs((x4259*(x4263.value)*(((((-1.0)*cj2*x4260))+(((-1.0)*cj2*x4261))+((cj2*cj3*x4260)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4259*(((((-1.0)*cj3*x4260))+x4260+x4261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4259*(x4263.value)*(((((-1.0)*cj2*x4260))+(((-1.0)*cj2*x4261))+((cj2*cj3*x4260))))))+IKsqr((x4259*(((((-1.0)*cj3*x4260))+x4260+x4261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4259*(x4263.value)*(((((-1.0)*cj2*x4260))+(((-1.0)*cj2*x4261))+((cj2*cj3*x4260))))), (x4259*(((((-1.0)*cj3*x4260))+x4260+x4261))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4264=IKcos(j0);
IkReal x4265=IKsin(j0);
IkReal x4266=((0.045)*cj2);
IkReal x4267=((0.3)*sj3);
IkReal x4268=((1.0)*py);
IkReal x4269=((0.045)*cj3);
IkReal x4270=(py*sj2*x4264);
IkReal x4271=(cj2*py*x4265);
evalcond[0]=((((-1.0)*sj2*x4265*x4268))+(((-1.0)*cj2*x4264*x4268)));
evalcond[1]=((((-1.0)*x4264*x4268))+((sj2*x4267))+(((0.045)*sj2))+(((-1.0)*sj2*x4269)));
evalcond[2]=((((-1.0)*cj2*x4267))+((cj3*x4266))+(((-1.0)*x4266))+(((-1.0)*x4265*x4268)));
evalcond[3]=((0.045)+(((-1.0)*sj2*x4264*x4268))+x4267+x4271+(((-1.0)*x4269)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x4271))+(((0.09)*x4270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4272=((0.045)*cj2);
IkReal x4273=((0.3)*sj3);
IkReal x4274=((0.045)*sj2);
CheckValue<IkReal> x4275 = IKatan2WithCheck((gconst141*(((((-1.0)*cj2*x4273))+(((-1.0)*x4272))+((cj3*x4272))))),(gconst141*((((sj2*x4273))+(((-1.0)*cj3*x4274))+x4274))),IKFAST_ATAN2_MAGTHRESH);
if(!x4275.valid){
continue;
}
j0array[0]=x4275.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4276=IKcos(j0);
IkReal x4277=IKsin(j0);
IkReal x4278=((0.045)*cj2);
IkReal x4279=((0.3)*sj3);
IkReal x4280=((1.0)*py);
IkReal x4281=((0.045)*cj3);
IkReal x4282=(py*sj2*x4276);
IkReal x4283=(cj2*py*x4277);
evalcond[0]=((((-1.0)*cj2*x4276*x4280))+(((-1.0)*sj2*x4277*x4280)));
evalcond[1]=((((-1.0)*sj2*x4281))+((sj2*x4279))+(((0.045)*sj2))+(((-1.0)*x4276*x4280)));
evalcond[2]=((((-1.0)*cj2*x4279))+(((-1.0)*x4277*x4280))+(((-1.0)*x4278))+((cj3*x4278)));
evalcond[3]=((0.045)+(((-1.0)*x4281))+(((-1.0)*sj2*x4276*x4280))+x4283+x4279);
evalcond[4]=((-0.2125)+(((-0.09)*x4283))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x4282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst142;
gconst142=IKsign(px);
IkReal x4284=IKsign(px);
IkReal x4285=(sj1*x4284);
IkReal x4286=((0.045)*x4284);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((0.3)*cj3*x4285))+(((0.045)*sj3*x4285))+(((0.55)*x4285)))))+(IKabs(((((-1.0)*x4286))+(((-0.3)*sj3*x4284))+((cj3*x4286))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4287=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x4287;
evalcond[2]=0;
evalcond[3]=x4287;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4289=IKPowWithIntegerCheck(px,-1);
if(!x4289.valid){
continue;
}
IkReal x4288=x4289.value;
sj0array[0]=((((0.15)*pz*x4288))+(((-0.30675)*sj3*x4288))+(((-0.1275)*x4288)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4290=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x4290;
evalcond[2]=0;
evalcond[3]=x4290;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4292=IKPowWithIntegerCheck(px,-1);
if(!x4292.valid){
continue;
}
IkReal x4291=x4292.value;
sj0array[0]=((((-0.15)*pz*x4291))+(((-0.30675)*sj3*x4291))+(((-0.1275)*x4291)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst143;
gconst143=IKsign(px);
IkReal x4293=IKsign(px);
IkReal x4294=(cj3*x4293);
IkReal x4295=((0.045)*x4293);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((0.3)*x4294))+((sj3*x4295))+(((0.55)*x4293)))))+(IKabs(((((-1.0)*x4295))+(((0.045)*x4294))+(((-0.3)*sj3*x4293))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4296=((0.045)*sj3);
IkReal x4297=((0.3)*cj3);
IkReal x4298=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x4299=(x4297+x4296);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x4299)));
evalcond[2]=x4298;
evalcond[3]=x4298;
evalcond[4]=((0.55)+x4299);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4301=IKPowWithIntegerCheck(px,-1);
if(!x4301.valid){
continue;
}
IkReal x4300=x4301.value;
if( IKabs(((0.111111111111111)*x4300*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4300*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x4300*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x4300*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x4300*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x4300*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4302=IKcos(j0);
IkReal x4303=IKsin(j0);
IkReal x4304=(px*x4303);
IkReal x4305=(px*x4302);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x4305);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x4304);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x4305))+(((-0.09)*x4304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4306 = IKatan2WithCheck((gconst143*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst143*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4306.valid){
continue;
}
j0array[0]=x4306.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4307=IKcos(j0);
IkReal x4308=IKsin(j0);
IkReal x4309=(px*x4308);
IkReal x4310=(px*x4307);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x4310);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x4309);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x4310))+(((-0.09)*x4309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst144;
gconst144=IKsign(px);
IkReal x4311=IKsign(px);
IkReal x4312=(cj3*x4311);
IkReal x4313=((0.045)*x4311);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((-1.0)*sj3*x4313))+(((-0.55)*x4311))+(((-0.3)*x4312)))))+(IKabs(((((-1.0)*x4313))+(((-0.3)*sj3*x4311))+(((0.045)*x4312))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4314=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x4315=x3493;
evalcond[0]=IKabs(px);
evalcond[1]=x4315;
evalcond[2]=x4314;
evalcond[3]=x4314;
evalcond[4]=x4315;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4317=IKPowWithIntegerCheck(px,-1);
if(!x4317.valid){
continue;
}
IkReal x4316=x4317.value;
if( IKabs((x4316*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x4316*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4316*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x4316*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4316*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x4316*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4318=IKsin(j0);
IkReal x4319=IKcos(j0);
IkReal x4320=(px*x4318);
IkReal x4321=(px*x4319);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x4320);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x4321)));
evalcond[2]=((-0.2125)+(((-1.1)*x4321))+(((-1.0)*pp))+(((-0.09)*x4320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4322 = IKatan2WithCheck((gconst144*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst144*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4322.valid){
continue;
}
j0array[0]=x4322.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4323=IKsin(j0);
IkReal x4324=IKcos(j0);
IkReal x4325=(px*x4323);
IkReal x4326=(px*x4324);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x4325);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x4326)));
evalcond[2]=((-0.2125)+(((-1.1)*x4326))+(((-1.0)*pp))+(((-0.09)*x4325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4327=(cj1*pz);
IkReal x4328=((0.3)*cj3);
IkReal x4329=((0.045)*sj3);
IkReal x4330=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x4328))+(((-1.0)*x4329))+x4327);
evalcond[2]=x4330;
evalcond[3]=((-1.0)*pz*sj1);
evalcond[4]=x4330;
evalcond[5]=(((sj1*x4328))+((sj1*x4329))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((1.1)*x4327))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4332=IKPowWithIntegerCheck(px,-1);
if(!x4332.valid){
continue;
}
IkReal x4331=x4332.value;
sj0array[0]=((((8.02777777777778)*x4331))+(((-11.1111111111111)*pp*x4331)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=(px*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4334=IKPowWithIntegerCheck(px,-1);
if(!x4334.valid){
continue;
}
IkReal x4333=x4334.value;
sj0array[0]=((((8.02777777777778)*x4333))+(((-11.1111111111111)*pp*x4333)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-1.0)*px*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4336=IKPowWithIntegerCheck(px,-1);
if(!x4336.valid){
continue;
}
IkReal x4335=x4336.value;
CheckValue<IkReal> x4337=IKPowWithIntegerCheck(sj1,-1);
if(!x4337.valid){
continue;
}
if( IKabs((x4335*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4335*(x4337.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4335*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr((x4335*(x4337.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4335*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), (x4335*(x4337.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4338=IKcos(j0);
IkReal x4339=IKsin(j0);
IkReal x4340=(cj1*pz);
IkReal x4341=((0.3)*cj3);
IkReal x4342=((0.045)*sj3);
IkReal x4343=(px*x4339);
IkReal x4344=(px*x4338);
evalcond[0]=(((cj1*x4344))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x4343);
evalcond[2]=((-0.55)+(((-1.0)*x4342))+(((-1.0)*x4341))+x4340+((sj1*x4344)));
evalcond[3]=((((0.55)*sj1))+((sj1*x4341))+((sj1*x4342))+(((-1.0)*x4344)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x4340))+(((-0.09)*x4343))+(((1.1)*sj1*x4344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4346=IKPowWithIntegerCheck(px,-1);
if(!x4346.valid){
continue;
}
IkReal x4345=x4346.value;
CheckValue<IkReal> x4347=IKPowWithIntegerCheck(cj1,-1);
if(!x4347.valid){
continue;
}
if( IKabs((x4345*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((pz*sj1*x4345*(x4347.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4345*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr((pz*sj1*x4345*(x4347.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4345*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), (pz*sj1*x4345*(x4347.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4348=IKcos(j0);
IkReal x4349=IKsin(j0);
IkReal x4350=(cj1*pz);
IkReal x4351=((0.3)*cj3);
IkReal x4352=((0.045)*sj3);
IkReal x4353=(px*x4349);
IkReal x4354=(px*x4348);
evalcond[0]=(((cj1*x4354))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x4353);
evalcond[2]=((-0.55)+(((-1.0)*x4352))+(((-1.0)*x4351))+x4350+((sj1*x4354)));
evalcond[3]=(((sj1*x4352))+((sj1*x4351))+(((0.55)*sj1))+(((-1.0)*x4354)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x4350))+(((-0.09)*x4353))+(((1.1)*sj1*x4354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4355 = IKatan2WithCheck((gconst142*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst142*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4355.valid){
continue;
}
j0array[0]=x4355.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4356=IKcos(j0);
IkReal x4357=IKsin(j0);
IkReal x4358=(cj1*pz);
IkReal x4359=((0.3)*cj3);
IkReal x4360=((0.045)*sj3);
IkReal x4361=(px*x4357);
IkReal x4362=(px*x4356);
evalcond[0]=(((cj1*x4362))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x4361);
evalcond[2]=((-0.55)+(((-1.0)*x4359))+((sj1*x4362))+(((-1.0)*x4360))+x4358);
evalcond[3]=(((sj1*x4360))+(((-1.0)*x4362))+((sj1*x4359))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x4362))+(((-0.09)*x4361))+(((-1.0)*pp))+(((1.1)*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst145;
gconst145=IKsign(px);
IkReal x4363=IKsign(px);
IkReal x4364=(sj1*x4363);
IkReal x4365=((0.045)*x4363);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((0.55)*x4364))+(((0.045)*sj3*x4364))+(((0.3)*cj3*x4364)))))+(IKabs(((((-1.0)*cj3*x4365))+(((0.3)*sj3*x4363))+x4365))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4366=((0.30675)*sj3);
IkReal x4367=((0.15)*pz);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+(((-1.0)*x4366))+x4367);
evalcond[2]=0;
evalcond[3]=((0.1275)+(((-1.0)*x4367))+x4366);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(px,-1);
if(!x4369.valid){
continue;
}
IkReal x4368=x4369.value;
sj0array[0]=((((0.1275)*x4368))+(((-0.15)*pz*x4368))+(((0.30675)*sj3*x4368)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4370=((0.15)*pz);
IkReal x4371=((0.30675)*sj3);
IkReal x4372=(x4370+x4371);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+(((-1.0)*x4372)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x4372);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4374=IKPowWithIntegerCheck(px,-1);
if(!x4374.valid){
continue;
}
IkReal x4373=x4374.value;
sj0array[0]=((((0.30675)*sj3*x4373))+(((0.15)*pz*x4373))+(((0.1275)*x4373)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst146;
gconst146=IKsign(px);
IkReal x4375=IKsign(px);
IkReal x4376=(cj3*x4375);
IkReal x4377=((0.045)*x4375);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((0.3)*x4376))+(((0.55)*x4375))+((sj3*x4377)))))+(IKabs(((((0.3)*sj3*x4375))+(((-0.045)*x4376))+x4377))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4378=((0.3)*sj3);
IkReal x4379=((0.045)*cj3);
IkReal x4380=((0.045)*sj3);
IkReal x4381=((0.3)*cj3);
IkReal x4382=(x4381+x4380);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x4382)));
evalcond[2]=((-0.045)+(((-1.0)*x4378))+x4379);
evalcond[3]=((0.045)+(((-1.0)*x4379))+x4378);
evalcond[4]=((0.55)+x4382);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4384=IKPowWithIntegerCheck(px,-1);
if(!x4384.valid){
continue;
}
IkReal x4383=x4384.value;
if( IKabs(((0.111111111111111)*x4383*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4383*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x4383*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x4383*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x4383*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x4383*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4385=IKsin(j0);
IkReal x4386=IKcos(j0);
IkReal x4387=(px*x4385);
IkReal x4388=(px*x4386);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x4388);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x4387+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x4388))+(((-1.0)*pp))+(((0.09)*x4387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4389 = IKatan2WithCheck((gconst146*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst146*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
j0array[0]=x4389.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4390=IKsin(j0);
IkReal x4391=IKcos(j0);
IkReal x4392=(px*x4390);
IkReal x4393=(px*x4391);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x4393);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x4392+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x4393))+(((-1.0)*pp))+(((0.09)*x4392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst147;
gconst147=IKsign(px);
IkReal x4394=IKsign(px);
IkReal x4395=(cj3*x4394);
IkReal x4396=((0.045)*x4394);
dummyeval[0]=px;
dummyeval[1]=((IKabs(((((-0.3)*x4395))+(((-1.0)*sj3*x4396))+(((-0.55)*x4394)))))+(IKabs(((((-0.045)*x4395))+(((0.3)*sj3*x4394))+x4396))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4397=((0.3)*sj3);
IkReal x4398=((0.045)*cj3);
IkReal x4399=x3493;
evalcond[0]=IKabs(px);
evalcond[1]=x4399;
evalcond[2]=((-0.045)+(((-1.0)*x4397))+x4398);
evalcond[3]=((0.045)+(((-1.0)*x4398))+x4397);
evalcond[4]=x4399;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4401=IKPowWithIntegerCheck(px,-1);
if(!x4401.valid){
continue;
}
IkReal x4400=x4401.value;
if( IKabs((x4400*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x4400*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4400*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x4400*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4400*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x4400*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4402=IKsin(j0);
IkReal x4403=IKcos(j0);
IkReal x4404=(px*x4402);
IkReal x4405=(px*x4403);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x4404+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x4405)));
evalcond[2]=((-0.2125)+(((-1.1)*x4405))+(((-1.0)*pp))+(((0.09)*x4404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4406 = IKatan2WithCheck((gconst147*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst147*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
j0array[0]=x4406.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4407=IKsin(j0);
IkReal x4408=IKcos(j0);
IkReal x4409=(px*x4407);
IkReal x4410=(px*x4408);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x4409+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x4410)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*x4410))+(((0.09)*x4409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4411=((0.3)*sj3);
IkReal x4412=((0.045)*cj3);
IkReal x4413=(cj1*pz);
IkReal x4414=((0.3)*cj3);
IkReal x4415=((0.045)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+x4413+(((-1.0)*x4414))+(((-1.0)*x4415)));
evalcond[2]=((-0.045)+x4412+(((-1.0)*x4411)));
evalcond[3]=(pz*sj1);
evalcond[4]=((0.045)+x4411+(((-1.0)*x4412)));
evalcond[5]=((((0.55)*sj1))+((sj1*x4414))+((sj1*x4415)));
evalcond[6]=((-0.2125)+(((1.1)*x4413))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4417=IKPowWithIntegerCheck(px,-1);
if(!x4417.valid){
continue;
}
IkReal x4416=x4417.value;
sj0array[0]=((((11.1111111111111)*pp*x4416))+(((-8.02777777777778)*x4416)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-1.0)*px*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.7225)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4419=IKPowWithIntegerCheck(px,-1);
if(!x4419.valid){
continue;
}
IkReal x4418=x4419.value;
sj0array[0]=((((11.1111111111111)*pp*x4418))+(((-8.02777777777778)*x4418)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=(px*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4421=IKPowWithIntegerCheck(px,-1);
if(!x4421.valid){
continue;
}
IkReal x4420=x4421.value;
CheckValue<IkReal> x4422=IKPowWithIntegerCheck(sj1,-1);
if(!x4422.valid){
continue;
}
if( IKabs((x4420*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4420*(x4422.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4420*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr((x4420*(x4422.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4420*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), (x4420*(x4422.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4423=IKcos(j0);
IkReal x4424=IKsin(j0);
IkReal x4425=(cj1*pz);
IkReal x4426=((0.045)*sj3);
IkReal x4427=((0.3)*cj3);
IkReal x4428=(px*x4424);
IkReal x4429=(px*x4423);
evalcond[0]=((((-1.0)*cj1*x4429))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x4428+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x4427))+(((-1.0)*x4426))+x4425+((sj1*x4429)));
evalcond[3]=(((sj1*x4427))+((sj1*x4426))+(((-1.0)*x4429))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((0.09)*x4428))+(((1.1)*x4425))+(((1.1)*sj1*x4429))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4431=IKPowWithIntegerCheck(px,-1);
if(!x4431.valid){
continue;
}
IkReal x4430=x4431.value;
CheckValue<IkReal> x4432=IKPowWithIntegerCheck(cj1,-1);
if(!x4432.valid){
continue;
}
if( IKabs((x4430*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((pz*sj1*x4430*(x4432.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4430*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr((pz*sj1*x4430*(x4432.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4430*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), (pz*sj1*x4430*(x4432.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4433=IKcos(j0);
IkReal x4434=IKsin(j0);
IkReal x4435=(cj1*pz);
IkReal x4436=((0.045)*sj3);
IkReal x4437=((0.3)*cj3);
IkReal x4438=(px*x4434);
IkReal x4439=(px*x4433);
evalcond[0]=((((-1.0)*cj1*x4439))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x4438+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x4435+(((-1.0)*x4436))+(((-1.0)*x4437))+((sj1*x4439)));
evalcond[3]=((((-1.0)*x4439))+(((0.55)*sj1))+((sj1*x4436))+((sj1*x4437)));
evalcond[4]=((-0.2125)+(((1.1)*x4435))+(((-1.0)*pp))+(((1.1)*sj1*x4439))+(((0.09)*x4438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4440 = IKatan2WithCheck((gconst145*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst145*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4440.valid){
continue;
}
j0array[0]=x4440.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4441=IKcos(j0);
IkReal x4442=IKsin(j0);
IkReal x4443=(cj1*pz);
IkReal x4444=((0.045)*sj3);
IkReal x4445=((0.3)*cj3);
IkReal x4446=(px*x4442);
IkReal x4447=(px*x4441);
evalcond[0]=((((-1.0)*cj1*x4447))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x4446+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x4443+(((-1.0)*x4445))+(((-1.0)*x4444))+((sj1*x4447)));
evalcond[3]=((((-1.0)*x4447))+(((0.55)*sj1))+((sj1*x4445))+((sj1*x4444)));
evalcond[4]=((-0.2125)+(((0.09)*x4446))+(((1.1)*x4443))+(((-1.0)*pp))+(((1.1)*sj1*x4447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4448=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4448;
evalcond[3]=x4448;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst148;
gconst148=IKsign((((px*(sj2*sj2)))+((px*(cj2*cj2)))));
dummyeval[0]=(((px*(sj2*sj2)))+((px*(cj2*cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4449=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x4449;
evalcond[3]=x4449;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4452=IKPowWithIntegerCheck(px,-1);
if(!x4452.valid){
continue;
}
IkReal x4450=x4452.value;
IkReal x4451=((0.045)*x4450);
cj0array[0]=(x4451+(((0.3)*sj3*x4450))+(((-1.0)*cj3*x4451)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4453=((0.045)*cj3);
IkReal x4454=((0.3)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x4453))+x4454);
evalcond[3]=((-0.045)+(((-1.0)*x4454))+x4453);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4457=IKPowWithIntegerCheck(px,-1);
if(!x4457.valid){
continue;
}
IkReal x4455=x4457.value;
IkReal x4456=((0.045)*x4455);
cj0array[0]=((((-1.0)*x4456))+((cj3*x4456))+(((-0.3)*sj3*x4455)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4458=((0.045)*cj2);
IkReal x4459=((0.3)*sj3);
IkReal x4460=((0.045)*cj3);
evalcond[0]=IKabs(px);
evalcond[1]=(((sj2*x4459))+(((0.045)*sj2))+(((-1.0)*sj2*x4460)));
evalcond[2]=0;
evalcond[3]=((0.045)+x4459+(((-1.0)*x4460)));
evalcond[4]=(((cj2*x4459))+x4458+(((-1.0)*cj3*x4458)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4464=IKPowWithIntegerCheck(px,-1);
if(!x4464.valid){
continue;
}
IkReal x4461=x4464.value;
IkReal x4462=((0.045)*cj2);
IkReal x4463=((0.3)*cj2*sj3);
CheckValue<IkReal> x4465=IKPowWithIntegerCheck(cj2,-1);
if(!x4465.valid){
continue;
}
if( IKabs((x4461*(x4465.value)*((((cj3*sj2*x4462))+(((-1.0)*sj2*x4462))+(((-1.0)*sj2*x4463)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4461*((x4462+x4463+(((-1.0)*cj3*x4462)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4461*(x4465.value)*((((cj3*sj2*x4462))+(((-1.0)*sj2*x4462))+(((-1.0)*sj2*x4463))))))+IKsqr((x4461*((x4462+x4463+(((-1.0)*cj3*x4462))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4461*(x4465.value)*((((cj3*sj2*x4462))+(((-1.0)*sj2*x4462))+(((-1.0)*sj2*x4463))))), (x4461*((x4462+x4463+(((-1.0)*cj3*x4462))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4466=IKsin(j0);
IkReal x4467=IKcos(j0);
IkReal x4468=((0.045)*cj2);
IkReal x4469=((0.3)*sj3);
IkReal x4470=((0.045)*cj3);
IkReal x4471=(px*x4466);
IkReal x4472=(px*x4467);
evalcond[0]=(((sj2*x4472))+((cj2*x4471)));
evalcond[1]=(x4471+(((-1.0)*sj2*x4470))+(((0.045)*sj2))+((sj2*x4469)));
evalcond[2]=(x4468+((cj2*x4469))+(((-1.0)*cj3*x4468))+(((-1.0)*x4472)));
evalcond[3]=((0.045)+((sj2*x4471))+(((-1.0)*x4470))+x4469+(((-1.0)*cj2*x4472)));
evalcond[4]=((-0.2125)+(((0.09)*cj2*x4472))+(((-0.09)*sj2*x4471))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4477=IKPowWithIntegerCheck(px,-1);
if(!x4477.valid){
continue;
}
IkReal x4473=x4477.value;
IkReal x4474=((0.045)*sj2);
IkReal x4475=((0.3)*sj2*sj3);
IkReal x4476=(cj3*x4474);
CheckValue<IkReal> x4478=IKPowWithIntegerCheck(sj2,-1);
if(!x4478.valid){
continue;
}
if( IKabs((x4473*(((((-1.0)*x4474))+(((-1.0)*x4475))+x4476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4473*(x4478.value)*(((((-1.0)*cj2*x4476))+((cj2*x4475))+((cj2*x4474)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4473*(((((-1.0)*x4474))+(((-1.0)*x4475))+x4476))))+IKsqr((x4473*(x4478.value)*(((((-1.0)*cj2*x4476))+((cj2*x4475))+((cj2*x4474))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4473*(((((-1.0)*x4474))+(((-1.0)*x4475))+x4476))), (x4473*(x4478.value)*(((((-1.0)*cj2*x4476))+((cj2*x4475))+((cj2*x4474))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4479=IKsin(j0);
IkReal x4480=IKcos(j0);
IkReal x4481=((0.045)*cj2);
IkReal x4482=((0.3)*sj3);
IkReal x4483=((0.045)*cj3);
IkReal x4484=(px*x4479);
IkReal x4485=(px*x4480);
evalcond[0]=(((cj2*x4484))+((sj2*x4485)));
evalcond[1]=(x4484+(((-1.0)*sj2*x4483))+(((0.045)*sj2))+((sj2*x4482)));
evalcond[2]=((((-1.0)*x4485))+(((-1.0)*cj3*x4481))+x4481+((cj2*x4482)));
evalcond[3]=((0.045)+x4482+(((-1.0)*cj2*x4485))+((sj2*x4484))+(((-1.0)*x4483)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x4484))+(((0.09)*cj2*x4485))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4486=((0.045)*cj2);
IkReal x4487=((0.3)*sj3);
IkReal x4488=((0.045)*sj2);
CheckValue<IkReal> x4489 = IKatan2WithCheck((gconst148*(((((-1.0)*sj2*x4487))+((cj3*x4488))+(((-1.0)*x4488))))),(gconst148*(((((-1.0)*cj3*x4486))+x4486+((cj2*x4487))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4489.valid){
continue;
}
j0array[0]=x4489.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4490=IKsin(j0);
IkReal x4491=IKcos(j0);
IkReal x4492=((0.045)*cj2);
IkReal x4493=((0.3)*sj3);
IkReal x4494=((0.045)*cj3);
IkReal x4495=(px*x4490);
IkReal x4496=(px*x4491);
evalcond[0]=(((cj2*x4495))+((sj2*x4496)));
evalcond[1]=((((-1.0)*sj2*x4494))+x4495+(((0.045)*sj2))+((sj2*x4493)));
evalcond[2]=((((-1.0)*cj3*x4492))+(((-1.0)*x4496))+x4492+((cj2*x4493)));
evalcond[3]=((0.045)+x4493+(((-1.0)*cj2*x4496))+((sj2*x4495))+(((-1.0)*x4494)));
evalcond[4]=((-0.2125)+(((0.09)*cj2*x4496))+(((-0.09)*sj2*x4495))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4497=((0.045)*sj3);
IkReal x4498=((0.3)*cj3);
IkReal x4499=(x4497+x4498);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x4499)));
evalcond[3]=((0.55)+x4499+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst149;
gconst149=IKsign((((px*(sj2*sj2)))+((px*(cj2*cj2)))));
dummyeval[0]=(((px*(sj2*sj2)))+((px*(cj2*cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4500=((0.045)*cj3);
IkReal x4501=((0.3)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x4500))+x4501);
evalcond[3]=((-0.045)+(((-1.0)*x4501))+x4500);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4504=IKPowWithIntegerCheck(px,-1);
if(!x4504.valid){
continue;
}
IkReal x4502=x4504.value;
IkReal x4503=((0.045)*x4502);
cj0array[0]=((((-1.0)*x4503))+(((-0.3)*sj3*x4502))+((cj3*x4503)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4505=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x4505;
evalcond[3]=x4505;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x4508=IKPowWithIntegerCheck(px,-1);
if(!x4508.valid){
continue;
}
IkReal x4506=x4508.value;
IkReal x4507=((0.045)*x4506);
cj0array[0]=(x4507+(((-1.0)*cj3*x4507))+(((0.3)*sj3*x4506)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4509=((0.045)*cj2);
IkReal x4510=((0.3)*sj3);
IkReal x4511=((0.045)*cj3);
evalcond[0]=IKabs(px);
evalcond[1]=(((sj2*x4510))+(((0.045)*sj2))+(((-1.0)*sj2*x4511)));
evalcond[2]=0;
evalcond[3]=((0.045)+x4510+(((-1.0)*x4511)));
evalcond[4]=((((-1.0)*x4509))+(((-1.0)*cj2*x4510))+((cj3*x4509)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4515=IKPowWithIntegerCheck(px,-1);
if(!x4515.valid){
continue;
}
IkReal x4512=x4515.value;
IkReal x4513=((0.045)*cj2);
IkReal x4514=((0.3)*cj2*sj3);
CheckValue<IkReal> x4516=IKPowWithIntegerCheck(cj2,-1);
if(!x4516.valid){
continue;
}
if( IKabs((x4512*(x4516.value)*((((cj3*sj2*x4513))+(((-1.0)*sj2*x4513))+(((-1.0)*sj2*x4514)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4512*((((cj3*x4513))+(((-1.0)*x4514))+(((-1.0)*x4513)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4512*(x4516.value)*((((cj3*sj2*x4513))+(((-1.0)*sj2*x4513))+(((-1.0)*sj2*x4514))))))+IKsqr((x4512*((((cj3*x4513))+(((-1.0)*x4514))+(((-1.0)*x4513))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4512*(x4516.value)*((((cj3*sj2*x4513))+(((-1.0)*sj2*x4513))+(((-1.0)*sj2*x4514))))), (x4512*((((cj3*x4513))+(((-1.0)*x4514))+(((-1.0)*x4513))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4517=IKsin(j0);
IkReal x4518=IKcos(j0);
IkReal x4519=((0.045)*cj2);
IkReal x4520=((0.3)*sj3);
IkReal x4521=((0.045)*cj3);
IkReal x4522=(px*x4517);
IkReal x4523=(px*x4518);
evalcond[0]=((((-1.0)*sj2*x4523))+((cj2*x4522)));
evalcond[1]=((((-1.0)*sj2*x4521))+x4522+(((0.045)*sj2))+((sj2*x4520)));
evalcond[2]=((((-1.0)*cj2*x4520))+((cj3*x4519))+(((-1.0)*x4523))+(((-1.0)*x4519)));
evalcond[3]=((0.045)+(((-1.0)*x4521))+x4520+((cj2*x4523))+((sj2*x4522)));
evalcond[4]=((-0.2125)+(((-0.09)*cj2*x4523))+(((-0.09)*sj2*x4522))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4528=IKPowWithIntegerCheck(px,-1);
if(!x4528.valid){
continue;
}
IkReal x4524=x4528.value;
IkReal x4525=((0.045)*sj2);
IkReal x4526=((0.3)*sj2*sj3);
IkReal x4527=(cj3*x4525);
CheckValue<IkReal> x4529=IKPowWithIntegerCheck(sj2,-1);
if(!x4529.valid){
continue;
}
if( IKabs((x4524*(((((-1.0)*x4525))+(((-1.0)*x4526))+x4527)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4524*(x4529.value)*(((((-1.0)*cj2*x4526))+(((-1.0)*cj2*x4525))+((cj2*x4527)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4524*(((((-1.0)*x4525))+(((-1.0)*x4526))+x4527))))+IKsqr((x4524*(x4529.value)*(((((-1.0)*cj2*x4526))+(((-1.0)*cj2*x4525))+((cj2*x4527))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4524*(((((-1.0)*x4525))+(((-1.0)*x4526))+x4527))), (x4524*(x4529.value)*(((((-1.0)*cj2*x4526))+(((-1.0)*cj2*x4525))+((cj2*x4527))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4530=IKsin(j0);
IkReal x4531=IKcos(j0);
IkReal x4532=((0.045)*cj2);
IkReal x4533=((0.3)*sj3);
IkReal x4534=((0.045)*cj3);
IkReal x4535=(px*x4530);
IkReal x4536=(px*x4531);
evalcond[0]=((((-1.0)*sj2*x4536))+((cj2*x4535)));
evalcond[1]=((((-1.0)*sj2*x4534))+x4535+(((0.045)*sj2))+((sj2*x4533)));
evalcond[2]=((((-1.0)*cj2*x4533))+(((-1.0)*x4536))+(((-1.0)*x4532))+((cj3*x4532)));
evalcond[3]=((0.045)+(((-1.0)*x4534))+x4533+((cj2*x4536))+((sj2*x4535)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x4535))+(((-0.09)*cj2*x4536))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4537=((0.045)*cj2);
IkReal x4538=((0.3)*sj3);
IkReal x4539=((0.045)*sj2);
CheckValue<IkReal> x4540 = IKatan2WithCheck((gconst149*(((((-1.0)*sj2*x4538))+(((-1.0)*x4539))+((cj3*x4539))))),(gconst149*(((((-1.0)*cj2*x4538))+(((-1.0)*x4537))+((cj3*x4537))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4540.valid){
continue;
}
j0array[0]=x4540.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4541=IKsin(j0);
IkReal x4542=IKcos(j0);
IkReal x4543=((0.045)*cj2);
IkReal x4544=((0.3)*sj3);
IkReal x4545=((0.045)*cj3);
IkReal x4546=(px*x4541);
IkReal x4547=(px*x4542);
evalcond[0]=(((cj2*x4546))+(((-1.0)*sj2*x4547)));
evalcond[1]=(x4546+(((0.045)*sj2))+((sj2*x4544))+(((-1.0)*sj2*x4545)));
evalcond[2]=(((cj3*x4543))+(((-1.0)*x4547))+(((-1.0)*cj2*x4544))+(((-1.0)*x4543)));
evalcond[3]=((0.045)+((cj2*x4547))+x4544+((sj2*x4546))+(((-1.0)*x4545)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x4546))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*cj2*x4547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4548=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4548;
evalcond[3]=x4548;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst150;
gconst150=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4549=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=x4549;
evalcond[3]=x4549;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4550=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=x4550;
evalcond[3]=x4550;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4551=((0.3)*sj3);
IkReal x4552=((0.045)*px);
IkReal x4553=((0.045)*py);
CheckValue<IkReal> x4554 = IKatan2WithCheck((gconst150*((x4553+(((-1.0)*cj3*x4553))+((py*x4551))))),(gconst150*((((px*x4551))+x4552+(((-1.0)*cj3*x4552))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4554.valid){
continue;
}
j0array[0]=x4554.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4555=IKcos(j0);
IkReal x4556=IKsin(j0);
IkReal x4557=((1.0)*py);
IkReal x4558=(px*x4555);
evalcond[0]=(((px*x4556))+(((-1.0)*x4555*x4557)));
evalcond[1]=((0.045)+(((-1.0)*x4556*x4557))+(((-0.045)*cj3))+(((-1.0)*x4558))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*py*x4556))+(((1.1)*pz))+(((0.09)*x4558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4559=((0.045)*sj3);
IkReal x4560=((0.3)*cj3);
IkReal x4561=(x4559+x4560);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x4561)));
evalcond[3]=((0.55)+x4561+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst152;
gconst152=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4562=((0.045)*cj3);
IkReal x4563=((0.3)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.045)+x4563+(((-1.0)*x4562)));
evalcond[3]=((-0.045)+x4562+(((-1.0)*x4563)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4564=((0.3)*sj3);
IkReal x4565=((0.045)*px);
IkReal x4566=((0.045)*py);
CheckValue<IkReal> x4567 = IKatan2WithCheck((gconst152*(((((-1.0)*cj3*x4566))+x4566+((py*x4564))))),(gconst152*(((((-1.0)*cj3*x4565))+x4565+((px*x4564))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4567.valid){
continue;
}
j0array[0]=x4567.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4568=IKsin(j0);
IkReal x4569=IKcos(j0);
IkReal x4570=(px*x4569);
IkReal x4571=(py*x4568);
evalcond[0]=((((-1.0)*py*x4569))+((px*x4568)));
evalcond[1]=((0.045)+x4570+x4571+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x4571))+(((-0.09)*x4570))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4572=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4572;
evalcond[3]=x4572;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst154;
gconst154=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4573=((0.045)*cj3);
IkReal x4574=((0.3)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x4573))+x4574);
evalcond[3]=((-0.045)+(((-1.0)*x4574))+x4573);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4575=((0.3)*sj3);
IkReal x4576=((0.045)*px);
IkReal x4577=((0.045)*py);
CheckValue<IkReal> x4578 = IKatan2WithCheck((gconst154*((x4577+(((-1.0)*cj3*x4577))+((py*x4575))))),(gconst154*((x4576+(((-1.0)*cj3*x4576))+((px*x4575))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4578.valid){
continue;
}
j0array[0]=x4578.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4579=IKsin(j0);
IkReal x4580=IKcos(j0);
IkReal x4581=(px*x4580);
IkReal x4582=(py*x4579);
evalcond[0]=((((-1.0)*py*x4580))+((px*x4579)));
evalcond[1]=((0.045)+x4581+x4582+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x4581))+(((-0.09)*x4582))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4583=((0.045)*sj3);
IkReal x4584=((0.3)*cj3);
IkReal x4585=(x4584+x4583);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x4585))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x4585+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst156;
gconst156=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4586=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=x4586;
evalcond[3]=x4586;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4587=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=x4587;
evalcond[3]=x4587;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4588=((0.3)*sj3);
IkReal x4589=((0.045)*px);
IkReal x4590=((0.045)*py);
CheckValue<IkReal> x4591 = IKatan2WithCheck((gconst156*((x4590+((py*x4588))+(((-1.0)*cj3*x4590))))),(gconst156*((x4589+((px*x4588))+(((-1.0)*cj3*x4589))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4591.valid){
continue;
}
j0array[0]=x4591.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4592=IKcos(j0);
IkReal x4593=IKsin(j0);
IkReal x4594=((1.0)*py);
IkReal x4595=(px*x4592);
evalcond[0]=(((px*x4593))+(((-1.0)*x4592*x4594)));
evalcond[1]=((0.045)+(((-1.0)*x4595))+(((-1.0)*x4593*x4594))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x4593))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x4595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4596=sj1*sj1;
IkReal x4597=cj1*cj1;
IkReal x4598=(px*sj2);
IkReal x4599=((0.55)*cj1);
IkReal x4600=((1.0)*pz);
IkReal x4601=((0.55)*cj2);
IkReal x4602=(cj2*px);
IkReal x4603=(cj1*pz);
IkReal x4604=(py*sj2);
IkReal x4605=((0.045)*sj3);
IkReal x4606=(cj2*py);
IkReal x4607=((0.3)*cj3);
CheckValue<IkReal> x4608 = IKatan2WithCheck((gconst93*(((((-1.0)*x4606*x4607))+((x4598*x4599))+((cj1*x4598*x4605))+((cj1*x4598*x4607))+((x4603*x4606))+(((-1.0)*x4596*x4598*x4600))+(((-1.0)*x4597*x4598*x4600))+(((-1.0)*x4605*x4606))+(((-1.0)*py*x4601))))),(gconst93*(((((-1.0)*x4599*x4604))+(((-1.0)*x4602*x4605))+(((-1.0)*x4602*x4607))+(((-1.0)*px*x4601))+((pz*x4597*x4604))+(((-1.0)*cj1*x4604*x4605))+(((-1.0)*cj1*x4604*x4607))+((x4602*x4603))+((pz*x4596*x4604))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4608.valid){
continue;
}
j0array[0]=x4608.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4609=IKsin(j0);
IkReal x4610=IKcos(j0);
IkReal x4611=(cj1*sj2);
IkReal x4612=((0.09)*sj2);
IkReal x4613=((0.3)*sj3);
IkReal x4614=((0.045)*cj3);
IkReal x4615=((1.1)*sj1);
IkReal x4616=((0.3)*cj3);
IkReal x4617=(cj1*cj2);
IkReal x4618=((0.045)*sj3);
IkReal x4619=((1.0)*sj2);
IkReal x4620=(cj1*pz);
IkReal x4621=(px*x4609);
IkReal x4622=(px*x4610);
IkReal x4623=(py*x4610);
IkReal x4624=(py*x4609);
IkReal x4625=(cj2*pz*sj1);
evalcond[0]=((-0.55)+((sj1*x4624))+((sj1*x4622))+x4620+(((-1.0)*x4618))+(((-1.0)*x4616)));
evalcond[1]=(((sj2*x4613))+(((-1.0)*sj2*x4614))+x4621+(((0.045)*sj2))+(((-1.0)*x4623)));
evalcond[2]=(((cj2*x4621))+(((-1.0)*pz*sj1*x4619))+((x4611*x4624))+((x4611*x4622))+(((-1.0)*cj2*x4623)));
evalcond[3]=((((0.045)*x4617))+((sj1*x4618))+((sj1*x4616))+(((-1.0)*x4622))+(((-1.0)*x4624))+(((-1.0)*x4614*x4617))+(((0.55)*sj1))+((x4613*x4617)));
evalcond[4]=((0.045)+(((-1.0)*x4617*x4624))+(((-1.0)*x4617*x4622))+x4613+x4625+((sj2*x4621))+(((-1.0)*x4619*x4623))+(((-1.0)*x4614)));
evalcond[5]=((-0.2125)+(((1.1)*x4620))+(((-1.0)*pp))+((x4612*x4623))+(((-1.0)*x4612*x4621))+((x4615*x4622))+((x4615*x4624))+(((0.09)*x4617*x4624))+(((0.09)*x4617*x4622))+(((-0.09)*x4625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4626=((0.045)*px);
IkReal x4627=(sj1*sj2);
IkReal x4628=((0.3)*py);
IkReal x4629=((0.3)*px);
IkReal x4630=((1.0)*cj1*pz);
IkReal x4631=((0.045)*py*x4627);
CheckValue<IkReal> x4632 = IKatan2WithCheck((gconst92*((((cj3*x4628))+(((-1.0)*sj3*x4627*x4629))+(((-1.0)*x4626*x4627))+(((0.045)*py*sj3))+((cj3*x4626*x4627))+(((0.55)*py))+(((-1.0)*py*x4630))))),(gconst92*((((cj3*x4629))+x4631+((sj3*x4626))+((sj3*x4627*x4628))+(((-1.0)*px*x4630))+(((-1.0)*cj3*x4631))+(((0.55)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4632.valid){
continue;
}
j0array[0]=x4632.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4633=IKsin(j0);
IkReal x4634=IKcos(j0);
IkReal x4635=(cj1*sj2);
IkReal x4636=((0.09)*sj2);
IkReal x4637=((0.3)*sj3);
IkReal x4638=((0.045)*cj3);
IkReal x4639=((1.1)*sj1);
IkReal x4640=((0.3)*cj3);
IkReal x4641=(cj1*cj2);
IkReal x4642=((0.045)*sj3);
IkReal x4643=((1.0)*sj2);
IkReal x4644=(cj1*pz);
IkReal x4645=(px*x4633);
IkReal x4646=(px*x4634);
IkReal x4647=(py*x4634);
IkReal x4648=(py*x4633);
IkReal x4649=(cj2*pz*sj1);
evalcond[0]=((-0.55)+x4644+((sj1*x4646))+((sj1*x4648))+(((-1.0)*x4640))+(((-1.0)*x4642)));
evalcond[1]=(x4645+(((0.045)*sj2))+(((-1.0)*x4647))+((sj2*x4637))+(((-1.0)*sj2*x4638)));
evalcond[2]=(((x4635*x4648))+((x4635*x4646))+(((-1.0)*pz*sj1*x4643))+((cj2*x4645))+(((-1.0)*cj2*x4647)));
evalcond[3]=((((0.045)*x4641))+(((-1.0)*x4646))+(((-1.0)*x4648))+((sj1*x4640))+((sj1*x4642))+((x4637*x4641))+(((-1.0)*x4638*x4641))+(((0.55)*sj1)));
evalcond[4]=((0.045)+(((-1.0)*x4638))+x4637+x4649+(((-1.0)*x4641*x4646))+(((-1.0)*x4641*x4648))+(((-1.0)*x4643*x4647))+((sj2*x4645)));
evalcond[5]=((-0.2125)+((x4636*x4647))+(((-1.0)*x4636*x4645))+(((-0.09)*x4649))+(((1.1)*x4644))+(((-1.0)*pp))+((x4639*x4648))+((x4639*x4646))+(((0.09)*x4641*x4646))+(((0.09)*x4641*x4648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x4650=((0.045)*sj2);
CheckValue<IkReal> x4653 = IKatan2WithCheck(((-1.0)*py),px,IKFAST_ATAN2_MAGTHRESH);
if(!x4653.valid){
continue;
}
IkReal x4651=((1.0)*(x4653.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x4654.valid){
continue;
}
if( (((x4654.value)*(((((0.3)*sj2*sj3))+x4650+(((-1.0)*cj3*x4650)))))) < -1-IKFAST_SINCOS_THRESH || (((x4654.value)*(((((0.3)*sj2*sj3))+x4650+(((-1.0)*cj3*x4650)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4652=IKasin(((x4654.value)*(((((0.3)*sj2*sj3))+x4650+(((-1.0)*cj3*x4650))))));
j0array[0]=((((-1.0)*x4651))+(((-1.0)*x4652)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x4651))+x4652);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x4655=(py*sj0);
IkReal x4656=((0.3)*cj3);
IkReal x4657=(cj0*px);
IkReal x4658=(cj2*pz);
IkReal x4659=((0.045)*sj3);
gconst0=IKsign(((((-0.55)*x4655))+(((-0.55)*x4657))+(((-1.0)*x4655*x4656))+(((-1.0)*x4655*x4659))+(((-1.0)*x4657*x4659))+(((-0.045)*x4658))+(((0.045)*cj3*x4658))+(((-0.3)*sj3*x4658))+(((-1.0)*x4656*x4657))));
IkReal x4660=(py*sj0);
IkReal x4661=(cj2*pz);
IkReal x4662=((6.66666666666667)*cj3);
IkReal x4663=(cj0*px);
IkReal x4664=((1.0)*sj3);
dummyeval[0]=((((-1.0)*x4663*x4664))+(((-1.0)*x4661))+(((-1.0)*x4662*x4663))+((cj3*x4661))+(((-1.0)*x4660*x4664))+(((-1.0)*x4660*x4662))+(((-6.66666666666667)*sj3*x4661))+(((-12.2222222222222)*x4663))+(((-12.2222222222222)*x4660)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0)))));
dummyeval[0]=(((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x4665=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4665;
evalcond[3]=x4665;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x4666=(cj0*px);
IkReal x4667=(py*sj0);
IkReal x4668=((0.0254095720202485)*sj3);
IkReal x4669=((0.92038656235619)*pp);
gconst2=IKsign(((((-1.0)*x4667*x4669))+(((-0.099746893695352)*pz))+(((-0.310561435803037)*pz*sj3))+((x4666*x4668))+(((0.138057984353428)*pp*pz))+((x4667*x4668))+(((-1.0)*x4666*x4669))+(((-0.185020708697653)*x4666))+(((-0.185020708697653)*x4667))));
IkReal x4670=(py*sj0);
IkReal x4671=(cj0*px);
IkReal x4672=((36.2220411120167)*pp);
dummyeval[0]=(((sj3*x4671))+((sj3*x4670))+(((-7.28153581454315)*x4671))+(((-7.28153581454315)*x4670))+(((5.4333061668025)*pp*pz))+(((-3.92556370551481)*pz))+(((-12.2222222222222)*pz*sj3))+(((-1.0)*x4671*x4672))+(((-1.0)*x4670*x4672)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4673=sj3*sj3;
IkReal x4674=(cj3*sj3);
IkReal x4675=(pp*sj3);
IkReal x4676=(cj3*pp);
IkReal x4677=((1.0)*pz);
CheckValue<IkReal> x4678 = IKatan2WithCheck((gconst2*(((-0.101761389783709)+(((0.00114343074091118)*x4673))+(((-0.276115968706857)*x4676))+(((0.00762287160607455)*x4674))+(pz*pz)+(((-0.506212609295904)*pp))+(((-0.0414173953060285)*x4675))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))))),(gconst2*(((-0.0548607915324436)+(((0.0414173953060285)*x4676))+(((-1.0)*cj0*px*x4677))+(((-0.0931684307409112)*x4674))+(((-0.0299240681086056)*cj3))+(((0.00621260929590428)*x4675))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0139752646111367)*x4673))+(((-1.0)*py*sj0*x4677))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4678.valid){
continue;
}
j1array[0]=x4678.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4679=IKsin(j1);
IkReal x4680=IKcos(j1);
IkReal x4681=((0.045)*sj3);
IkReal x4682=((0.3)*cj3);
IkReal x4683=((0.045)*cj3);
IkReal x4684=(cj0*px);
IkReal x4685=(py*sj0);
IkReal x4686=((1.0)*x4680);
IkReal x4687=(sj3*x4680);
IkReal x4688=(pz*x4679);
IkReal x4689=(pz*x4680);
IkReal x4690=((0.09)*x4680);
IkReal x4691=((1.1)*x4679);
evalcond[0]=((-0.55)+x4689+((x4679*x4684))+((x4679*x4685))+(((-1.0)*x4682))+(((-1.0)*x4681)));
evalcond[1]=((0.045)+(((-1.0)*x4684*x4686))+x4688+(((-1.0)*x4685*x4686))+(((0.3)*sj3))+(((-1.0)*x4683)));
evalcond[2]=((((0.0254095720202485)*x4687))+(((0.310561435803037)*sj3*x4679))+(((-0.138057984353428)*pp*x4679))+(((0.099746893695352)*x4679))+(((-0.185020708697653)*x4680))+pz+(((-0.92038656235619)*pp*x4680)));
evalcond[3]=((((0.045)*x4680))+(((-1.0)*x4680*x4683))+(((0.55)*x4679))+((x4679*x4681))+((x4679*x4682))+(((-1.0)*x4684))+(((-1.0)*x4685))+(((0.3)*x4687)));
evalcond[4]=((-0.2125)+(((1.1)*x4689))+(((-0.09)*x4688))+(((-1.0)*pp))+((x4685*x4690))+((x4685*x4691))+((x4684*x4690))+((x4684*x4691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4692=(cj0*px);
IkReal x4693=(pz*sj3);
IkReal x4694=(py*sj0);
IkReal x4695=((0.3)*sj3);
IkReal x4696=((0.045)*cj3);
IkReal x4697=((0.3)*cj3);
IkReal x4698=((0.045)*sj3);
CheckValue<IkReal> x4699 = IKatan2WithCheck((gconst3*(((((-1.0)*x4692*x4698))+(((-1.0)*x4692*x4697))+(((-0.55)*x4692))+(((-0.55)*x4694))+(((0.045)*pz))+(((-1.0)*x4694*x4698))+(((-1.0)*x4694*x4697))+(((-1.0)*pz*x4696))+(((0.3)*x4693))))),(gconst3*(((((-0.55)*pz))+(((-1.0)*x4692*x4695))+((x4694*x4696))+(((-1.0)*x4694*x4695))+(((-0.045)*x4694))+(((-0.045)*x4693))+(((-0.045)*x4692))+(((-1.0)*pz*x4697))+((x4692*x4696))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4699.valid){
continue;
}
j1array[0]=x4699.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4700=IKsin(j1);
IkReal x4701=IKcos(j1);
IkReal x4702=((0.045)*sj3);
IkReal x4703=((0.3)*cj3);
IkReal x4704=((0.045)*cj3);
IkReal x4705=(cj0*px);
IkReal x4706=(py*sj0);
IkReal x4707=((1.0)*x4701);
IkReal x4708=(sj3*x4701);
IkReal x4709=(pz*x4700);
IkReal x4710=(pz*x4701);
IkReal x4711=((0.09)*x4701);
IkReal x4712=((1.1)*x4700);
evalcond[0]=((-0.55)+x4710+((x4700*x4706))+((x4700*x4705))+(((-1.0)*x4702))+(((-1.0)*x4703)));
evalcond[1]=((0.045)+x4709+(((-1.0)*x4706*x4707))+(((0.3)*sj3))+(((-1.0)*x4705*x4707))+(((-1.0)*x4704)));
evalcond[2]=((((0.0254095720202485)*x4708))+(((0.310561435803037)*sj3*x4700))+(((-0.138057984353428)*pp*x4700))+(((0.099746893695352)*x4700))+(((-0.92038656235619)*pp*x4701))+pz+(((-0.185020708697653)*x4701)));
evalcond[3]=((((0.045)*x4701))+(((-1.0)*x4706))+(((-1.0)*x4705))+(((0.55)*x4700))+((x4700*x4702))+((x4700*x4703))+(((0.3)*x4708))+(((-1.0)*x4701*x4704)));
evalcond[4]=((-0.2125)+((x4705*x4712))+((x4705*x4711))+(((-1.0)*pp))+(((-0.09)*x4709))+((x4706*x4712))+((x4706*x4711))+(((1.1)*x4710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4713=(px*sj0);
IkReal x4714=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x4714))+x4713);
evalcond[3]=((((-1.0)*x4713))+x4714);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0))));
dummyeval[0]=((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
IkReal x4715=(cj0*px);
IkReal x4716=(py*sj0);
IkReal x4717=((0.0254095720202485)*sj3);
IkReal x4718=((0.92038656235619)*pp);
gconst5=IKsign(((((-0.138057984353428)*pp*pz))+(((0.310561435803037)*pz*sj3))+((x4716*x4717))+((x4715*x4717))+(((0.099746893695352)*pz))+(((-1.0)*x4716*x4718))+(((-1.0)*x4715*x4718))+(((-0.185020708697653)*x4715))+(((-0.185020708697653)*x4716))));
IkReal x4719=(py*sj0);
IkReal x4720=(cj0*px);
IkReal x4721=((36.2220411120167)*pp);
dummyeval[0]=((((12.2222222222222)*pz*sj3))+(((-5.4333061668025)*pp*pz))+((sj3*x4720))+(((-7.28153581454315)*x4719))+(((-7.28153581454315)*x4720))+(((3.92556370551481)*pz))+(((-1.0)*x4719*x4721))+((sj3*x4719))+(((-1.0)*x4720*x4721)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4722=sj3*sj3;
IkReal x4723=(cj3*sj3);
IkReal x4724=(pp*sj3);
IkReal x4725=((1.0)*pz);
IkReal x4726=(cj3*pp);
CheckValue<IkReal> x4727 = IKatan2WithCheck((gconst5*(((-0.101761389783709)+(((-0.0414173953060285)*x4724))+(((0.00114343074091118)*x4722))+(((0.00762287160607455)*x4723))+(pz*pz)+(((-0.506212609295904)*pp))+(((-0.276115968706857)*x4726))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))))),(gconst5*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((-0.0414173953060285)*x4726))+(((-0.00621260929590428)*x4724))+(((0.0139752646111367)*x4722))+(((0.0931684307409112)*x4723))+(((-1.0)*cj0*px*x4725))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))+(((-1.0)*py*sj0*x4725))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4727.valid){
continue;
}
j1array[0]=x4727.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4728=IKsin(j1);
IkReal x4729=IKcos(j1);
IkReal x4730=((0.045)*sj3);
IkReal x4731=((0.3)*cj3);
IkReal x4732=((0.045)*cj3);
IkReal x4733=(cj0*px);
IkReal x4734=(py*sj0);
IkReal x4735=(sj3*x4729);
IkReal x4736=(pz*x4728);
IkReal x4737=(pz*x4729);
IkReal x4738=((0.09)*x4729);
IkReal x4739=((1.1)*x4728);
evalcond[0]=((-0.55)+x4737+(((-1.0)*x4731))+(((-1.0)*x4730))+((x4728*x4734))+((x4728*x4733)));
evalcond[1]=((0.045)+(((-1.0)*x4736))+((x4729*x4734))+((x4729*x4733))+(((-1.0)*x4732))+(((0.3)*sj3)));
evalcond[2]=((((-0.310561435803037)*sj3*x4728))+(((0.138057984353428)*pp*x4728))+pz+(((-0.92038656235619)*pp*x4729))+(((-0.185020708697653)*x4729))+(((-0.099746893695352)*x4728))+(((0.0254095720202485)*x4735)));
evalcond[3]=((((-1.0)*x4734))+(((-1.0)*x4733))+(((-0.3)*x4735))+((x4729*x4732))+(((0.55)*x4728))+((x4728*x4731))+((x4728*x4730))+(((-0.045)*x4729)));
evalcond[4]=((-0.2125)+((x4734*x4739))+(((-1.0)*x4734*x4738))+(((1.1)*x4737))+(((-1.0)*pp))+(((-1.0)*x4733*x4738))+((x4733*x4739))+(((0.09)*x4736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4740=(py*sj0);
IkReal x4741=(cj0*px);
IkReal x4742=((0.3)*sj3);
IkReal x4743=((0.045)*cj3);
IkReal x4744=((0.045)*pz);
IkReal x4745=((0.3)*cj3);
IkReal x4746=((0.045)*sj3);
CheckValue<IkReal> x4747 = IKatan2WithCheck((gconst4*((((pz*x4742))+((x4740*x4745))+((x4740*x4746))+((x4741*x4745))+((x4741*x4746))+(((0.55)*x4741))+(((0.55)*x4740))+x4744+(((-1.0)*pz*x4743))))),(gconst4*((((pz*x4745))+((x4740*x4743))+((x4741*x4743))+((sj3*x4744))+(((-1.0)*x4740*x4742))+(((-1.0)*x4741*x4742))+(((0.55)*pz))+(((-0.045)*x4740))+(((-0.045)*x4741))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4747.valid){
continue;
}
j1array[0]=x4747.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4748=IKsin(j1);
IkReal x4749=IKcos(j1);
IkReal x4750=((0.045)*sj3);
IkReal x4751=((0.3)*cj3);
IkReal x4752=((0.045)*cj3);
IkReal x4753=(cj0*px);
IkReal x4754=(py*sj0);
IkReal x4755=(sj3*x4749);
IkReal x4756=(pz*x4748);
IkReal x4757=(pz*x4749);
IkReal x4758=((0.09)*x4749);
IkReal x4759=((1.1)*x4748);
evalcond[0]=((-0.55)+x4757+((x4748*x4754))+((x4748*x4753))+(((-1.0)*x4751))+(((-1.0)*x4750)));
evalcond[1]=((0.045)+((x4749*x4754))+((x4749*x4753))+(((-1.0)*x4752))+(((0.3)*sj3))+(((-1.0)*x4756)));
evalcond[2]=((((0.0254095720202485)*x4755))+(((-0.92038656235619)*pp*x4749))+(((0.138057984353428)*pp*x4748))+(((-0.310561435803037)*sj3*x4748))+pz+(((-0.099746893695352)*x4748))+(((-0.185020708697653)*x4749)));
evalcond[3]=((((0.55)*x4748))+(((-0.3)*x4755))+((x4748*x4751))+((x4748*x4750))+((x4749*x4752))+(((-1.0)*x4753))+(((-1.0)*x4754))+(((-0.045)*x4749)));
evalcond[4]=((-0.2125)+(((-1.0)*x4753*x4758))+(((-1.0)*x4754*x4758))+(((0.09)*x4756))+((x4753*x4759))+((x4754*x4759))+(((-1.0)*pp))+(((1.1)*x4757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4760=((-1.0)*cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4760;
evalcond[3]=x4760;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst6;
gconst6=IKsign(pz);
IkReal x4761=IKsign(pz);
IkReal x4762=(sj3*x4761);
IkReal x4763=(cj3*x4761);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.55)*x4761))+(((0.3)*x4763))+(((0.045)*x4762)))))+(IKabs(((((-0.3)*x4762))+(((-0.045)*x4761))+(((0.045)*x4763))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst7;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x4764=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x4764.valid){
continue;
}
if( (((36.6666666666667)*pz*(x4764.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x4764.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4765 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x4765.valid){
continue;
}
gconst7=((((-1.0)*(IKasin(((36.6666666666667)*pz*(x4764.value))))))+(((-1.0)*(x4765.value))));
IkReal gconst8;
gconst8=IKsin(gconst7);
IkReal gconst9;
gconst9=IKcos(gconst7);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst7))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*gconst9*pz))+(((12.2222222222222)*pz))+((gconst8*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst8))+(((-0.3)*gconst9)));
evalcond[2]=((0.045)+(((-0.045)*gconst9))+(((0.3)*gconst8)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4767 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst8))+(((-0.3)*gconst9))),((0.045)+(((-0.045)*gconst9))+(((0.3)*gconst8))),IKFAST_ATAN2_MAGTHRESH);
if(!x4767.valid){
continue;
}
IkReal x4766=x4767.value;
j1array[0]=((-1.0)*x4766);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4766)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4768=IKsin(j1);
IkReal x4769=IKcos(j1);
IkReal x4770=((0.045)*x4769);
evalcond[0]=((((0.045)*gconst8*x4768))+(((0.55)*x4768))+x4770+(((-1.0)*gconst9*x4770))+(((0.3)*gconst9*x4768))+(((0.3)*gconst8*x4769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4771=((0.3)*gconst9);
IkReal x4772=((0.045)*gconst8);
CheckValue<IkReal> x4773=IKPowWithIntegerCheck((((pz*x4771))+((pz*x4772))+(((0.55)*pz))),-1);
if(!x4773.valid){
continue;
}
CheckValue<IkReal> x4774=IKPowWithIntegerCheck(pz,-1);
if(!x4774.valid){
continue;
}
if( IKabs(((x4773.value)*(((-0.02475)+(((-0.0135)*(gconst8*gconst8)))+(((0.0135)*(gconst9*gconst9)))+(((-0.167025)*gconst8))+(((0.01125)*gconst9))+(((-0.087975)*gconst8*gconst9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4774.value)*(((0.55)+x4772+x4771)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4773.value)*(((-0.02475)+(((-0.0135)*(gconst8*gconst8)))+(((0.0135)*(gconst9*gconst9)))+(((-0.167025)*gconst8))+(((0.01125)*gconst9))+(((-0.087975)*gconst8*gconst9))))))+IKsqr(((x4774.value)*(((0.55)+x4772+x4771))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4773.value)*(((-0.02475)+(((-0.0135)*(gconst8*gconst8)))+(((0.0135)*(gconst9*gconst9)))+(((-0.167025)*gconst8))+(((0.01125)*gconst9))+(((-0.087975)*gconst8*gconst9))))), ((x4774.value)*(((0.55)+x4772+x4771))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4775=IKcos(j1);
IkReal x4776=IKsin(j1);
IkReal x4777=((0.3)*gconst8);
IkReal x4778=((0.045)*gconst9);
IkReal x4779=((0.045)*gconst8);
IkReal x4780=((0.3)*gconst9);
IkReal x4781=(pz*x4776);
IkReal x4782=(pz*x4775);
evalcond[0]=((-0.55)+x4782+(((-1.0)*x4779))+(((-1.0)*x4780)));
evalcond[1]=((0.045)+x4777+x4781+(((-1.0)*x4778)));
evalcond[2]=((-0.2125)+(((-0.09)*x4781))+(((-1.0)*pp))+(((1.1)*x4782)));
evalcond[3]=(((x4776*x4780))+((x4775*x4777))+(((0.55)*x4776))+(((0.045)*x4775))+((x4776*x4779))+(((-1.0)*x4775*x4778)));
evalcond[4]=((((-1.0)*x4776*x4778))+(((0.045)*x4776))+((x4776*x4777))+pz+(((-1.0)*x4775*x4779))+(((-0.55)*x4775))+(((-1.0)*x4775*x4780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4783 = IKatan2WithCheck((gconst13*(((-0.045)+(((0.045)*gconst9))+(((-0.3)*gconst8))))),(gconst13*(((0.55)+(((0.045)*gconst8))+(((0.3)*gconst9))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4783.valid){
continue;
}
j1array[0]=x4783.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4784=IKcos(j1);
IkReal x4785=IKsin(j1);
IkReal x4786=((0.3)*gconst8);
IkReal x4787=((0.045)*gconst9);
IkReal x4788=((0.045)*gconst8);
IkReal x4789=((0.3)*gconst9);
IkReal x4790=(pz*x4785);
IkReal x4791=(pz*x4784);
evalcond[0]=((-0.55)+x4791+(((-1.0)*x4788))+(((-1.0)*x4789)));
evalcond[1]=((0.045)+x4790+x4786+(((-1.0)*x4787)));
evalcond[2]=((-0.2125)+(((-0.09)*x4790))+(((-1.0)*pp))+(((1.1)*x4791)));
evalcond[3]=((((0.55)*x4785))+((x4785*x4789))+((x4785*x4788))+((x4784*x4786))+(((-1.0)*x4784*x4787))+(((0.045)*x4784)));
evalcond[4]=(((x4785*x4786))+(((-0.55)*x4784))+pz+(((-1.0)*x4785*x4787))+(((-1.0)*x4784*x4788))+(((-1.0)*x4784*x4789))+(((0.045)*x4785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst10;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x4792=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x4792.valid){
continue;
}
if( (((36.6666666666667)*pz*(x4792.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x4792.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4793 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x4793.valid){
continue;
}
gconst10=((3.14159265358979)+(IKasin(((36.6666666666667)*pz*(x4792.value))))+(((-1.0)*(x4793.value))));
IkReal gconst11;
gconst11=IKsin(gconst10);
IkReal gconst12;
gconst12=IKcos(gconst10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst10))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+(((6.66666666666667)*gconst12*pz))+((gconst11*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst11))+(((-0.3)*gconst12)));
evalcond[2]=((0.045)+(((-0.045)*gconst12))+(((0.3)*gconst11)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4795 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst11))+(((-0.3)*gconst12))),((0.045)+(((-0.045)*gconst12))+(((0.3)*gconst11))),IKFAST_ATAN2_MAGTHRESH);
if(!x4795.valid){
continue;
}
IkReal x4794=x4795.value;
j1array[0]=((-1.0)*x4794);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4794)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4796=IKsin(j1);
IkReal x4797=IKcos(j1);
IkReal x4798=((0.045)*x4797);
evalcond[0]=((((0.3)*gconst11*x4797))+(((0.045)*gconst11*x4796))+(((0.55)*x4796))+x4798+(((0.3)*gconst12*x4796))+(((-1.0)*gconst12*x4798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4799=((0.045)*gconst11);
IkReal x4800=((0.3)*gconst12);
CheckValue<IkReal> x4801=IKPowWithIntegerCheck((((pz*x4799))+(((0.55)*pz))+((pz*x4800))),-1);
if(!x4801.valid){
continue;
}
CheckValue<IkReal> x4802=IKPowWithIntegerCheck(pz,-1);
if(!x4802.valid){
continue;
}
if( IKabs(((x4801.value)*(((-0.02475)+(((0.0135)*(gconst12*gconst12)))+(((-0.0135)*(gconst11*gconst11)))+(((-0.167025)*gconst11))+(((0.01125)*gconst12))+(((-0.087975)*gconst11*gconst12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4802.value)*(((0.55)+x4799+x4800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4801.value)*(((-0.02475)+(((0.0135)*(gconst12*gconst12)))+(((-0.0135)*(gconst11*gconst11)))+(((-0.167025)*gconst11))+(((0.01125)*gconst12))+(((-0.087975)*gconst11*gconst12))))))+IKsqr(((x4802.value)*(((0.55)+x4799+x4800))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4801.value)*(((-0.02475)+(((0.0135)*(gconst12*gconst12)))+(((-0.0135)*(gconst11*gconst11)))+(((-0.167025)*gconst11))+(((0.01125)*gconst12))+(((-0.087975)*gconst11*gconst12))))), ((x4802.value)*(((0.55)+x4799+x4800))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4803=IKcos(j1);
IkReal x4804=IKsin(j1);
IkReal x4805=((0.3)*gconst12);
IkReal x4806=((0.045)*gconst11);
IkReal x4807=((0.3)*gconst11);
IkReal x4808=((0.045)*gconst12);
IkReal x4809=(gconst11*x4803);
IkReal x4810=((0.045)*x4804);
IkReal x4811=(pz*x4804);
IkReal x4812=(pz*x4803);
evalcond[0]=((-0.55)+(((-1.0)*x4806))+(((-1.0)*x4805))+x4812);
evalcond[1]=((0.045)+(((-1.0)*x4808))+x4811+x4807);
evalcond[2]=((-0.2125)+(((-0.09)*x4811))+(((1.1)*x4812))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x4803))+((x4804*x4805))+((x4804*x4806))+(((0.55)*x4804))+(((-1.0)*x4803*x4808))+((x4803*x4807)));
evalcond[4]=(((x4804*x4807))+(((-0.55)*x4803))+(((-1.0)*x4804*x4808))+pz+(((-1.0)*x4803*x4806))+(((-1.0)*x4803*x4805))+x4810);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4813 = IKatan2WithCheck((gconst14*(((-0.045)+(((0.045)*gconst12))+(((-0.3)*gconst11))))),(gconst14*(((0.55)+(((0.045)*gconst11))+(((0.3)*gconst12))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4813.valid){
continue;
}
j1array[0]=x4813.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4814=IKcos(j1);
IkReal x4815=IKsin(j1);
IkReal x4816=((0.3)*gconst12);
IkReal x4817=((0.045)*gconst11);
IkReal x4818=((0.3)*gconst11);
IkReal x4819=((0.045)*gconst12);
IkReal x4820=(gconst11*x4814);
IkReal x4821=((0.045)*x4815);
IkReal x4822=(pz*x4815);
IkReal x4823=(pz*x4814);
evalcond[0]=((-0.55)+(((-1.0)*x4816))+(((-1.0)*x4817))+x4823);
evalcond[1]=((0.045)+(((-1.0)*x4819))+x4818+x4822);
evalcond[2]=((-0.2125)+(((-0.09)*x4822))+(((1.1)*x4823))+(((-1.0)*pp)));
evalcond[3]=(((x4815*x4817))+((x4815*x4816))+(((-1.0)*x4814*x4819))+(((0.55)*x4815))+(((0.045)*x4814))+((x4814*x4818)));
evalcond[4]=(((x4815*x4818))+(((-1.0)*x4815*x4819))+(((-0.55)*x4814))+(((-1.0)*x4814*x4817))+(((-1.0)*x4814*x4816))+pz+x4821);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x4824=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x4824)));
op[1]=0;
op[2]=((1.0)+x4824);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4825=((0.045)*sj3);
IkReal x4826=((0.3)*cj3);
CheckValue<IkReal> x4827=IKPowWithIntegerCheck((((pz*x4825))+((pz*x4826))+(((0.55)*pz))),-1);
if(!x4827.valid){
continue;
}
CheckValue<IkReal> x4828=IKPowWithIntegerCheck(pz,-1);
if(!x4828.valid){
continue;
}
if( IKabs(((x4827.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4828.value)*(((0.55)+x4826+x4825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4827.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x4828.value)*(((0.55)+x4826+x4825))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4827.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x4828.value)*(((0.55)+x4826+x4825))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4829=IKcos(j1);
IkReal x4830=IKsin(j1);
IkReal x4831=((0.045)*cj3);
IkReal x4832=((0.3)*cj3);
IkReal x4833=(sj3*x4830);
IkReal x4834=(cj3*x4830);
IkReal x4835=(sj3*x4829);
IkReal x4836=(pz*x4830);
IkReal x4837=(pz*x4829);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x4832))+x4837);
evalcond[1]=((0.045)+(((-1.0)*x4831))+(((0.3)*sj3))+x4836);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x4836))+(((1.1)*x4837)));
evalcond[3]=((((0.3)*x4835))+(((0.55)*x4830))+(((-1.0)*x4829*x4831))+(((0.045)*x4833))+(((0.045)*x4829))+((x4830*x4832)));
evalcond[4]=((((0.3)*x4833))+(((-1.0)*x4830*x4831))+(((-0.55)*x4829))+(((-1.0)*x4829*x4832))+(((0.045)*x4830))+pz+(((-0.045)*x4835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4839=IKPowWithIntegerCheck(pz,-1);
if(!x4839.valid){
continue;
}
IkReal x4838=x4839.value;
if( IKabs(((0.111111111111111)*x4838*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4838*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x4838*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x4838*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x4838*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x4838*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4840=IKcos(j1);
IkReal x4841=IKsin(j1);
IkReal x4842=((0.045)*cj3);
IkReal x4843=((0.3)*cj3);
IkReal x4844=(sj3*x4841);
IkReal x4845=(cj3*x4841);
IkReal x4846=(sj3*x4840);
IkReal x4847=(pz*x4841);
IkReal x4848=(pz*x4840);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x4843))+x4848);
evalcond[1]=((0.045)+(((-1.0)*x4842))+(((0.3)*sj3))+x4847);
evalcond[2]=((-0.2125)+(((-0.09)*x4847))+(((1.1)*x4848))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x4844))+(((0.045)*x4840))+(((0.55)*x4841))+((x4841*x4843))+(((-1.0)*x4840*x4842))+(((0.3)*x4846)));
evalcond[4]=((((0.045)*x4841))+(((-1.0)*x4841*x4842))+(((-0.045)*x4846))+(((-1.0)*x4840*x4843))+(((0.3)*x4844))+pz+(((-0.55)*x4840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4849 = IKatan2WithCheck((gconst6*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst6*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4849.valid){
continue;
}
j1array[0]=x4849.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4850=IKcos(j1);
IkReal x4851=IKsin(j1);
IkReal x4852=((0.045)*cj3);
IkReal x4853=((0.3)*cj3);
IkReal x4854=(sj3*x4851);
IkReal x4855=(cj3*x4851);
IkReal x4856=(sj3*x4850);
IkReal x4857=(pz*x4851);
IkReal x4858=(pz*x4850);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x4853))+x4858);
evalcond[1]=((0.045)+(((-1.0)*x4852))+(((0.3)*sj3))+x4857);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x4857))+(((1.1)*x4858)));
evalcond[3]=((((0.3)*x4856))+(((0.55)*x4851))+(((0.045)*x4854))+(((0.045)*x4850))+(((-1.0)*x4850*x4852))+((x4851*x4853)));
evalcond[4]=((((0.3)*x4854))+(((-0.55)*x4850))+(((0.045)*x4851))+pz+(((-1.0)*x4851*x4852))+(((-0.045)*x4856))+(((-1.0)*x4850*x4853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4859=(cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*x4859);
evalcond[3]=x4859;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst15;
gconst15=IKsign(pz);
IkReal x4860=IKsign(pz);
IkReal x4861=(sj3*x4860);
IkReal x4862=(cj3*x4860);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.55)*x4860))+(((0.045)*x4861))+(((0.3)*x4862)))))+(IKabs(((((0.045)*x4860))+(((-0.045)*x4862))+(((0.3)*x4861))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst16;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x4863=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x4863.valid){
continue;
}
if( (((36.6666666666667)*pz*(x4863.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x4863.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4864 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x4864.valid){
continue;
}
gconst16=((((-1.0)*(IKasin(((36.6666666666667)*pz*(x4863.value))))))+(((-1.0)*(x4864.value))));
IkReal gconst17;
gconst17=IKsin(gconst16);
IkReal gconst18;
gconst18=IKcos(gconst16);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst16))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst17*pz))+(((6.66666666666667)*gconst18*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst17))+(((-0.3)*gconst18)));
evalcond[2]=((0.045)+(((-0.045)*gconst18))+(((0.3)*gconst17)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4866 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst17))+(((-0.3)*gconst18))),((-0.045)+(((0.045)*gconst18))+(((-0.3)*gconst17))),IKFAST_ATAN2_MAGTHRESH);
if(!x4866.valid){
continue;
}
IkReal x4865=x4866.value;
j1array[0]=((-1.0)*x4865);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4865)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4867=IKsin(j1);
IkReal x4868=IKcos(j1);
IkReal x4869=((0.045)*x4868);
evalcond[0]=((((-0.3)*gconst17*x4868))+((gconst18*x4869))+(((0.045)*gconst17*x4867))+(((-1.0)*x4869))+(((0.55)*x4867))+(((0.3)*gconst18*x4867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4870=((0.3)*gconst18);
IkReal x4871=((0.045)*gconst17);
CheckValue<IkReal> x4872=IKPowWithIntegerCheck((((pz*x4870))+((pz*x4871))+(((0.55)*pz))),-1);
if(!x4872.valid){
continue;
}
CheckValue<IkReal> x4873=IKPowWithIntegerCheck(pz,-1);
if(!x4873.valid){
continue;
}
if( IKabs(((x4872.value)*(((0.02475)+(((-0.0135)*(gconst18*gconst18)))+(((-0.01125)*gconst18))+(((0.087975)*gconst17*gconst18))+(((0.0135)*(gconst17*gconst17)))+(((0.167025)*gconst17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4873.value)*(((0.55)+x4871+x4870)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4872.value)*(((0.02475)+(((-0.0135)*(gconst18*gconst18)))+(((-0.01125)*gconst18))+(((0.087975)*gconst17*gconst18))+(((0.0135)*(gconst17*gconst17)))+(((0.167025)*gconst17))))))+IKsqr(((x4873.value)*(((0.55)+x4871+x4870))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4872.value)*(((0.02475)+(((-0.0135)*(gconst18*gconst18)))+(((-0.01125)*gconst18))+(((0.087975)*gconst17*gconst18))+(((0.0135)*(gconst17*gconst17)))+(((0.167025)*gconst17))))), ((x4873.value)*(((0.55)+x4871+x4870))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4874=IKcos(j1);
IkReal x4875=IKsin(j1);
IkReal x4876=((0.045)*gconst17);
IkReal x4877=((0.045)*gconst18);
IkReal x4878=((0.3)*gconst18);
IkReal x4879=((0.3)*gconst17);
IkReal x4880=(pz*x4875);
IkReal x4881=(pz*x4874);
evalcond[0]=((-0.55)+(((-1.0)*x4876))+(((-1.0)*x4878))+x4881);
evalcond[1]=((0.045)+(((-1.0)*x4880))+(((-1.0)*x4877))+x4879);
evalcond[2]=((-0.2125)+(((0.09)*x4880))+(((1.1)*x4881))+(((-1.0)*pp)));
evalcond[3]=(((x4874*x4877))+(((-0.045)*x4874))+(((-1.0)*x4874*x4879))+(((0.55)*x4875))+((x4875*x4876))+((x4875*x4878)));
evalcond[4]=((((-0.045)*x4875))+(((-1.0)*x4875*x4879))+(((-0.55)*x4874))+(((-1.0)*x4874*x4878))+(((-1.0)*x4874*x4876))+pz+((x4875*x4877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4882 = IKatan2WithCheck((gconst22*(((0.045)+(((-0.045)*gconst18))+(((0.3)*gconst17))))),(gconst22*(((0.55)+(((0.045)*gconst17))+(((0.3)*gconst18))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4882.valid){
continue;
}
j1array[0]=x4882.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4883=IKcos(j1);
IkReal x4884=IKsin(j1);
IkReal x4885=((0.045)*gconst17);
IkReal x4886=((0.045)*gconst18);
IkReal x4887=((0.3)*gconst18);
IkReal x4888=((0.3)*gconst17);
IkReal x4889=(pz*x4884);
IkReal x4890=(pz*x4883);
evalcond[0]=((-0.55)+(((-1.0)*x4887))+(((-1.0)*x4885))+x4890);
evalcond[1]=((0.045)+(((-1.0)*x4886))+(((-1.0)*x4889))+x4888);
evalcond[2]=((-0.2125)+(((1.1)*x4890))+(((0.09)*x4889))+(((-1.0)*pp)));
evalcond[3]=((((0.55)*x4884))+(((-1.0)*x4883*x4888))+(((-0.045)*x4883))+((x4883*x4886))+((x4884*x4885))+((x4884*x4887)));
evalcond[4]=((((-0.55)*x4883))+(((-1.0)*x4883*x4885))+(((-1.0)*x4883*x4887))+(((-0.045)*x4884))+(((-1.0)*x4884*x4888))+pz+((x4884*x4886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst19;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x4891=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x4891.valid){
continue;
}
if( (((36.6666666666667)*pz*(x4891.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x4891.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4892 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x4892.valid){
continue;
}
gconst19=((3.14159265358979)+(IKasin(((36.6666666666667)*pz*(x4891.value))))+(((-1.0)*(x4892.value))));
IkReal gconst20;
gconst20=IKsin(gconst19);
IkReal gconst21;
gconst21=IKcos(gconst19);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst19))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst20*pz))+(((6.66666666666667)*gconst21*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst20))+(((-0.3)*gconst21)));
evalcond[2]=((0.045)+(((-0.045)*gconst21))+(((0.3)*gconst20)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4894 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst20))+(((-0.3)*gconst21))),((-0.045)+(((0.045)*gconst21))+(((-0.3)*gconst20))),IKFAST_ATAN2_MAGTHRESH);
if(!x4894.valid){
continue;
}
IkReal x4893=x4894.value;
j1array[0]=((-1.0)*x4893);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4893)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4895=IKsin(j1);
IkReal x4896=IKcos(j1);
IkReal x4897=((0.045)*x4896);
evalcond[0]=(((gconst21*x4897))+(((0.3)*gconst21*x4895))+(((-1.0)*x4897))+(((0.55)*x4895))+(((0.045)*gconst20*x4895))+(((-0.3)*gconst20*x4896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4898=((0.3)*gconst21);
IkReal x4899=((0.045)*gconst20);
CheckValue<IkReal> x4900=IKPowWithIntegerCheck((((pz*x4898))+((pz*x4899))+(((0.55)*pz))),-1);
if(!x4900.valid){
continue;
}
CheckValue<IkReal> x4901=IKPowWithIntegerCheck(pz,-1);
if(!x4901.valid){
continue;
}
if( IKabs(((x4900.value)*(((0.02475)+(((-0.01125)*gconst21))+(((0.0135)*(gconst20*gconst20)))+(((0.087975)*gconst20*gconst21))+(((-0.0135)*(gconst21*gconst21)))+(((0.167025)*gconst20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4901.value)*(((0.55)+x4899+x4898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4900.value)*(((0.02475)+(((-0.01125)*gconst21))+(((0.0135)*(gconst20*gconst20)))+(((0.087975)*gconst20*gconst21))+(((-0.0135)*(gconst21*gconst21)))+(((0.167025)*gconst20))))))+IKsqr(((x4901.value)*(((0.55)+x4899+x4898))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4900.value)*(((0.02475)+(((-0.01125)*gconst21))+(((0.0135)*(gconst20*gconst20)))+(((0.087975)*gconst20*gconst21))+(((-0.0135)*(gconst21*gconst21)))+(((0.167025)*gconst20))))), ((x4901.value)*(((0.55)+x4899+x4898))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4902=IKcos(j1);
IkReal x4903=IKsin(j1);
IkReal x4904=((0.3)*gconst21);
IkReal x4905=((0.045)*gconst20);
IkReal x4906=((0.045)*gconst21);
IkReal x4907=((0.3)*gconst20);
IkReal x4908=(pz*x4903);
IkReal x4909=(pz*x4902);
evalcond[0]=((-0.55)+x4909+(((-1.0)*x4904))+(((-1.0)*x4905)));
evalcond[1]=((0.045)+x4907+(((-1.0)*x4906))+(((-1.0)*x4908)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x4909))+(((0.09)*x4908)));
evalcond[3]=((((0.55)*x4903))+(((-1.0)*x4902*x4907))+((x4902*x4906))+((x4903*x4905))+((x4903*x4904))+(((-0.045)*x4902)));
evalcond[4]=((((-1.0)*x4902*x4905))+(((-1.0)*x4902*x4904))+(((-1.0)*x4903*x4907))+((x4903*x4906))+(((-0.045)*x4903))+pz+(((-0.55)*x4902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4910 = IKatan2WithCheck((gconst23*(((0.045)+(((-0.045)*gconst21))+(((0.3)*gconst20))))),(gconst23*(((0.55)+(((0.045)*gconst20))+(((0.3)*gconst21))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4910.valid){
continue;
}
j1array[0]=x4910.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4911=IKcos(j1);
IkReal x4912=IKsin(j1);
IkReal x4913=((0.3)*gconst21);
IkReal x4914=((0.045)*gconst20);
IkReal x4915=((0.045)*gconst21);
IkReal x4916=((0.3)*gconst20);
IkReal x4917=(pz*x4912);
IkReal x4918=(pz*x4911);
evalcond[0]=((-0.55)+x4918+(((-1.0)*x4913))+(((-1.0)*x4914)));
evalcond[1]=((0.045)+x4916+(((-1.0)*x4915))+(((-1.0)*x4917)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x4917))+(((1.1)*x4918)));
evalcond[3]=(((x4911*x4915))+(((-1.0)*x4911*x4916))+(((0.55)*x4912))+(((-0.045)*x4911))+((x4912*x4914))+((x4912*x4913)));
evalcond[4]=((((-1.0)*x4912*x4916))+(((-1.0)*x4911*x4913))+(((-1.0)*x4911*x4914))+pz+(((-0.045)*x4912))+(((-0.55)*x4911))+((x4912*x4915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x4919=((2.40588235294118)*sj3);
op[0]=((1.0)+x4919);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x4919)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4920=((0.045)*sj3);
IkReal x4921=((0.3)*cj3);
CheckValue<IkReal> x4922=IKPowWithIntegerCheck((((pz*x4920))+((pz*x4921))+(((0.55)*pz))),-1);
if(!x4922.valid){
continue;
}
CheckValue<IkReal> x4923=IKPowWithIntegerCheck(pz,-1);
if(!x4923.valid){
continue;
}
if( IKabs(((x4922.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4923.value)*(((0.55)+x4921+x4920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4922.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x4923.value)*(((0.55)+x4921+x4920))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4922.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x4923.value)*(((0.55)+x4921+x4920))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4924=IKcos(j1);
IkReal x4925=IKsin(j1);
IkReal x4926=((0.045)*cj3);
IkReal x4927=((0.3)*cj3);
IkReal x4928=(sj3*x4925);
IkReal x4929=(cj3*x4925);
IkReal x4930=(sj3*x4924);
IkReal x4931=(pz*x4925);
IkReal x4932=(pz*x4924);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x4932+(((-1.0)*x4927)));
evalcond[1]=((0.045)+(((-1.0)*x4931))+(((0.3)*sj3))+(((-1.0)*x4926)));
evalcond[2]=((-0.2125)+(((0.09)*x4931))+(((-1.0)*pp))+(((1.1)*x4932)));
evalcond[3]=((((0.55)*x4925))+((x4924*x4926))+(((-0.045)*x4924))+(((-0.3)*x4930))+((x4925*x4927))+(((0.045)*x4928)));
evalcond[4]=((((-0.3)*x4928))+(((-0.045)*x4925))+(((-0.045)*x4930))+(((-1.0)*x4924*x4927))+(((-0.55)*x4924))+((x4925*x4926))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4934=IKPowWithIntegerCheck(pz,-1);
if(!x4934.valid){
continue;
}
IkReal x4933=x4934.value;
if( IKabs(((0.111111111111111)*x4933*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4933*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x4933*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x4933*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x4933*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x4933*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4935=IKcos(j1);
IkReal x4936=IKsin(j1);
IkReal x4937=((0.045)*cj3);
IkReal x4938=((0.3)*cj3);
IkReal x4939=(sj3*x4936);
IkReal x4940=(cj3*x4936);
IkReal x4941=(sj3*x4935);
IkReal x4942=(pz*x4936);
IkReal x4943=(pz*x4935);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x4943+(((-1.0)*x4938)));
evalcond[1]=((0.045)+(((-1.0)*x4942))+(((0.3)*sj3))+(((-1.0)*x4937)));
evalcond[2]=((-0.2125)+(((1.1)*x4943))+(((-1.0)*pp))+(((0.09)*x4942)));
evalcond[3]=(((x4935*x4937))+((x4936*x4938))+(((-0.045)*x4935))+(((-0.3)*x4941))+(((0.045)*x4939))+(((0.55)*x4936)));
evalcond[4]=(((x4936*x4937))+(((-1.0)*x4935*x4938))+(((-0.3)*x4939))+(((-0.045)*x4936))+(((-0.55)*x4935))+pz+(((-0.045)*x4941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4944 = IKatan2WithCheck((gconst15*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst15*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4944.valid){
continue;
}
j1array[0]=x4944.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4945=IKcos(j1);
IkReal x4946=IKsin(j1);
IkReal x4947=((0.045)*cj3);
IkReal x4948=((0.3)*cj3);
IkReal x4949=(sj3*x4946);
IkReal x4950=(cj3*x4946);
IkReal x4951=(sj3*x4945);
IkReal x4952=(pz*x4946);
IkReal x4953=(pz*x4945);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x4953+(((-1.0)*x4948)));
evalcond[1]=((0.045)+(((-1.0)*x4947))+(((-1.0)*x4952))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x4953))+(((0.09)*x4952)));
evalcond[3]=((((0.045)*x4949))+(((0.55)*x4946))+((x4946*x4948))+(((-0.3)*x4951))+((x4945*x4947))+(((-0.045)*x4945)));
evalcond[4]=((((-1.0)*x4945*x4948))+((x4946*x4947))+pz+(((-0.3)*x4949))+(((-0.045)*x4946))+(((-0.045)*x4951))+(((-0.55)*x4945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4954=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4954;
evalcond[3]=x4954;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst24;
gconst24=IKsign(pz);
IkReal x4955=IKsign(pz);
IkReal x4956=(sj3*x4955);
IkReal x4957=(cj3*x4955);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.045)*x4957))+(((-0.3)*x4956))+(((-0.045)*x4955)))))+(IKabs(((((0.045)*x4956))+(((0.55)*x4955))+(((0.3)*x4957))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst25;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x4958=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x4958.valid){
continue;
}
if( (((36.6666666666667)*pz*(x4958.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x4958.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4959 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x4959.valid){
continue;
}
gconst25=((((-1.0)*(IKasin(((36.6666666666667)*pz*(x4958.value))))))+(((-1.0)*(x4959.value))));
IkReal gconst26;
gconst26=IKsin(gconst25);
IkReal gconst27;
gconst27=IKcos(gconst25);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst25))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst26*pz))+(((6.66666666666667)*gconst27*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*gconst26))+(((-0.3)*gconst27)));
evalcond[2]=((0.045)+(((-0.045)*gconst27))+(((0.3)*gconst26)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4961 = IKatan2WithCheck(((-0.55)+(((-0.045)*gconst26))+(((-0.3)*gconst27))),((0.045)+(((-0.045)*gconst27))+(((0.3)*gconst26))),IKFAST_ATAN2_MAGTHRESH);
if(!x4961.valid){
continue;
}
IkReal x4960=x4961.value;
j1array[0]=((-1.0)*x4960);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4960)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4962=IKsin(j1);
IkReal x4963=IKcos(j1);
IkReal x4964=((0.045)*x4963);
evalcond[0]=(x4964+(((0.3)*gconst26*x4963))+(((0.3)*gconst27*x4962))+(((0.55)*x4962))+(((0.045)*gconst26*x4962))+(((-1.0)*gconst27*x4964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4965=((0.045)*gconst26);
IkReal x4966=((0.3)*gconst27);
CheckValue<IkReal> x4967=IKPowWithIntegerCheck((((pz*x4965))+((pz*x4966))+(((0.55)*pz))),-1);
if(!x4967.valid){
continue;
}
CheckValue<IkReal> x4968=IKPowWithIntegerCheck(pz,-1);
if(!x4968.valid){
continue;
}
if( IKabs(((x4967.value)*(((-0.02475)+(((-0.087975)*gconst26*gconst27))+(((0.0135)*(gconst27*gconst27)))+(((-0.0135)*(gconst26*gconst26)))+(((-0.167025)*gconst26))+(((0.01125)*gconst27)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4968.value)*(((0.55)+x4966+x4965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4967.value)*(((-0.02475)+(((-0.087975)*gconst26*gconst27))+(((0.0135)*(gconst27*gconst27)))+(((-0.0135)*(gconst26*gconst26)))+(((-0.167025)*gconst26))+(((0.01125)*gconst27))))))+IKsqr(((x4968.value)*(((0.55)+x4966+x4965))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4967.value)*(((-0.02475)+(((-0.087975)*gconst26*gconst27))+(((0.0135)*(gconst27*gconst27)))+(((-0.0135)*(gconst26*gconst26)))+(((-0.167025)*gconst26))+(((0.01125)*gconst27))))), ((x4968.value)*(((0.55)+x4966+x4965))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4969=IKcos(j1);
IkReal x4970=IKsin(j1);
IkReal x4971=((0.045)*gconst27);
IkReal x4972=((0.3)*gconst26);
IkReal x4973=((0.3)*gconst27);
IkReal x4974=((0.045)*x4970);
IkReal x4975=(pz*x4970);
IkReal x4976=((0.045)*x4969);
IkReal x4977=(pz*x4969);
evalcond[0]=((-0.55)+x4977+(((-0.045)*gconst26))+(((-1.0)*x4973)));
evalcond[1]=((0.045)+x4975+x4972+(((-1.0)*x4971)));
evalcond[2]=((-0.2125)+(((-0.09)*x4975))+(((-1.0)*pp))+(((1.1)*x4977)));
evalcond[3]=(x4976+((gconst26*x4974))+((x4970*x4973))+(((0.55)*x4970))+((x4969*x4972))+(((-1.0)*x4969*x4971)));
evalcond[4]=(x4974+((x4970*x4972))+(((-1.0)*gconst26*x4976))+pz+(((-1.0)*x4970*x4971))+(((-0.55)*x4969))+(((-1.0)*x4969*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4978 = IKatan2WithCheck((gconst31*(((-0.045)+(((0.045)*gconst27))+(((-0.3)*gconst26))))),(gconst31*(((0.55)+(((0.045)*gconst26))+(((0.3)*gconst27))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4978.valid){
continue;
}
j1array[0]=x4978.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4979=IKcos(j1);
IkReal x4980=IKsin(j1);
IkReal x4981=((0.045)*gconst27);
IkReal x4982=((0.3)*gconst26);
IkReal x4983=((0.3)*gconst27);
IkReal x4984=((0.045)*x4980);
IkReal x4985=(pz*x4980);
IkReal x4986=((0.045)*x4979);
IkReal x4987=(pz*x4979);
evalcond[0]=((-0.55)+x4987+(((-0.045)*gconst26))+(((-1.0)*x4983)));
evalcond[1]=((0.045)+x4982+x4985+(((-1.0)*x4981)));
evalcond[2]=((-0.2125)+(((1.1)*x4987))+(((-0.09)*x4985))+(((-1.0)*pp)));
evalcond[3]=(x4986+((gconst26*x4984))+((x4979*x4982))+(((0.55)*x4980))+(((-1.0)*x4979*x4981))+((x4980*x4983)));
evalcond[4]=(x4984+(((-1.0)*gconst26*x4986))+pz+(((-1.0)*x4979*x4983))+(((-0.55)*x4979))+(((-1.0)*x4980*x4981))+((x4980*x4982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst28;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x4988=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x4988.valid){
continue;
}
if( (((36.6666666666667)*pz*(x4988.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x4988.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4989 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x4989.valid){
continue;
}
gconst28=((3.14159265358979)+(IKasin(((36.6666666666667)*pz*(x4988.value))))+(((-1.0)*(x4989.value))));
IkReal gconst29;
gconst29=IKsin(gconst28);
IkReal gconst30;
gconst30=IKcos(gconst28);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst28))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+(((6.66666666666667)*gconst30*pz))+((gconst29*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.3)*gconst30))+(((-0.045)*gconst29)));
evalcond[2]=((0.045)+(((-0.045)*gconst30))+(((0.3)*gconst29)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4991 = IKatan2WithCheck(((-0.55)+(((-0.3)*gconst30))+(((-0.045)*gconst29))),((0.045)+(((-0.045)*gconst30))+(((0.3)*gconst29))),IKFAST_ATAN2_MAGTHRESH);
if(!x4991.valid){
continue;
}
IkReal x4990=x4991.value;
j1array[0]=((-1.0)*x4990);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4990)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4992=IKsin(j1);
IkReal x4993=IKcos(j1);
IkReal x4994=((0.045)*x4993);
evalcond[0]=(x4994+(((0.045)*gconst29*x4992))+(((-1.0)*gconst30*x4994))+(((0.55)*x4992))+(((0.3)*gconst29*x4993))+(((0.3)*gconst30*x4992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4995=((0.3)*gconst30);
IkReal x4996=((0.045)*gconst29);
CheckValue<IkReal> x4997=IKPowWithIntegerCheck((((pz*x4995))+((pz*x4996))+(((0.55)*pz))),-1);
if(!x4997.valid){
continue;
}
CheckValue<IkReal> x4998=IKPowWithIntegerCheck(pz,-1);
if(!x4998.valid){
continue;
}
if( IKabs(((x4997.value)*(((-0.02475)+(((-0.167025)*gconst29))+(((0.01125)*gconst30))+(((-0.0135)*(gconst29*gconst29)))+(((0.0135)*(gconst30*gconst30)))+(((-0.087975)*gconst29*gconst30)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4998.value)*(((0.55)+x4996+x4995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4997.value)*(((-0.02475)+(((-0.167025)*gconst29))+(((0.01125)*gconst30))+(((-0.0135)*(gconst29*gconst29)))+(((0.0135)*(gconst30*gconst30)))+(((-0.087975)*gconst29*gconst30))))))+IKsqr(((x4998.value)*(((0.55)+x4996+x4995))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4997.value)*(((-0.02475)+(((-0.167025)*gconst29))+(((0.01125)*gconst30))+(((-0.0135)*(gconst29*gconst29)))+(((0.0135)*(gconst30*gconst30)))+(((-0.087975)*gconst29*gconst30))))), ((x4998.value)*(((0.55)+x4996+x4995))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4999=IKcos(j1);
IkReal x5000=IKsin(j1);
IkReal x5001=((0.3)*gconst29);
IkReal x5002=((0.045)*gconst30);
IkReal x5003=((0.3)*gconst30);
IkReal x5004=((0.045)*x5000);
IkReal x5005=(pz*x5000);
IkReal x5006=((0.045)*x4999);
IkReal x5007=(pz*x4999);
evalcond[0]=((-0.55)+(((-0.045)*gconst29))+x5007+(((-1.0)*x5003)));
evalcond[1]=((0.045)+x5001+x5005+(((-1.0)*x5002)));
evalcond[2]=((-0.2125)+(((1.1)*x5007))+(((-0.09)*x5005))+(((-1.0)*pp)));
evalcond[3]=(((x4999*x5001))+(((0.55)*x5000))+x5006+(((-1.0)*x4999*x5002))+((x5000*x5003))+((gconst29*x5004)));
evalcond[4]=((((-0.55)*x4999))+x5004+(((-1.0)*x5000*x5002))+pz+(((-1.0)*x4999*x5003))+((x5000*x5001))+(((-1.0)*gconst29*x5006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5008 = IKatan2WithCheck((gconst32*(((-0.045)+(((0.045)*gconst30))+(((-0.3)*gconst29))))),(gconst32*(((0.55)+(((0.045)*gconst29))+(((0.3)*gconst30))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
j1array[0]=x5008.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5009=IKcos(j1);
IkReal x5010=IKsin(j1);
IkReal x5011=((0.3)*gconst29);
IkReal x5012=((0.045)*gconst30);
IkReal x5013=((0.3)*gconst30);
IkReal x5014=((0.045)*x5010);
IkReal x5015=(pz*x5010);
IkReal x5016=((0.045)*x5009);
IkReal x5017=(pz*x5009);
evalcond[0]=((-0.55)+(((-0.045)*gconst29))+x5017+(((-1.0)*x5013)));
evalcond[1]=((0.045)+x5011+x5015+(((-1.0)*x5012)));
evalcond[2]=((-0.2125)+(((-0.09)*x5015))+(((-1.0)*pp))+(((1.1)*x5017)));
evalcond[3]=(((gconst29*x5014))+(((-1.0)*x5009*x5012))+((x5010*x5013))+x5016+((x5009*x5011))+(((0.55)*x5010)));
evalcond[4]=((((-1.0)*x5009*x5013))+((x5010*x5011))+(((-0.55)*x5009))+x5014+(((-1.0)*gconst29*x5016))+(((-1.0)*x5010*x5012))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x5018=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x5018)));
op[1]=0;
op[2]=((1.0)+x5018);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5019=((0.045)*sj3);
IkReal x5020=((0.3)*cj3);
CheckValue<IkReal> x5021=IKPowWithIntegerCheck((((pz*x5020))+((pz*x5019))+(((0.55)*pz))),-1);
if(!x5021.valid){
continue;
}
CheckValue<IkReal> x5022=IKPowWithIntegerCheck(pz,-1);
if(!x5022.valid){
continue;
}
if( IKabs(((x5021.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5022.value)*(((0.55)+x5020+x5019)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5021.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x5022.value)*(((0.55)+x5020+x5019))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5021.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x5022.value)*(((0.55)+x5020+x5019))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5023=IKcos(j1);
IkReal x5024=IKsin(j1);
IkReal x5025=((0.045)*cj3);
IkReal x5026=((0.3)*cj3);
IkReal x5027=(sj3*x5024);
IkReal x5028=(cj3*x5024);
IkReal x5029=(sj3*x5023);
IkReal x5030=(pz*x5024);
IkReal x5031=(pz*x5023);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5031+(((-1.0)*x5026)));
evalcond[1]=((0.045)+x5030+(((0.3)*sj3))+(((-1.0)*x5025)));
evalcond[2]=((-0.2125)+(((-0.09)*x5030))+(((1.1)*x5031))+(((-1.0)*pp)));
evalcond[3]=(((x5024*x5026))+(((-1.0)*x5023*x5025))+(((0.55)*x5024))+(((0.045)*x5023))+(((0.045)*x5027))+(((0.3)*x5029)));
evalcond[4]=((((-0.045)*x5029))+(((-1.0)*x5023*x5026))+(((-0.55)*x5023))+pz+(((0.045)*x5024))+(((-1.0)*x5024*x5025))+(((0.3)*x5027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5033=IKPowWithIntegerCheck(pz,-1);
if(!x5033.valid){
continue;
}
IkReal x5032=x5033.value;
if( IKabs(((0.111111111111111)*x5032*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5032*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x5032*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x5032*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x5032*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x5032*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5034=IKcos(j1);
IkReal x5035=IKsin(j1);
IkReal x5036=((0.045)*cj3);
IkReal x5037=((0.3)*cj3);
IkReal x5038=(sj3*x5035);
IkReal x5039=(cj3*x5035);
IkReal x5040=(sj3*x5034);
IkReal x5041=(pz*x5035);
IkReal x5042=(pz*x5034);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5042+(((-1.0)*x5037)));
evalcond[1]=((0.045)+x5041+(((0.3)*sj3))+(((-1.0)*x5036)));
evalcond[2]=((-0.2125)+(((1.1)*x5042))+(((-0.09)*x5041))+(((-1.0)*pp)));
evalcond[3]=((((0.3)*x5040))+((x5035*x5037))+(((0.55)*x5035))+(((0.045)*x5038))+(((0.045)*x5034))+(((-1.0)*x5034*x5036)));
evalcond[4]=((((0.3)*x5038))+(((-0.045)*x5040))+(((-0.55)*x5034))+(((0.045)*x5035))+pz+(((-1.0)*x5035*x5036))+(((-1.0)*x5034*x5037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5043 = IKatan2WithCheck((gconst24*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst24*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5043.valid){
continue;
}
j1array[0]=x5043.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5044=IKcos(j1);
IkReal x5045=IKsin(j1);
IkReal x5046=((0.045)*cj3);
IkReal x5047=((0.3)*cj3);
IkReal x5048=(sj3*x5045);
IkReal x5049=(cj3*x5045);
IkReal x5050=(sj3*x5044);
IkReal x5051=(pz*x5045);
IkReal x5052=(pz*x5044);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5047))+x5052);
evalcond[1]=((0.045)+(((-1.0)*x5046))+x5051+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x5051))+(((1.1)*x5052)));
evalcond[3]=((((0.045)*x5048))+(((0.045)*x5044))+(((0.55)*x5045))+((x5045*x5047))+(((-1.0)*x5044*x5046))+(((0.3)*x5050)));
evalcond[4]=((((0.045)*x5045))+(((0.3)*x5048))+pz+(((-0.55)*x5044))+(((-1.0)*x5045*x5046))+(((-1.0)*x5044*x5047))+(((-0.045)*x5050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5053=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x5053;
evalcond[3]=((-1.0)*x5053);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst33;
gconst33=IKsign(pz);
IkReal x5054=IKsign(pz);
IkReal x5055=(sj3*x5054);
IkReal x5056=(cj3*x5054);
dummyeval[0]=pz;
dummyeval[1]=((IKabs(((((0.045)*x5054))+(((0.3)*x5055))+(((-0.045)*x5056)))))+(IKabs(((((0.55)*x5054))+(((0.045)*x5055))+(((0.3)*x5056))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*cj3*pz))+(((12.2222222222222)*pz))+((pz*sj3)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst34;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x5057=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x5057.valid){
continue;
}
if( (((36.6666666666667)*pz*(x5057.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x5057.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x5058 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x5058.valid){
continue;
}
gconst34=((((-1.0)*(IKasin(((36.6666666666667)*pz*(x5057.value))))))+(((-1.0)*(x5058.value))));
IkReal gconst35;
gconst35=IKsin(gconst34);
IkReal gconst36;
gconst36=IKcos(gconst34);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst34))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst35*pz))+(((6.66666666666667)*gconst36*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.3)*gconst36))+(((-0.045)*gconst35)));
evalcond[2]=((0.045)+(((-0.045)*gconst36))+(((0.3)*gconst35)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5060 = IKatan2WithCheck(((-0.55)+(((-0.3)*gconst36))+(((-0.045)*gconst35))),((-0.045)+(((-0.3)*gconst35))+(((0.045)*gconst36))),IKFAST_ATAN2_MAGTHRESH);
if(!x5060.valid){
continue;
}
IkReal x5059=x5060.value;
j1array[0]=((-1.0)*x5059);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5059)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5061=IKsin(j1);
IkReal x5062=IKcos(j1);
IkReal x5063=((0.045)*x5062);
evalcond[0]=((((-1.0)*x5063))+((gconst36*x5063))+(((0.55)*x5061))+(((-0.3)*gconst35*x5062))+(((0.3)*gconst36*x5061))+(((0.045)*gconst35*x5061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5064=((0.045)*gconst35);
IkReal x5065=((0.3)*gconst36);
CheckValue<IkReal> x5066=IKPowWithIntegerCheck((((pz*x5064))+((pz*x5065))+(((0.55)*pz))),-1);
if(!x5066.valid){
continue;
}
CheckValue<IkReal> x5067=IKPowWithIntegerCheck(pz,-1);
if(!x5067.valid){
continue;
}
if( IKabs(((x5066.value)*(((0.02475)+(((-0.0135)*(gconst36*gconst36)))+(((0.087975)*gconst35*gconst36))+(((0.167025)*gconst35))+(((-0.01125)*gconst36))+(((0.0135)*(gconst35*gconst35))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5067.value)*(((0.55)+x5065+x5064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5066.value)*(((0.02475)+(((-0.0135)*(gconst36*gconst36)))+(((0.087975)*gconst35*gconst36))+(((0.167025)*gconst35))+(((-0.01125)*gconst36))+(((0.0135)*(gconst35*gconst35)))))))+IKsqr(((x5067.value)*(((0.55)+x5065+x5064))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5066.value)*(((0.02475)+(((-0.0135)*(gconst36*gconst36)))+(((0.087975)*gconst35*gconst36))+(((0.167025)*gconst35))+(((-0.01125)*gconst36))+(((0.0135)*(gconst35*gconst35)))))), ((x5067.value)*(((0.55)+x5065+x5064))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5068=IKcos(j1);
IkReal x5069=IKsin(j1);
IkReal x5070=((0.3)*gconst36);
IkReal x5071=((0.045)*gconst35);
IkReal x5072=((0.045)*gconst36);
IkReal x5073=((0.3)*gconst35);
IkReal x5074=(pz*x5069);
IkReal x5075=(pz*x5068);
evalcond[0]=((-0.55)+(((-1.0)*x5071))+(((-1.0)*x5070))+x5075);
evalcond[1]=((0.045)+(((-1.0)*x5072))+x5073+(((-1.0)*x5074)));
evalcond[2]=((-0.2125)+(((1.1)*x5075))+(((-1.0)*pp))+(((0.09)*x5074)));
evalcond[3]=(((x5068*x5072))+(((-0.045)*x5068))+(((0.55)*x5069))+(((-1.0)*x5068*x5073))+((x5069*x5071))+((x5069*x5070)));
evalcond[4]=((((-1.0)*x5069*x5073))+(((-0.045)*x5069))+pz+(((-0.55)*x5068))+(((-1.0)*x5068*x5071))+(((-1.0)*x5068*x5070))+((x5069*x5072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5076 = IKatan2WithCheck((gconst40*(((0.045)+(((-0.045)*gconst36))+(((0.3)*gconst35))))),(gconst40*(((0.55)+(((0.045)*gconst35))+(((0.3)*gconst36))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5076.valid){
continue;
}
j1array[0]=x5076.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5077=IKcos(j1);
IkReal x5078=IKsin(j1);
IkReal x5079=((0.3)*gconst36);
IkReal x5080=((0.045)*gconst35);
IkReal x5081=((0.045)*gconst36);
IkReal x5082=((0.3)*gconst35);
IkReal x5083=(pz*x5078);
IkReal x5084=(pz*x5077);
evalcond[0]=((-0.55)+(((-1.0)*x5079))+(((-1.0)*x5080))+x5084);
evalcond[1]=((0.045)+(((-1.0)*x5083))+(((-1.0)*x5081))+x5082);
evalcond[2]=((-0.2125)+(((0.09)*x5083))+(((-1.0)*pp))+(((1.1)*x5084)));
evalcond[3]=(((x5077*x5081))+(((-1.0)*x5077*x5082))+(((-0.045)*x5077))+((x5078*x5080))+(((0.55)*x5078))+((x5078*x5079)));
evalcond[4]=((((-1.0)*x5077*x5080))+(((-0.045)*x5078))+((x5078*x5081))+(((-1.0)*x5078*x5082))+pz+(((-1.0)*x5077*x5079))+(((-0.55)*x5077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst37;
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKabs(((20.2237484161567)*(IKsqrt(pz*pz)))),-1);
if(!x5085.valid){
continue;
}
if( (((36.6666666666667)*pz*(x5085.value))) < -1-IKFAST_SINCOS_THRESH || (((36.6666666666667)*pz*(x5085.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x5086 = IKatan2WithCheck(((6.66666666666667)*pz),pz,IKFAST_ATAN2_MAGTHRESH);
if(!x5086.valid){
continue;
}
gconst37=((3.14159265358979)+(IKasin(((36.6666666666667)*pz*(x5085.value))))+(((-1.0)*(x5086.value))));
IkReal gconst38;
gconst38=IKsin(gconst37);
IkReal gconst39;
gconst39=IKcos(gconst37);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst37))+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((12.2222222222222)*pz))+((gconst38*pz))+(((6.66666666666667)*gconst39*pz)));
dummyeval[1]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.3)*gconst39))+(((-0.045)*gconst38)));
evalcond[2]=((0.045)+(((-0.045)*gconst39))+(((0.3)*gconst38)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5088 = IKatan2WithCheck(((-0.55)+(((-0.3)*gconst39))+(((-0.045)*gconst38))),((-0.045)+(((-0.3)*gconst38))+(((0.045)*gconst39))),IKFAST_ATAN2_MAGTHRESH);
if(!x5088.valid){
continue;
}
IkReal x5087=x5088.value;
j1array[0]=((-1.0)*x5087);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5087)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5089=IKsin(j1);
IkReal x5090=IKcos(j1);
IkReal x5091=((0.045)*x5090);
evalcond[0]=(((gconst39*x5091))+(((-0.3)*gconst38*x5090))+(((0.55)*x5089))+(((-1.0)*x5091))+(((0.045)*gconst38*x5089))+(((0.3)*gconst39*x5089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5092=((0.045)*gconst38);
IkReal x5093=((0.3)*gconst39);
CheckValue<IkReal> x5094=IKPowWithIntegerCheck(((((0.55)*pz))+((pz*x5093))+((pz*x5092))),-1);
if(!x5094.valid){
continue;
}
CheckValue<IkReal> x5095=IKPowWithIntegerCheck(pz,-1);
if(!x5095.valid){
continue;
}
if( IKabs(((x5094.value)*(((0.02475)+(((0.0135)*(gconst38*gconst38)))+(((0.167025)*gconst38))+(((0.087975)*gconst38*gconst39))+(((-0.0135)*(gconst39*gconst39)))+(((-0.01125)*gconst39)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5095.value)*(((0.55)+x5092+x5093)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5094.value)*(((0.02475)+(((0.0135)*(gconst38*gconst38)))+(((0.167025)*gconst38))+(((0.087975)*gconst38*gconst39))+(((-0.0135)*(gconst39*gconst39)))+(((-0.01125)*gconst39))))))+IKsqr(((x5095.value)*(((0.55)+x5092+x5093))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5094.value)*(((0.02475)+(((0.0135)*(gconst38*gconst38)))+(((0.167025)*gconst38))+(((0.087975)*gconst38*gconst39))+(((-0.0135)*(gconst39*gconst39)))+(((-0.01125)*gconst39))))), ((x5095.value)*(((0.55)+x5092+x5093))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5096=IKcos(j1);
IkReal x5097=IKsin(j1);
IkReal x5098=((0.3)*gconst38);
IkReal x5099=((0.3)*gconst39);
IkReal x5100=((0.045)*x5096);
IkReal x5101=((0.045)*x5097);
IkReal x5102=(pz*x5097);
IkReal x5103=(pz*x5096);
evalcond[0]=((-0.55)+(((-0.045)*gconst38))+x5103+(((-1.0)*x5099)));
evalcond[1]=((0.045)+(((-0.045)*gconst39))+(((-1.0)*x5102))+x5098);
evalcond[2]=((-0.2125)+(((1.1)*x5103))+(((-1.0)*pp))+(((0.09)*x5102)));
evalcond[3]=((((-1.0)*x5100))+((gconst39*x5100))+(((0.55)*x5097))+(((-1.0)*x5096*x5098))+((gconst38*x5101))+((x5097*x5099)));
evalcond[4]=((((-1.0)*x5101))+((gconst39*x5101))+(((-1.0)*gconst38*x5100))+(((-0.55)*x5096))+(((-1.0)*x5096*x5099))+(((-1.0)*x5097*x5098))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5104 = IKatan2WithCheck((gconst41*(((0.045)+(((-0.045)*gconst39))+(((0.3)*gconst38))))),(gconst41*(((0.55)+(((0.045)*gconst38))+(((0.3)*gconst39))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5104.valid){
continue;
}
j1array[0]=x5104.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5105=IKcos(j1);
IkReal x5106=IKsin(j1);
IkReal x5107=((0.3)*gconst38);
IkReal x5108=((0.3)*gconst39);
IkReal x5109=((0.045)*x5105);
IkReal x5110=((0.045)*x5106);
IkReal x5111=(pz*x5106);
IkReal x5112=(pz*x5105);
evalcond[0]=((-0.55)+(((-1.0)*x5108))+(((-0.045)*gconst38))+x5112);
evalcond[1]=((0.045)+(((-0.045)*gconst39))+(((-1.0)*x5111))+x5107);
evalcond[2]=((-0.2125)+(((1.1)*x5112))+(((0.09)*x5111))+(((-1.0)*pp)));
evalcond[3]=(((x5106*x5108))+(((-1.0)*x5109))+((gconst39*x5109))+(((0.55)*x5106))+((gconst38*x5110))+(((-1.0)*x5105*x5107)));
evalcond[4]=((((-1.0)*x5106*x5107))+(((-1.0)*gconst38*x5109))+((gconst39*x5110))+(((-0.55)*x5105))+pz+(((-1.0)*x5105*x5108))+(((-1.0)*x5110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x5113=((2.40588235294118)*sj3);
op[0]=((1.0)+x5113);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x5113)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5114=((0.045)*sj3);
IkReal x5115=((0.3)*cj3);
CheckValue<IkReal> x5116=IKPowWithIntegerCheck(((((0.55)*pz))+((pz*x5114))+((pz*x5115))),-1);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117=IKPowWithIntegerCheck(pz,-1);
if(!x5117.valid){
continue;
}
if( IKabs(((x5116.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5117.value)*(((0.55)+x5115+x5114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5116.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))+IKsqr(((x5117.value)*(((0.55)+x5115+x5114))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5116.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))), ((x5117.value)*(((0.55)+x5115+x5114))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5118=IKcos(j1);
IkReal x5119=IKsin(j1);
IkReal x5120=((0.045)*cj3);
IkReal x5121=((0.3)*cj3);
IkReal x5122=(sj3*x5119);
IkReal x5123=(cj3*x5119);
IkReal x5124=(sj3*x5118);
IkReal x5125=(pz*x5119);
IkReal x5126=(pz*x5118);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5126+(((-1.0)*x5121)));
evalcond[1]=((0.045)+(((-1.0)*x5120))+(((-1.0)*x5125))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x5125))+(((1.1)*x5126)));
evalcond[3]=(((x5119*x5121))+(((0.55)*x5119))+(((-0.3)*x5124))+((x5118*x5120))+(((-0.045)*x5118))+(((0.045)*x5122)));
evalcond[4]=(((x5119*x5120))+(((-1.0)*x5118*x5121))+(((-0.3)*x5122))+(((-0.045)*x5124))+pz+(((-0.55)*x5118))+(((-0.045)*x5119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5128=IKPowWithIntegerCheck(pz,-1);
if(!x5128.valid){
continue;
}
IkReal x5127=x5128.value;
if( IKabs(((0.111111111111111)*x5127*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5127*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x5127*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x5127*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x5127*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x5127*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5129=IKcos(j1);
IkReal x5130=IKsin(j1);
IkReal x5131=((0.045)*cj3);
IkReal x5132=((0.3)*cj3);
IkReal x5133=(sj3*x5130);
IkReal x5134=(cj3*x5130);
IkReal x5135=(sj3*x5129);
IkReal x5136=(pz*x5130);
IkReal x5137=(pz*x5129);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5137+(((-1.0)*x5132)));
evalcond[1]=((0.045)+(((-1.0)*x5131))+(((0.3)*sj3))+(((-1.0)*x5136)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x5136))+(((1.1)*x5137)));
evalcond[3]=((((0.045)*x5133))+(((-0.3)*x5135))+((x5129*x5131))+(((0.55)*x5130))+(((-0.045)*x5129))+((x5130*x5132)));
evalcond[4]=((((-0.3)*x5133))+(((-1.0)*x5129*x5132))+(((-0.045)*x5130))+(((-0.045)*x5135))+pz+((x5130*x5131))+(((-0.55)*x5129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5138 = IKatan2WithCheck((gconst33*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst33*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5138.valid){
continue;
}
j1array[0]=x5138.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5139=IKcos(j1);
IkReal x5140=IKsin(j1);
IkReal x5141=((0.045)*cj3);
IkReal x5142=((0.3)*cj3);
IkReal x5143=(sj3*x5140);
IkReal x5144=(cj3*x5140);
IkReal x5145=(sj3*x5139);
IkReal x5146=(pz*x5140);
IkReal x5147=(pz*x5139);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5147+(((-1.0)*x5142)));
evalcond[1]=((0.045)+(((-1.0)*x5141))+(((-1.0)*x5146))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5147))+(((-1.0)*pp))+(((0.09)*x5146)));
evalcond[3]=((((0.045)*x5143))+(((0.55)*x5140))+(((-0.045)*x5139))+(((-0.3)*x5145))+((x5140*x5142))+((x5139*x5141)));
evalcond[4]=((((-0.045)*x5140))+(((-0.045)*x5145))+pz+(((-0.3)*x5143))+(((-1.0)*x5139*x5142))+(((-0.55)*x5139))+((x5140*x5141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5148=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x5148;
evalcond[3]=x5148;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst42;
gconst42=IKsign((((cj0*px))+((py*sj0))));
IkReal x5149=(((cj0*px))+((py*sj0)));
IkReal x5150=IKsign(x5149);
IkReal x5151=((0.3)*x5150);
IkReal x5152=((0.045)*x5150);
dummyeval[0]=x5149;
dummyeval[1]=((IKabs(((((-1.0)*cj3*x5152))+x5152+((sj3*x5151)))))+(IKabs(((((0.55)*x5150))+((cj3*x5151))+((sj3*x5152))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5153=(cj0*px);
IkReal x5154=(py*sj0);
IkReal x5155=((36.2220411120167)*pp);
dummyeval[0]=(x5153+x5154);
dummyeval[1]=((((-1.0)*x5154*x5155))+(((-7.28153581454315)*x5153))+(((-7.28153581454315)*x5154))+(((-1.0)*x5153*x5155))+((sj3*x5153))+((sj3*x5154)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5156=(cj0*px);
IkReal x5157=((1.3840830449827)*pp);
IkReal x5158=((3.11349480968858)*sj3);
IkReal x5159=(py*sj0);
IkReal x5160=((1.0)*x5156);
IkReal x5161=((1.0)*x5159);
IkReal x5162=(x5160+x5161);
dummyeval[0]=(((x5157*x5159))+(((-1.0)*x5162))+(((-1.0)*x5156*x5158))+(((-1.0)*x5158*x5159))+((x5156*x5157)));
dummyeval[1]=((-1.0)*x5162);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst43;
CheckValue<IkReal> x5163 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x5163.valid){
continue;
}
gconst43=((-1.0)*(x5163.value));
IkReal gconst44;
gconst44=IKsin(gconst43);
IkReal gconst45;
gconst45=IKcos(gconst43);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst43))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign((((gconst45*px))+((gconst44*py))));
dummyeval[0]=(((gconst45*px))+((gconst44*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5164=(gconst44*py);
IkReal x5165=((36.2220411120167)*pp);
IkReal x5166=(gconst45*px);
dummyeval[0]=(x5164+x5166);
dummyeval[1]=((((-7.28153581454315)*x5164))+(((-7.28153581454315)*x5166))+((sj3*x5164))+((sj3*x5166))+(((-1.0)*x5165*x5166))+(((-1.0)*x5164*x5165)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5167=(gconst44*py);
IkReal x5168=((3.11349480968858)*sj3);
IkReal x5169=(gconst45*px);
IkReal x5170=((1.3840830449827)*pp);
IkReal x5171=((1.0)*x5169);
IkReal x5172=((1.0)*x5167);
IkReal x5173=(x5172+x5171);
dummyeval[0]=(((x5167*x5170))+(((-1.0)*x5168*x5169))+(((-1.0)*x5173))+(((-1.0)*x5167*x5168))+((x5169*x5170)));
dummyeval[1]=((-1.0)*x5173);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5175 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5175.valid){
continue;
}
IkReal x5174=x5175.value;
j1array[0]=((-1.0)*x5174);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5174)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5176=IKcos(j1);
evalcond[0]=((((0.1275)*x5176))+(((0.30675)*sj3*x5176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5177=(gconst45*px);
IkReal x5178=((0.138057984353428)*pp);
IkReal x5179=(gconst44*py);
IkReal x5180=((0.0414173953060285)*pp);
IkReal x5181=((0.310561435803037)*sj3);
CheckValue<IkReal> x5182=IKPowWithIntegerCheck((((x5178*x5179))+(((-1.0)*x5177*x5181))+(((-0.099746893695352)*x5177))+(((-0.099746893695352)*x5179))+(((-1.0)*x5179*x5181))+((x5177*x5178))),-1);
if(!x5182.valid){
continue;
}
CheckValue<IkReal> x5183=IKPowWithIntegerCheck(((((-1.0)*x5177))+(((-1.0)*x5179))),-1);
if(!x5183.valid){
continue;
}
if( IKabs(((x5182.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5180))+(((-1.0)*x5180))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5183.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5182.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5180))+(((-1.0)*x5180))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5183.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5182.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5180))+(((-1.0)*x5180))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5183.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5184=IKsin(j1);
IkReal x5185=IKcos(j1);
IkReal x5186=((0.3)*cj3);
IkReal x5187=((0.045)*cj3);
IkReal x5188=(gconst45*px);
IkReal x5189=(gconst44*py);
IkReal x5190=(sj3*x5184);
IkReal x5191=(sj3*x5185);
IkReal x5192=((1.1)*x5184);
IkReal x5193=(x5185*x5189);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x5184*x5189))+((x5184*x5188))+(((-1.0)*x5186)));
evalcond[1]=((0.045)+(((-1.0)*x5185*x5188))+(((-1.0)*x5193))+(((0.3)*sj3))+(((-1.0)*x5187)));
evalcond[2]=((-0.2125)+((x5188*x5192))+(((0.09)*x5185*x5188))+(((-1.0)*pp))+(((0.09)*x5193))+((x5189*x5192)));
evalcond[3]=((((-0.138057984353428)*pp*x5184))+(((0.099746893695352)*x5184))+(((0.310561435803037)*x5190))+(((-0.92038656235619)*pp*x5185))+(((0.0254095720202485)*x5191))+(((-0.185020708697653)*x5185)));
evalcond[4]=((((0.3)*x5191))+(((0.045)*x5185))+((x5184*x5186))+(((-1.0)*x5185*x5187))+(((0.55)*x5184))+(((-1.0)*x5188))+(((-1.0)*x5189))+(((0.045)*x5190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5194=(gconst44*py);
IkReal x5195=((0.0254095720202485)*sj3);
IkReal x5196=((0.92038656235619)*pp);
IkReal x5197=(gconst45*px);
CheckValue<IkReal> x5198=IKPowWithIntegerCheck((x5194+x5197),-1);
if(!x5198.valid){
continue;
}
CheckValue<IkReal> x5199=IKPowWithIntegerCheck((((x5195*x5197))+((x5194*x5195))+(((-0.185020708697653)*x5194))+(((-0.185020708697653)*x5197))+(((-1.0)*x5196*x5197))+(((-1.0)*x5194*x5196))),-1);
if(!x5199.valid){
continue;
}
if( IKabs(((x5198.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5199.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5198.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5199.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5198.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5199.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5200=IKsin(j1);
IkReal x5201=IKcos(j1);
IkReal x5202=((0.3)*cj3);
IkReal x5203=((0.045)*cj3);
IkReal x5204=(gconst45*px);
IkReal x5205=(gconst44*py);
IkReal x5206=(sj3*x5200);
IkReal x5207=(sj3*x5201);
IkReal x5208=((1.1)*x5200);
IkReal x5209=(x5201*x5205);
evalcond[0]=((-0.55)+(((-1.0)*x5202))+(((-0.045)*sj3))+((x5200*x5205))+((x5200*x5204)));
evalcond[1]=((0.045)+(((-1.0)*x5203))+(((0.3)*sj3))+(((-1.0)*x5209))+(((-1.0)*x5201*x5204)));
evalcond[2]=((-0.2125)+((x5205*x5208))+(((0.09)*x5209))+((x5204*x5208))+(((-1.0)*pp))+(((0.09)*x5201*x5204)));
evalcond[3]=((((-0.138057984353428)*pp*x5200))+(((-0.92038656235619)*pp*x5201))+(((0.0254095720202485)*x5207))+(((-0.185020708697653)*x5201))+(((0.310561435803037)*x5206))+(((0.099746893695352)*x5200)));
evalcond[4]=((((0.55)*x5200))+((x5200*x5202))+(((-1.0)*x5201*x5203))+(((0.3)*x5207))+(((0.045)*x5201))+(((0.045)*x5206))+(((-1.0)*x5205))+(((-1.0)*x5204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5210 = IKatan2WithCheck((gconst61*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst61*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5210.valid){
continue;
}
j1array[0]=x5210.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5211=IKsin(j1);
IkReal x5212=IKcos(j1);
IkReal x5213=((0.3)*cj3);
IkReal x5214=((0.045)*cj3);
IkReal x5215=(gconst45*px);
IkReal x5216=(gconst44*py);
IkReal x5217=(sj3*x5211);
IkReal x5218=(sj3*x5212);
IkReal x5219=((1.1)*x5211);
IkReal x5220=(x5212*x5216);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5213))+((x5211*x5215))+((x5211*x5216)));
evalcond[1]=((0.045)+(((-1.0)*x5214))+(((-1.0)*x5212*x5215))+(((0.3)*sj3))+(((-1.0)*x5220)));
evalcond[2]=((-0.2125)+((x5216*x5219))+(((0.09)*x5212*x5215))+(((-1.0)*pp))+((x5215*x5219))+(((0.09)*x5220)));
evalcond[3]=((((-0.138057984353428)*pp*x5211))+(((0.0254095720202485)*x5218))+(((0.310561435803037)*x5217))+(((-0.92038656235619)*pp*x5212))+(((-0.185020708697653)*x5212))+(((0.099746893695352)*x5211)));
evalcond[4]=((((0.55)*x5211))+(((-1.0)*x5212*x5214))+((x5211*x5213))+(((0.045)*x5217))+(((0.045)*x5212))+(((0.3)*x5218))+(((-1.0)*x5215))+(((-1.0)*x5216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst46;
CheckValue<IkReal> x5221 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x5221.valid){
continue;
}
gconst46=((3.14159265358979)+(((-1.0)*(x5221.value))));
IkReal gconst47;
gconst47=IKsin(gconst46);
IkReal gconst48;
gconst48=IKcos(gconst46);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst46))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign((((gconst47*py))+((gconst48*px))));
dummyeval[0]=(((gconst47*py))+((gconst48*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5222=(gconst47*py);
IkReal x5223=(gconst48*px);
IkReal x5224=((36.2220411120167)*pp);
dummyeval[0]=(x5223+x5222);
dummyeval[1]=((((-1.0)*x5223*x5224))+(((-1.0)*x5222*x5224))+((sj3*x5223))+((sj3*x5222))+(((-7.28153581454315)*x5223))+(((-7.28153581454315)*x5222)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5225=((1.3840830449827)*pp);
IkReal x5226=(gconst48*px);
IkReal x5227=(gconst47*py);
IkReal x5228=((3.11349480968858)*sj3);
IkReal x5229=((1.0)*x5226);
IkReal x5230=((1.0)*x5227);
IkReal x5231=(x5229+x5230);
dummyeval[0]=(((x5225*x5226))+((x5225*x5227))+(((-1.0)*x5231))+(((-1.0)*x5227*x5228))+(((-1.0)*x5226*x5228)));
dummyeval[1]=((-1.0)*x5231);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5233 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5233.valid){
continue;
}
IkReal x5232=x5233.value;
j1array[0]=((-1.0)*x5232);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5232)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5234=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x5234))+(((0.1275)*x5234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5235=(gconst47*py);
IkReal x5236=(gconst48*px);
IkReal x5237=((0.310561435803037)*sj3);
IkReal x5238=((0.138057984353428)*pp);
IkReal x5239=((0.0414173953060285)*pp);
CheckValue<IkReal> x5240=IKPowWithIntegerCheck(((((-1.0)*x5236*x5237))+(((-1.0)*x5235*x5237))+((x5236*x5238))+((x5235*x5238))+(((-0.099746893695352)*x5236))+(((-0.099746893695352)*x5235))),-1);
if(!x5240.valid){
continue;
}
CheckValue<IkReal> x5241=IKPowWithIntegerCheck(((((-1.0)*x5235))+(((-1.0)*x5236))),-1);
if(!x5241.valid){
continue;
}
if( IKabs(((x5240.value)*(((-0.00832593189139439)+(((-1.0)*x5239))+((cj3*x5239))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5241.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5240.value)*(((-0.00832593189139439)+(((-1.0)*x5239))+((cj3*x5239))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5241.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5240.value)*(((-0.00832593189139439)+(((-1.0)*x5239))+((cj3*x5239))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5241.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5242=IKsin(j1);
IkReal x5243=IKcos(j1);
IkReal x5244=((0.3)*cj3);
IkReal x5245=((0.045)*cj3);
IkReal x5246=(gconst48*px);
IkReal x5247=(gconst47*py);
IkReal x5248=(sj3*x5242);
IkReal x5249=(sj3*x5243);
IkReal x5250=((1.1)*x5242);
IkReal x5251=((0.09)*x5243);
IkReal x5252=((1.0)*x5243);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5244))+((x5242*x5246))+((x5242*x5247)));
evalcond[1]=((0.045)+(((-1.0)*x5245))+(((-1.0)*x5246*x5252))+(((0.3)*sj3))+(((-1.0)*x5247*x5252)));
evalcond[2]=((-0.2125)+((x5246*x5250))+((x5246*x5251))+((x5247*x5250))+((x5247*x5251))+(((-1.0)*pp)));
evalcond[3]=((((0.0254095720202485)*x5249))+(((0.099746893695352)*x5242))+(((-0.92038656235619)*pp*x5243))+(((-0.185020708697653)*x5243))+(((0.310561435803037)*x5248))+(((-0.138057984353428)*pp*x5242)));
evalcond[4]=((((-1.0)*x5243*x5245))+(((-1.0)*x5246))+(((-1.0)*x5247))+(((0.55)*x5242))+((x5242*x5244))+(((0.045)*x5248))+(((0.045)*x5243))+(((0.3)*x5249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5253=(gconst47*py);
IkReal x5254=((0.0254095720202485)*sj3);
IkReal x5255=(gconst48*px);
IkReal x5256=((0.92038656235619)*pp);
CheckValue<IkReal> x5257=IKPowWithIntegerCheck((x5253+x5255),-1);
if(!x5257.valid){
continue;
}
CheckValue<IkReal> x5258=IKPowWithIntegerCheck((((x5253*x5254))+((x5254*x5255))+(((-1.0)*x5255*x5256))+(((-0.185020708697653)*x5253))+(((-0.185020708697653)*x5255))+(((-1.0)*x5253*x5256))),-1);
if(!x5258.valid){
continue;
}
if( IKabs(((x5257.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5258.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5257.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5258.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5257.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5258.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5259=IKsin(j1);
IkReal x5260=IKcos(j1);
IkReal x5261=((0.3)*cj3);
IkReal x5262=((0.045)*cj3);
IkReal x5263=(gconst48*px);
IkReal x5264=(gconst47*py);
IkReal x5265=(sj3*x5259);
IkReal x5266=(sj3*x5260);
IkReal x5267=((1.1)*x5259);
IkReal x5268=((0.09)*x5260);
IkReal x5269=((1.0)*x5260);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5261))+((x5259*x5264))+((x5259*x5263)));
evalcond[1]=((0.045)+(((-1.0)*x5264*x5269))+(((-1.0)*x5263*x5269))+(((-1.0)*x5262))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x5264*x5267))+((x5264*x5268))+((x5263*x5267))+((x5263*x5268)));
evalcond[3]=((((0.0254095720202485)*x5266))+(((0.099746893695352)*x5259))+(((-0.138057984353428)*pp*x5259))+(((-0.92038656235619)*pp*x5260))+(((-0.185020708697653)*x5260))+(((0.310561435803037)*x5265)));
evalcond[4]=((((0.3)*x5266))+(((-1.0)*x5264))+(((-1.0)*x5263))+(((0.55)*x5259))+(((0.045)*x5265))+(((0.045)*x5260))+(((-1.0)*x5260*x5262))+((x5259*x5261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5270 = IKatan2WithCheck((gconst62*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst62*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5270.valid){
continue;
}
j1array[0]=x5270.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5271=IKsin(j1);
IkReal x5272=IKcos(j1);
IkReal x5273=((0.3)*cj3);
IkReal x5274=((0.045)*cj3);
IkReal x5275=(gconst48*px);
IkReal x5276=(gconst47*py);
IkReal x5277=(sj3*x5271);
IkReal x5278=(sj3*x5272);
IkReal x5279=((1.1)*x5271);
IkReal x5280=((0.09)*x5272);
IkReal x5281=((1.0)*x5272);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5273))+((x5271*x5275))+((x5271*x5276)));
evalcond[1]=((0.045)+(((-1.0)*x5274))+(((-1.0)*x5275*x5281))+(((-1.0)*x5276*x5281))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x5275*x5280))+((x5276*x5280))+((x5276*x5279))+((x5275*x5279))+(((-1.0)*pp)));
evalcond[3]=((((-0.185020708697653)*x5272))+(((-0.92038656235619)*pp*x5272))+(((0.099746893695352)*x5271))+(((-0.138057984353428)*pp*x5271))+(((0.310561435803037)*x5277))+(((0.0254095720202485)*x5278)));
evalcond[4]=((((-1.0)*x5272*x5274))+(((0.3)*x5278))+(((0.045)*x5277))+(((0.045)*x5272))+((x5271*x5273))+(((-1.0)*x5275))+(((-1.0)*x5276))+(((0.55)*x5271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst49;
CheckValue<IkReal> x5282 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5282.valid){
continue;
}
gconst49=((-1.0)*(x5282.value));
IkReal gconst50;
gconst50=IKsin(gconst49);
IkReal gconst51;
gconst51=IKcos(gconst49);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst49))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign((((gconst50*py))+((gconst51*px))));
dummyeval[0]=(((gconst50*py))+((gconst51*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5283=(gconst51*px);
IkReal x5284=((36.2220411120167)*pp);
IkReal x5285=(gconst50*py);
dummyeval[0]=(x5283+x5285);
dummyeval[1]=((((-1.0)*x5284*x5285))+(((-7.28153581454315)*x5283))+(((-7.28153581454315)*x5285))+((sj3*x5283))+((sj3*x5285))+(((-1.0)*x5283*x5284)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5286=(gconst51*px);
IkReal x5287=((1.3840830449827)*pp);
IkReal x5288=((3.11349480968858)*sj3);
IkReal x5289=(gconst50*py);
IkReal x5290=((1.0)*x5289);
IkReal x5291=((1.0)*x5286);
IkReal x5292=(x5290+x5291);
dummyeval[0]=(((x5286*x5287))+(((-1.0)*x5288*x5289))+(((-1.0)*x5286*x5288))+(((-1.0)*x5292))+((x5287*x5289)));
dummyeval[1]=((-1.0)*x5292);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5294 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5294.valid){
continue;
}
IkReal x5293=x5294.value;
j1array[0]=((-1.0)*x5293);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5293)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5295=IKcos(j1);
evalcond[0]=((((0.1275)*x5295))+(((0.30675)*sj3*x5295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5296=((0.310561435803037)*sj3);
IkReal x5297=(gconst50*py);
IkReal x5298=(gconst51*px);
IkReal x5299=((0.138057984353428)*pp);
IkReal x5300=((0.0414173953060285)*pp);
CheckValue<IkReal> x5301=IKPowWithIntegerCheck(((((-1.0)*x5296*x5298))+(((-1.0)*x5296*x5297))+((x5297*x5299))+(((-0.099746893695352)*x5297))+(((-0.099746893695352)*x5298))+((x5298*x5299))),-1);
if(!x5301.valid){
continue;
}
CheckValue<IkReal> x5302=IKPowWithIntegerCheck(((((-1.0)*x5298))+(((-1.0)*x5297))),-1);
if(!x5302.valid){
continue;
}
if( IKabs(((x5301.value)*(((-0.00832593189139439)+(((-1.0)*x5300))+(((0.00762287160607455)*(sj3*sj3)))+((cj3*x5300))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5302.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5301.value)*(((-0.00832593189139439)+(((-1.0)*x5300))+(((0.00762287160607455)*(sj3*sj3)))+((cj3*x5300))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5302.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5301.value)*(((-0.00832593189139439)+(((-1.0)*x5300))+(((0.00762287160607455)*(sj3*sj3)))+((cj3*x5300))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5302.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5303=IKsin(j1);
IkReal x5304=IKcos(j1);
IkReal x5305=((0.045)*sj3);
IkReal x5306=((0.3)*cj3);
IkReal x5307=((0.045)*cj3);
IkReal x5308=(gconst51*px);
IkReal x5309=(gconst50*py);
IkReal x5310=(sj3*x5304);
IkReal x5311=((1.1)*x5303);
IkReal x5312=(x5304*x5309);
evalcond[0]=((-0.55)+(((-1.0)*x5306))+(((-1.0)*x5305))+((x5303*x5309))+((x5303*x5308)));
evalcond[1]=((0.045)+(((-1.0)*x5304*x5308))+(((-1.0)*x5307))+(((-1.0)*x5312))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x5304*x5308))+((x5308*x5311))+(((-1.0)*pp))+((x5309*x5311))+(((0.09)*x5312)));
evalcond[3]=((((0.099746893695352)*x5303))+(((-0.185020708697653)*x5304))+(((-0.92038656235619)*pp*x5304))+(((0.0254095720202485)*x5310))+(((0.310561435803037)*sj3*x5303))+(((-0.138057984353428)*pp*x5303)));
evalcond[4]=((((0.3)*x5310))+(((0.045)*x5304))+(((0.55)*x5303))+(((-1.0)*x5309))+(((-1.0)*x5308))+((x5303*x5305))+((x5303*x5306))+(((-1.0)*x5304*x5307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5313=(gconst50*py);
IkReal x5314=((0.0254095720202485)*sj3);
IkReal x5315=(gconst51*px);
IkReal x5316=((0.92038656235619)*pp);
CheckValue<IkReal> x5317=IKPowWithIntegerCheck((x5313+x5315),-1);
if(!x5317.valid){
continue;
}
CheckValue<IkReal> x5318=IKPowWithIntegerCheck(((((-0.185020708697653)*x5315))+(((-0.185020708697653)*x5313))+((x5313*x5314))+(((-1.0)*x5313*x5316))+(((-1.0)*x5315*x5316))+((x5314*x5315))),-1);
if(!x5318.valid){
continue;
}
if( IKabs(((x5317.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5318.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5317.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5318.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5317.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5318.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5319=IKsin(j1);
IkReal x5320=IKcos(j1);
IkReal x5321=((0.045)*sj3);
IkReal x5322=((0.3)*cj3);
IkReal x5323=((0.045)*cj3);
IkReal x5324=(gconst51*px);
IkReal x5325=(gconst50*py);
IkReal x5326=(sj3*x5320);
IkReal x5327=((1.1)*x5319);
IkReal x5328=(x5320*x5325);
evalcond[0]=((-0.55)+(((-1.0)*x5322))+(((-1.0)*x5321))+((x5319*x5324))+((x5319*x5325)));
evalcond[1]=((0.045)+(((-1.0)*x5328))+(((-1.0)*x5320*x5324))+(((-1.0)*x5323))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x5325*x5327))+(((0.09)*x5320*x5324))+((x5324*x5327))+(((0.09)*x5328))+(((-1.0)*pp)));
evalcond[3]=((((0.0254095720202485)*x5326))+(((0.099746893695352)*x5319))+(((-0.185020708697653)*x5320))+(((-0.138057984353428)*pp*x5319))+(((0.310561435803037)*sj3*x5319))+(((-0.92038656235619)*pp*x5320)));
evalcond[4]=((((-1.0)*x5325))+(((-1.0)*x5324))+(((0.55)*x5319))+(((0.3)*x5326))+(((0.045)*x5320))+((x5319*x5321))+((x5319*x5322))+(((-1.0)*x5320*x5323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5329 = IKatan2WithCheck((gconst63*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst63*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5329.valid){
continue;
}
j1array[0]=x5329.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5330=IKsin(j1);
IkReal x5331=IKcos(j1);
IkReal x5332=((0.045)*sj3);
IkReal x5333=((0.3)*cj3);
IkReal x5334=((0.045)*cj3);
IkReal x5335=(gconst51*px);
IkReal x5336=(gconst50*py);
IkReal x5337=(sj3*x5331);
IkReal x5338=((1.1)*x5330);
IkReal x5339=(x5331*x5336);
evalcond[0]=((-0.55)+(((-1.0)*x5333))+(((-1.0)*x5332))+((x5330*x5335))+((x5330*x5336)));
evalcond[1]=((0.045)+(((-1.0)*x5339))+(((-1.0)*x5331*x5335))+(((-1.0)*x5334))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x5336*x5338))+(((0.09)*x5339))+(((0.09)*x5331*x5335))+(((-1.0)*pp))+((x5335*x5338)));
evalcond[3]=((((0.0254095720202485)*x5337))+(((-0.138057984353428)*pp*x5330))+(((0.310561435803037)*sj3*x5330))+(((-0.185020708697653)*x5331))+(((-0.92038656235619)*pp*x5331))+(((0.099746893695352)*x5330)));
evalcond[4]=((((-1.0)*x5336))+(((-1.0)*x5335))+(((-1.0)*x5331*x5334))+(((0.3)*x5337))+(((0.045)*x5331))+(((0.55)*x5330))+((x5330*x5332))+((x5330*x5333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst52;
CheckValue<IkReal> x5340 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5340.valid){
continue;
}
gconst52=((3.14159265358979)+(((-1.0)*(x5340.value))));
IkReal gconst53;
gconst53=IKsin(gconst52);
IkReal gconst54;
gconst54=IKcos(gconst52);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst52))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign((((gconst54*px))+((gconst53*py))));
dummyeval[0]=(((gconst54*px))+((gconst53*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5341=(gconst54*px);
IkReal x5342=(gconst53*py);
IkReal x5343=((36.2220411120167)*pp);
dummyeval[0]=(x5341+x5342);
dummyeval[1]=(((sj3*x5342))+((sj3*x5341))+(((-1.0)*x5341*x5343))+(((-7.28153581454315)*x5342))+(((-7.28153581454315)*x5341))+(((-1.0)*x5342*x5343)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5344=(gconst54*px);
IkReal x5345=((1.3840830449827)*pp);
IkReal x5346=((3.11349480968858)*sj3);
IkReal x5347=(gconst53*py);
IkReal x5348=((1.0)*x5347);
IkReal x5349=((1.0)*x5344);
IkReal x5350=(x5348+x5349);
dummyeval[0]=((((-1.0)*x5344*x5346))+(((-1.0)*x5346*x5347))+(((-1.0)*x5350))+((x5345*x5347))+((x5344*x5345)));
dummyeval[1]=((-1.0)*x5350);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5352 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5352.valid){
continue;
}
IkReal x5351=x5352.value;
j1array[0]=((-1.0)*x5351);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5351)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5353=IKcos(j1);
evalcond[0]=((((0.1275)*x5353))+(((0.30675)*sj3*x5353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5354=((0.138057984353428)*pp);
IkReal x5355=(gconst53*py);
IkReal x5356=(gconst54*px);
IkReal x5357=((0.0414173953060285)*pp);
IkReal x5358=((0.310561435803037)*sj3);
CheckValue<IkReal> x5359=IKPowWithIntegerCheck(((((-1.0)*x5355*x5358))+(((-1.0)*x5356*x5358))+((x5354*x5356))+((x5354*x5355))+(((-0.099746893695352)*x5355))+(((-0.099746893695352)*x5356))),-1);
if(!x5359.valid){
continue;
}
CheckValue<IkReal> x5360=IKPowWithIntegerCheck(((((-1.0)*x5356))+(((-1.0)*x5355))),-1);
if(!x5360.valid){
continue;
}
if( IKabs(((x5359.value)*(((-0.00832593189139439)+((cj3*x5357))+(((-1.0)*x5357))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5360.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5359.value)*(((-0.00832593189139439)+((cj3*x5357))+(((-1.0)*x5357))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5360.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5359.value)*(((-0.00832593189139439)+((cj3*x5357))+(((-1.0)*x5357))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5360.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5361=IKsin(j1);
IkReal x5362=IKcos(j1);
IkReal x5363=((0.3)*cj3);
IkReal x5364=((0.045)*cj3);
IkReal x5365=(gconst54*px);
IkReal x5366=(gconst53*py);
IkReal x5367=(sj3*x5361);
IkReal x5368=(sj3*x5362);
IkReal x5369=((1.1)*x5361);
IkReal x5370=(x5362*x5366);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5363))+((x5361*x5365))+((x5361*x5366)));
evalcond[1]=((0.045)+(((-1.0)*x5370))+(((0.3)*sj3))+(((-1.0)*x5364))+(((-1.0)*x5362*x5365)));
evalcond[2]=((-0.2125)+((x5365*x5369))+(((0.09)*x5362*x5365))+(((-1.0)*pp))+(((0.09)*x5370))+((x5366*x5369)));
evalcond[3]=((((-0.92038656235619)*pp*x5362))+(((0.099746893695352)*x5361))+(((-0.185020708697653)*x5362))+(((0.0254095720202485)*x5368))+(((0.310561435803037)*x5367))+(((-0.138057984353428)*pp*x5361)));
evalcond[4]=((((0.55)*x5361))+(((-1.0)*x5366))+(((-1.0)*x5365))+(((0.045)*x5362))+(((0.045)*x5367))+(((-1.0)*x5362*x5364))+(((0.3)*x5368))+((x5361*x5363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5371=((0.92038656235619)*pp);
IkReal x5372=(gconst54*px);
IkReal x5373=(gconst53*py);
IkReal x5374=((0.0254095720202485)*sj3);
CheckValue<IkReal> x5375=IKPowWithIntegerCheck((x5373+x5372),-1);
if(!x5375.valid){
continue;
}
CheckValue<IkReal> x5376=IKPowWithIntegerCheck(((((-0.185020708697653)*x5373))+(((-0.185020708697653)*x5372))+((x5372*x5374))+(((-1.0)*x5371*x5373))+(((-1.0)*x5371*x5372))+((x5373*x5374))),-1);
if(!x5376.valid){
continue;
}
if( IKabs(((x5375.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5376.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5375.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5376.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5375.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5376.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5377=IKsin(j1);
IkReal x5378=IKcos(j1);
IkReal x5379=((0.3)*cj3);
IkReal x5380=((0.045)*cj3);
IkReal x5381=(gconst54*px);
IkReal x5382=(gconst53*py);
IkReal x5383=(sj3*x5377);
IkReal x5384=(sj3*x5378);
IkReal x5385=((1.1)*x5377);
IkReal x5386=(x5378*x5382);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x5377*x5382))+((x5377*x5381))+(((-1.0)*x5379)));
evalcond[1]=((0.045)+(((-1.0)*x5378*x5381))+(((0.3)*sj3))+(((-1.0)*x5380))+(((-1.0)*x5386)));
evalcond[2]=((-0.2125)+(((0.09)*x5378*x5381))+((x5381*x5385))+((x5382*x5385))+(((-1.0)*pp))+(((0.09)*x5386)));
evalcond[3]=((((0.099746893695352)*x5377))+(((-0.185020708697653)*x5378))+(((0.310561435803037)*x5383))+(((0.0254095720202485)*x5384))+(((-0.92038656235619)*pp*x5378))+(((-0.138057984353428)*pp*x5377)));
evalcond[4]=((((0.55)*x5377))+(((0.045)*x5378))+(((0.045)*x5383))+(((0.3)*x5384))+(((-1.0)*x5381))+(((-1.0)*x5382))+((x5377*x5379))+(((-1.0)*x5378*x5380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5387 = IKatan2WithCheck((gconst64*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst64*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5387.valid){
continue;
}
j1array[0]=x5387.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5388=IKsin(j1);
IkReal x5389=IKcos(j1);
IkReal x5390=((0.3)*cj3);
IkReal x5391=((0.045)*cj3);
IkReal x5392=(gconst54*px);
IkReal x5393=(gconst53*py);
IkReal x5394=(sj3*x5388);
IkReal x5395=(sj3*x5389);
IkReal x5396=((1.1)*x5388);
IkReal x5397=(x5389*x5393);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x5388*x5393))+((x5388*x5392))+(((-1.0)*x5390)));
evalcond[1]=((0.045)+(((-1.0)*x5389*x5392))+(((-1.0)*x5391))+(((0.3)*sj3))+(((-1.0)*x5397)));
evalcond[2]=((-0.2125)+((x5392*x5396))+((x5393*x5396))+(((0.09)*x5389*x5392))+(((-1.0)*pp))+(((0.09)*x5397)));
evalcond[3]=((((0.310561435803037)*x5394))+(((0.0254095720202485)*x5395))+(((-0.92038656235619)*pp*x5389))+(((-0.138057984353428)*pp*x5388))+(((-0.185020708697653)*x5389))+(((0.099746893695352)*x5388)));
evalcond[4]=(((x5388*x5390))+(((0.045)*x5389))+(((0.045)*x5394))+(((-1.0)*x5389*x5391))+(((0.3)*x5395))+(((0.55)*x5388))+(((-1.0)*x5393))+(((-1.0)*x5392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst55;
CheckValue<IkReal> x5398 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5398.valid){
continue;
}
gconst55=((-1.0)*(x5398.value));
IkReal gconst56;
gconst56=IKsin(gconst55);
IkReal gconst57;
gconst57=IKcos(gconst55);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst55))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign((((gconst57*px))+((gconst56*py))));
dummyeval[0]=(((gconst57*px))+((gconst56*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5399=(gconst57*px);
IkReal x5400=(gconst56*py);
IkReal x5401=((36.2220411120167)*pp);
dummyeval[0]=(x5400+x5399);
dummyeval[1]=((((-1.0)*x5400*x5401))+(((-7.28153581454315)*x5400))+(((-1.0)*x5399*x5401))+(((-7.28153581454315)*x5399))+((sj3*x5399))+((sj3*x5400)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5402=(gconst57*px);
IkReal x5403=((1.3840830449827)*pp);
IkReal x5404=((3.11349480968858)*sj3);
IkReal x5405=(gconst56*py);
IkReal x5406=((1.0)*x5405);
IkReal x5407=((1.0)*x5402);
IkReal x5408=(x5407+x5406);
dummyeval[0]=((((-1.0)*x5404*x5405))+((x5402*x5403))+(((-1.0)*x5402*x5404))+(((-1.0)*x5408))+((x5403*x5405)));
dummyeval[1]=((-1.0)*x5408);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5410 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5410.valid){
continue;
}
IkReal x5409=x5410.value;
j1array[0]=((-1.0)*x5409);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5409)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5411=IKcos(j1);
evalcond[0]=((((0.1275)*x5411))+(((0.30675)*sj3*x5411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5412=(gconst56*py);
IkReal x5413=((0.138057984353428)*pp);
IkReal x5414=((0.310561435803037)*sj3);
IkReal x5415=(gconst57*px);
IkReal x5416=((0.0414173953060285)*pp);
CheckValue<IkReal> x5417=IKPowWithIntegerCheck(((((-1.0)*x5412*x5414))+(((-1.0)*x5414*x5415))+((x5412*x5413))+((x5413*x5415))+(((-0.099746893695352)*x5415))+(((-0.099746893695352)*x5412))),-1);
if(!x5417.valid){
continue;
}
CheckValue<IkReal> x5418=IKPowWithIntegerCheck(((((-1.0)*x5412))+(((-1.0)*x5415))),-1);
if(!x5418.valid){
continue;
}
if( IKabs(((x5417.value)*(((-0.00832593189139439)+((cj3*x5416))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x5416))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5418.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5417.value)*(((-0.00832593189139439)+((cj3*x5416))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x5416))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5418.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5417.value)*(((-0.00832593189139439)+((cj3*x5416))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x5416))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5418.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5419=IKsin(j1);
IkReal x5420=IKcos(j1);
IkReal x5421=((0.3)*cj3);
IkReal x5422=(gconst57*px);
IkReal x5423=((0.045)*cj3);
IkReal x5424=((0.3)*sj3);
IkReal x5425=(gconst56*py);
IkReal x5426=(sj3*x5419);
IkReal x5427=((0.09)*x5420);
IkReal x5428=((1.1)*x5419);
IkReal x5429=((1.0)*x5420);
evalcond[0]=((-0.55)+(((-1.0)*x5421))+(((-0.045)*sj3))+((x5419*x5422))+((x5419*x5425)));
evalcond[1]=((0.045)+(((-1.0)*x5423))+(((-1.0)*x5422*x5429))+x5424+(((-1.0)*x5425*x5429)));
evalcond[2]=((-0.2125)+((x5422*x5427))+((x5422*x5428))+(((-1.0)*pp))+((x5425*x5428))+((x5425*x5427)));
evalcond[3]=((((-0.185020708697653)*x5420))+(((0.099746893695352)*x5419))+(((-0.138057984353428)*pp*x5419))+(((0.310561435803037)*x5426))+(((0.0254095720202485)*sj3*x5420))+(((-0.92038656235619)*pp*x5420)));
evalcond[4]=((((0.045)*x5426))+(((0.045)*x5420))+((x5419*x5421))+((x5420*x5424))+(((0.55)*x5419))+(((-1.0)*x5422))+(((-1.0)*x5425))+(((-1.0)*x5420*x5423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5430=(gconst57*px);
IkReal x5431=(gconst56*py);
IkReal x5432=((0.0254095720202485)*sj3);
IkReal x5433=((0.92038656235619)*pp);
CheckValue<IkReal> x5434=IKPowWithIntegerCheck((x5430+x5431),-1);
if(!x5434.valid){
continue;
}
CheckValue<IkReal> x5435=IKPowWithIntegerCheck(((((-1.0)*x5431*x5433))+((x5431*x5432))+(((-1.0)*x5430*x5433))+((x5430*x5432))+(((-0.185020708697653)*x5430))+(((-0.185020708697653)*x5431))),-1);
if(!x5435.valid){
continue;
}
if( IKabs(((x5434.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5435.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5434.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5435.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5434.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5435.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5436=IKsin(j1);
IkReal x5437=IKcos(j1);
IkReal x5438=((0.3)*cj3);
IkReal x5439=(gconst57*px);
IkReal x5440=((0.045)*cj3);
IkReal x5441=((0.3)*sj3);
IkReal x5442=(gconst56*py);
IkReal x5443=(sj3*x5436);
IkReal x5444=((0.09)*x5437);
IkReal x5445=((1.1)*x5436);
IkReal x5446=((1.0)*x5437);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x5436*x5442))+((x5436*x5439))+(((-1.0)*x5438)));
evalcond[1]=((0.045)+x5441+(((-1.0)*x5440))+(((-1.0)*x5442*x5446))+(((-1.0)*x5439*x5446)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x5439*x5445))+((x5439*x5444))+((x5442*x5444))+((x5442*x5445)));
evalcond[3]=((((-0.138057984353428)*pp*x5436))+(((0.099746893695352)*x5436))+(((0.310561435803037)*x5443))+(((0.0254095720202485)*sj3*x5437))+(((-0.92038656235619)*pp*x5437))+(((-0.185020708697653)*x5437)));
evalcond[4]=((((-1.0)*x5442))+((x5437*x5441))+(((-1.0)*x5437*x5440))+(((-1.0)*x5439))+(((0.045)*x5437))+((x5436*x5438))+(((0.55)*x5436))+(((0.045)*x5443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5447 = IKatan2WithCheck((gconst65*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst65*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5447.valid){
continue;
}
j1array[0]=x5447.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5448=IKsin(j1);
IkReal x5449=IKcos(j1);
IkReal x5450=((0.3)*cj3);
IkReal x5451=(gconst57*px);
IkReal x5452=((0.045)*cj3);
IkReal x5453=((0.3)*sj3);
IkReal x5454=(gconst56*py);
IkReal x5455=(sj3*x5448);
IkReal x5456=((0.09)*x5449);
IkReal x5457=((1.1)*x5448);
IkReal x5458=((1.0)*x5449);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x5448*x5451))+((x5448*x5454))+(((-1.0)*x5450)));
evalcond[1]=((0.045)+(((-1.0)*x5454*x5458))+(((-1.0)*x5451*x5458))+x5453+(((-1.0)*x5452)));
evalcond[2]=((-0.2125)+((x5454*x5456))+((x5454*x5457))+(((-1.0)*pp))+((x5451*x5456))+((x5451*x5457)));
evalcond[3]=((((-0.185020708697653)*x5449))+(((-0.138057984353428)*pp*x5448))+(((-0.92038656235619)*pp*x5449))+(((0.310561435803037)*x5455))+(((0.0254095720202485)*sj3*x5449))+(((0.099746893695352)*x5448)));
evalcond[4]=((((0.045)*x5455))+(((0.55)*x5448))+((x5448*x5450))+((x5449*x5453))+(((0.045)*x5449))+(((-1.0)*x5449*x5452))+(((-1.0)*x5454))+(((-1.0)*x5451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst58;
CheckValue<IkReal> x5459 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5459.valid){
continue;
}
gconst58=((3.14159265358979)+(((-1.0)*(x5459.value))));
IkReal gconst59;
gconst59=IKsin(gconst58);
IkReal gconst60;
gconst60=IKcos(gconst58);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst58))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign((((gconst60*px))+((gconst59*py))));
dummyeval[0]=(((gconst60*px))+((gconst59*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5460=(gconst60*px);
IkReal x5461=(gconst59*py);
IkReal x5462=((36.2220411120167)*pp);
dummyeval[0]=(x5461+x5460);
dummyeval[1]=(((sj3*x5461))+((sj3*x5460))+(((-1.0)*x5461*x5462))+(((-1.0)*x5460*x5462))+(((-7.28153581454315)*x5461))+(((-7.28153581454315)*x5460)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5463=(gconst60*px);
IkReal x5464=(gconst59*py);
IkReal x5465=((3.11349480968858)*sj3);
IkReal x5466=((1.3840830449827)*pp);
IkReal x5467=((1.0)*x5463);
IkReal x5468=((1.0)*x5464);
IkReal x5469=(x5467+x5468);
dummyeval[0]=((((-1.0)*x5464*x5465))+(((-1.0)*x5463*x5465))+((x5463*x5466))+(((-1.0)*x5469))+((x5464*x5466)));
dummyeval[1]=((-1.0)*x5469);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5471 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5471.valid){
continue;
}
IkReal x5470=x5471.value;
j1array[0]=((-1.0)*x5470);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5470)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5472=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x5472))+(((0.1275)*x5472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5473=(gconst60*px);
IkReal x5474=(gconst59*py);
IkReal x5475=((0.138057984353428)*pp);
IkReal x5476=((0.0414173953060285)*pp);
IkReal x5477=((0.310561435803037)*sj3);
CheckValue<IkReal> x5478=IKPowWithIntegerCheck((((x5473*x5475))+(((-0.099746893695352)*x5473))+(((-0.099746893695352)*x5474))+(((-1.0)*x5474*x5477))+(((-1.0)*x5473*x5477))+((x5474*x5475))),-1);
if(!x5478.valid){
continue;
}
CheckValue<IkReal> x5479=IKPowWithIntegerCheck(((((-1.0)*x5474))+(((-1.0)*x5473))),-1);
if(!x5479.valid){
continue;
}
if( IKabs(((x5478.value)*(((-0.00832593189139439)+(((-1.0)*x5476))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5476))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5479.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5478.value)*(((-0.00832593189139439)+(((-1.0)*x5476))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5476))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5479.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5478.value)*(((-0.00832593189139439)+(((-1.0)*x5476))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5476))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5479.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5480=IKsin(j1);
IkReal x5481=IKcos(j1);
IkReal x5482=((0.045)*sj3);
IkReal x5483=((0.3)*cj3);
IkReal x5484=((0.045)*cj3);
IkReal x5485=(gconst59*py);
IkReal x5486=(gconst60*px);
IkReal x5487=((1.0)*x5481);
IkReal x5488=(sj3*x5481);
IkReal x5489=((0.09)*x5481);
IkReal x5490=(x5480*x5486);
evalcond[0]=((-0.55)+((x5480*x5485))+(((-1.0)*x5482))+(((-1.0)*x5483))+x5490);
evalcond[1]=((0.045)+(((-1.0)*x5484))+(((-1.0)*x5486*x5487))+(((-1.0)*x5485*x5487))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x5485*x5489))+(((1.1)*x5480*x5485))+(((1.1)*x5490))+(((-1.0)*pp))+((x5486*x5489)));
evalcond[3]=((((0.310561435803037)*sj3*x5480))+(((0.0254095720202485)*x5488))+(((-0.92038656235619)*pp*x5481))+(((-0.185020708697653)*x5481))+(((-0.138057984353428)*pp*x5480))+(((0.099746893695352)*x5480)));
evalcond[4]=((((-1.0)*x5481*x5484))+((x5480*x5482))+((x5480*x5483))+(((0.55)*x5480))+(((0.3)*x5488))+(((-1.0)*x5486))+(((-1.0)*x5485))+(((0.045)*x5481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5491=(gconst60*px);
IkReal x5492=(gconst59*py);
IkReal x5493=((0.0254095720202485)*sj3);
IkReal x5494=((0.92038656235619)*pp);
CheckValue<IkReal> x5495=IKPowWithIntegerCheck((x5491+x5492),-1);
if(!x5495.valid){
continue;
}
CheckValue<IkReal> x5496=IKPowWithIntegerCheck(((((-1.0)*x5491*x5494))+((x5492*x5493))+((x5491*x5493))+(((-1.0)*x5492*x5494))+(((-0.185020708697653)*x5491))+(((-0.185020708697653)*x5492))),-1);
if(!x5496.valid){
continue;
}
if( IKabs(((x5495.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5496.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5495.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5496.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5495.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5496.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5497=IKsin(j1);
IkReal x5498=IKcos(j1);
IkReal x5499=((0.045)*sj3);
IkReal x5500=((0.3)*cj3);
IkReal x5501=((0.045)*cj3);
IkReal x5502=(gconst59*py);
IkReal x5503=(gconst60*px);
IkReal x5504=((1.0)*x5498);
IkReal x5505=(sj3*x5498);
IkReal x5506=((0.09)*x5498);
IkReal x5507=(x5497*x5503);
evalcond[0]=((-0.55)+x5507+(((-1.0)*x5499))+(((-1.0)*x5500))+((x5497*x5502)));
evalcond[1]=((0.045)+(((-1.0)*x5503*x5504))+(((-1.0)*x5502*x5504))+(((-1.0)*x5501))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5507))+(((1.1)*x5497*x5502))+((x5503*x5506))+((x5502*x5506))+(((-1.0)*pp)));
evalcond[3]=((((0.0254095720202485)*x5505))+(((-0.92038656235619)*pp*x5498))+(((0.099746893695352)*x5497))+(((-0.185020708697653)*x5498))+(((-0.138057984353428)*pp*x5497))+(((0.310561435803037)*sj3*x5497)));
evalcond[4]=((((0.3)*x5505))+(((0.55)*x5497))+(((-1.0)*x5498*x5501))+(((-1.0)*x5502))+(((-1.0)*x5503))+(((0.045)*x5498))+((x5497*x5500))+((x5497*x5499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5508 = IKatan2WithCheck((gconst66*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst66*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5508.valid){
continue;
}
j1array[0]=x5508.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5509=IKsin(j1);
IkReal x5510=IKcos(j1);
IkReal x5511=((0.045)*sj3);
IkReal x5512=((0.3)*cj3);
IkReal x5513=((0.045)*cj3);
IkReal x5514=(gconst59*py);
IkReal x5515=(gconst60*px);
IkReal x5516=((1.0)*x5510);
IkReal x5517=(sj3*x5510);
IkReal x5518=((0.09)*x5510);
IkReal x5519=(x5509*x5515);
evalcond[0]=((-0.55)+x5519+((x5509*x5514))+(((-1.0)*x5512))+(((-1.0)*x5511)));
evalcond[1]=((0.045)+(((-1.0)*x5515*x5516))+(((-1.0)*x5513))+(((-1.0)*x5514*x5516))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5509*x5514))+(((1.1)*x5519))+((x5515*x5518))+(((-1.0)*pp))+((x5514*x5518)));
evalcond[3]=((((0.0254095720202485)*x5517))+(((-0.138057984353428)*pp*x5509))+(((-0.185020708697653)*x5510))+(((0.099746893695352)*x5509))+(((-0.92038656235619)*pp*x5510))+(((0.310561435803037)*sj3*x5509)));
evalcond[4]=((((-1.0)*x5510*x5513))+(((0.55)*x5509))+((x5509*x5512))+((x5509*x5511))+(((-1.0)*x5514))+(((-1.0)*x5515))+(((0.045)*x5510))+(((0.3)*x5517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5521 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5521.valid){
continue;
}
IkReal x5520=x5521.value;
j1array[0]=((-1.0)*x5520);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5520)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5522=IKcos(j1);
evalcond[0]=((((0.1275)*x5522))+(((0.30675)*sj3*x5522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5524 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5524.valid){
continue;
}
IkReal x5523=x5524.value;
j1array[0]=((-1.0)*x5523);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5523)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5525=IKcos(j1);
evalcond[0]=((((0.1275)*x5525))+(((0.30675)*sj3*x5525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5527 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5527.valid){
continue;
}
IkReal x5526=x5527.value;
j1array[0]=((-1.0)*x5526);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5526)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5528=IKcos(j1);
evalcond[0]=((((0.1275)*x5528))+(((0.30675)*sj3*x5528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5530 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5530.valid){
continue;
}
IkReal x5529=x5530.value;
j1array[0]=((-1.0)*x5529);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5529)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5531=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x5531))+(((0.1275)*x5531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.129084215370456)+(((0.310561435803037)*sj3)))))+(IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5533 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5533.valid){
continue;
}
IkReal x5532=x5533.value;
j1array[0]=((-1.0)*x5532);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5532)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5534=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x5534))+(((0.1275)*x5534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5535=(py*sj0);
IkReal x5536=((0.310561435803037)*sj3);
IkReal x5537=((0.0414173953060285)*pp);
IkReal x5538=(cj0*px);
IkReal x5539=((0.138057984353428)*pp);
CheckValue<IkReal> x5540=IKPowWithIntegerCheck(((((-1.0)*x5535*x5536))+(((-0.099746893695352)*x5538))+(((-0.099746893695352)*x5535))+(((-1.0)*x5536*x5538))+((x5538*x5539))+((x5535*x5539))),-1);
if(!x5540.valid){
continue;
}
CheckValue<IkReal> x5541=IKPowWithIntegerCheck(((((-1.0)*x5538))+(((-1.0)*x5535))),-1);
if(!x5541.valid){
continue;
}
if( IKabs(((x5540.value)*(((-0.00832593189139439)+(((-1.0)*x5537))+((cj3*x5537))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5541.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5540.value)*(((-0.00832593189139439)+(((-1.0)*x5537))+((cj3*x5537))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5541.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5540.value)*(((-0.00832593189139439)+(((-1.0)*x5537))+((cj3*x5537))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5541.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5542=IKsin(j1);
IkReal x5543=IKcos(j1);
IkReal x5544=((0.045)*sj3);
IkReal x5545=((0.3)*cj3);
IkReal x5546=((0.045)*cj3);
IkReal x5547=(cj0*px);
IkReal x5548=(py*sj0);
IkReal x5549=((1.0)*x5543);
IkReal x5550=(sj3*x5543);
IkReal x5551=((0.09)*x5543);
IkReal x5552=((1.1)*x5542);
evalcond[0]=((-0.55)+((x5542*x5548))+((x5542*x5547))+(((-1.0)*x5545))+(((-1.0)*x5544)));
evalcond[1]=((0.045)+(((-1.0)*x5548*x5549))+(((0.3)*sj3))+(((-1.0)*x5547*x5549))+(((-1.0)*x5546)));
evalcond[2]=((-0.2125)+((x5547*x5551))+((x5547*x5552))+(((-1.0)*pp))+((x5548*x5551))+((x5548*x5552)));
evalcond[3]=((((-0.92038656235619)*pp*x5543))+(((0.310561435803037)*sj3*x5542))+(((-0.138057984353428)*pp*x5542))+(((0.099746893695352)*x5542))+(((-0.185020708697653)*x5543))+(((0.0254095720202485)*x5550)));
evalcond[4]=(((x5542*x5544))+((x5542*x5545))+(((-1.0)*x5543*x5546))+(((0.3)*x5550))+(((0.55)*x5542))+(((0.045)*x5543))+(((-1.0)*x5547))+(((-1.0)*x5548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5553=(cj0*px);
IkReal x5554=(py*sj0);
IkReal x5555=((0.0254095720202485)*sj3);
IkReal x5556=((0.92038656235619)*pp);
CheckValue<IkReal> x5557=IKPowWithIntegerCheck((x5554+x5553),-1);
if(!x5557.valid){
continue;
}
CheckValue<IkReal> x5558=IKPowWithIntegerCheck((((x5554*x5555))+(((-1.0)*x5553*x5556))+((x5553*x5555))+(((-0.185020708697653)*x5553))+(((-0.185020708697653)*x5554))+(((-1.0)*x5554*x5556))),-1);
if(!x5558.valid){
continue;
}
if( IKabs(((x5557.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5558.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5557.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5558.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5557.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5558.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5559=IKsin(j1);
IkReal x5560=IKcos(j1);
IkReal x5561=((0.045)*sj3);
IkReal x5562=((0.3)*cj3);
IkReal x5563=((0.045)*cj3);
IkReal x5564=(cj0*px);
IkReal x5565=(py*sj0);
IkReal x5566=((1.0)*x5560);
IkReal x5567=(sj3*x5560);
IkReal x5568=((0.09)*x5560);
IkReal x5569=((1.1)*x5559);
evalcond[0]=((-0.55)+(((-1.0)*x5562))+(((-1.0)*x5561))+((x5559*x5565))+((x5559*x5564)));
evalcond[1]=((0.045)+(((-1.0)*x5564*x5566))+(((-1.0)*x5563))+(((0.3)*sj3))+(((-1.0)*x5565*x5566)));
evalcond[2]=((-0.2125)+((x5564*x5568))+((x5564*x5569))+((x5565*x5569))+((x5565*x5568))+(((-1.0)*pp)));
evalcond[3]=((((0.099746893695352)*x5559))+(((-0.185020708697653)*x5560))+(((0.0254095720202485)*x5567))+(((-0.138057984353428)*pp*x5559))+(((0.310561435803037)*sj3*x5559))+(((-0.92038656235619)*pp*x5560)));
evalcond[4]=((((0.045)*x5560))+(((0.55)*x5559))+(((-1.0)*x5564))+(((-1.0)*x5565))+(((-1.0)*x5560*x5563))+((x5559*x5561))+((x5559*x5562))+(((0.3)*x5567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5570 = IKatan2WithCheck((gconst42*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst42*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5570.valid){
continue;
}
j1array[0]=x5570.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5571=IKsin(j1);
IkReal x5572=IKcos(j1);
IkReal x5573=((0.045)*sj3);
IkReal x5574=((0.3)*cj3);
IkReal x5575=((0.045)*cj3);
IkReal x5576=(cj0*px);
IkReal x5577=(py*sj0);
IkReal x5578=((1.0)*x5572);
IkReal x5579=(sj3*x5572);
IkReal x5580=((0.09)*x5572);
IkReal x5581=((1.1)*x5571);
evalcond[0]=((-0.55)+(((-1.0)*x5573))+(((-1.0)*x5574))+((x5571*x5577))+((x5571*x5576)));
evalcond[1]=((0.045)+(((-1.0)*x5575))+(((0.3)*sj3))+(((-1.0)*x5576*x5578))+(((-1.0)*x5577*x5578)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x5576*x5580))+((x5576*x5581))+((x5577*x5581))+((x5577*x5580)));
evalcond[3]=((((0.310561435803037)*sj3*x5571))+(((-0.185020708697653)*x5572))+(((0.0254095720202485)*x5579))+(((-0.92038656235619)*pp*x5572))+(((0.099746893695352)*x5571))+(((-0.138057984353428)*pp*x5571)));
evalcond[4]=((((0.045)*x5572))+(((0.55)*x5571))+(((-1.0)*x5572*x5575))+(((-1.0)*x5577))+(((-1.0)*x5576))+(((0.3)*x5579))+((x5571*x5574))+((x5571*x5573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5582=(px*sj0);
IkReal x5583=(cj0*py);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x5582+(((-1.0)*x5583)));
evalcond[3]=(x5583+(((-1.0)*x5582)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
IkReal gconst67;
gconst67=IKsign((((cj0*px))+((py*sj0))));
IkReal x5584=(((cj0*px))+((py*sj0)));
IkReal x5585=IKsign(x5584);
IkReal x5586=((0.3)*x5585);
IkReal x5587=((0.045)*x5585);
dummyeval[0]=x5584;
dummyeval[1]=((IKabs((((sj3*x5587))+(((0.55)*x5585))+((cj3*x5586)))))+(IKabs(((((-1.0)*x5587))+((cj3*x5587))+(((-1.0)*sj3*x5586))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5588=(cj0*px);
IkReal x5589=(py*sj0);
IkReal x5590=((36.2220411120167)*pp);
dummyeval[0]=(x5588+x5589);
dummyeval[1]=((((-7.28153581454315)*x5588))+(((-7.28153581454315)*x5589))+(((-1.0)*x5588*x5590))+((sj3*x5589))+((sj3*x5588))+(((-1.0)*x5589*x5590)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5591=(cj0*px);
IkReal x5592=((1.3840830449827)*pp);
IkReal x5593=((3.11349480968858)*sj3);
IkReal x5594=(py*sj0);
dummyeval[0]=(((x5592*x5594))+(((-1.0)*x5593*x5594))+(((-1.0)*x5594))+(((-1.0)*x5591))+(((-1.0)*x5591*x5593))+((x5591*x5592)));
dummyeval[1]=(x5591+x5594);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst68;
CheckValue<IkReal> x5595 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5595.valid){
continue;
}
gconst68=((-1.0)*(x5595.value));
IkReal gconst69;
gconst69=IKsin(gconst68);
IkReal gconst70;
gconst70=IKcos(gconst68);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst68))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst86;
gconst86=IKsign((((gconst69*py))+((gconst70*px))));
dummyeval[0]=(((gconst69*py))+((gconst70*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5596=(gconst69*py);
IkReal x5597=((36.2220411120167)*pp);
IkReal x5598=(gconst70*px);
dummyeval[0]=(x5596+x5598);
dummyeval[1]=(((sj3*x5596))+((sj3*x5598))+(((-1.0)*x5596*x5597))+(((-1.0)*x5597*x5598))+(((-7.28153581454315)*x5596))+(((-7.28153581454315)*x5598)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5599=((1.3840830449827)*pp);
IkReal x5600=(gconst69*py);
IkReal x5601=(gconst70*px);
IkReal x5602=((3.11349480968858)*sj3);
dummyeval[0]=((((-1.0)*x5601))+(((-1.0)*x5600))+(((-1.0)*x5601*x5602))+(((-1.0)*x5600*x5602))+((x5599*x5600))+((x5599*x5601)));
dummyeval[1]=(x5601+x5600);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5604 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5604.valid){
continue;
}
IkReal x5603=x5604.value;
j1array[0]=((-1.0)*x5603);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5603)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5605=IKcos(j1);
evalcond[0]=((((-0.1275)*x5605))+(((-0.30675)*sj3*x5605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5606=(gconst69*py);
IkReal x5607=((0.310561435803037)*sj3);
IkReal x5608=(gconst70*px);
IkReal x5609=((0.0414173953060285)*pp);
IkReal x5610=((0.138057984353428)*pp);
CheckValue<IkReal> x5611=IKPowWithIntegerCheck(((((-1.0)*x5607*x5608))+((x5608*x5610))+(((-0.099746893695352)*x5606))+(((-0.099746893695352)*x5608))+(((-1.0)*x5606*x5607))+((x5606*x5610))),-1);
if(!x5611.valid){
continue;
}
CheckValue<IkReal> x5612=IKPowWithIntegerCheck((x5606+x5608),-1);
if(!x5612.valid){
continue;
}
if( IKabs(((x5611.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+((cj3*x5609))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x5609)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5612.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5611.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+((cj3*x5609))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x5609))))))+IKsqr(((x5612.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5611.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+((cj3*x5609))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x5609))))), ((x5612.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5613=IKsin(j1);
IkReal x5614=IKcos(j1);
IkReal x5615=(gconst69*py);
IkReal x5616=((0.3)*cj3);
IkReal x5617=((0.045)*cj3);
IkReal x5618=((0.045)*sj3);
IkReal x5619=(gconst70*px);
IkReal x5620=(sj3*x5614);
IkReal x5621=((0.09)*x5614);
IkReal x5622=((1.1)*x5613);
evalcond[0]=((-0.55)+((x5613*x5619))+((x5613*x5615))+(((-1.0)*x5616))+(((-1.0)*x5618)));
evalcond[1]=((0.045)+((x5614*x5615))+((x5614*x5619))+(((0.3)*sj3))+(((-1.0)*x5617)));
evalcond[2]=((-0.2125)+((x5619*x5622))+((x5615*x5622))+(((-1.0)*x5619*x5621))+(((-1.0)*pp))+(((-1.0)*x5615*x5621)));
evalcond[3]=((((0.138057984353428)*pp*x5613))+(((0.0254095720202485)*x5620))+(((-0.099746893695352)*x5613))+(((-0.185020708697653)*x5614))+(((-0.310561435803037)*sj3*x5613))+(((-0.92038656235619)*pp*x5614)));
evalcond[4]=(((x5613*x5618))+((x5613*x5616))+(((-1.0)*x5619))+(((-1.0)*x5615))+((x5614*x5617))+(((-0.045)*x5614))+(((-0.3)*x5620))+(((0.55)*x5613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5623=(gconst70*px);
IkReal x5624=(gconst69*py);
IkReal x5625=((0.92038656235619)*pp);
IkReal x5626=((0.0254095720202485)*sj3);
CheckValue<IkReal> x5627=IKPowWithIntegerCheck((x5624+x5623),-1);
if(!x5627.valid){
continue;
}
CheckValue<IkReal> x5628=IKPowWithIntegerCheck((((x5624*x5626))+(((-0.185020708697653)*x5624))+(((-0.185020708697653)*x5623))+((x5623*x5626))+(((-1.0)*x5623*x5625))+(((-1.0)*x5624*x5625))),-1);
if(!x5628.valid){
continue;
}
if( IKabs(((x5627.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5628.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5627.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5628.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5627.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5628.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5629=IKsin(j1);
IkReal x5630=IKcos(j1);
IkReal x5631=(gconst69*py);
IkReal x5632=((0.3)*cj3);
IkReal x5633=((0.045)*cj3);
IkReal x5634=((0.045)*sj3);
IkReal x5635=(gconst70*px);
IkReal x5636=(sj3*x5630);
IkReal x5637=((0.09)*x5630);
IkReal x5638=((1.1)*x5629);
evalcond[0]=((-0.55)+((x5629*x5631))+((x5629*x5635))+(((-1.0)*x5632))+(((-1.0)*x5634)));
evalcond[1]=((0.045)+(((-1.0)*x5633))+((x5630*x5631))+((x5630*x5635))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x5635*x5637))+((x5631*x5638))+(((-1.0)*pp))+((x5635*x5638))+(((-1.0)*x5631*x5637)));
evalcond[3]=((((0.138057984353428)*pp*x5629))+(((-0.92038656235619)*pp*x5630))+(((-0.099746893695352)*x5629))+(((-0.185020708697653)*x5630))+(((-0.310561435803037)*sj3*x5629))+(((0.0254095720202485)*x5636)));
evalcond[4]=((((-0.045)*x5630))+((x5629*x5632))+((x5629*x5634))+(((-0.3)*x5636))+((x5630*x5633))+(((-1.0)*x5635))+(((-1.0)*x5631))+(((0.55)*x5629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5639 = IKatan2WithCheck((gconst86*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst86*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5639.valid){
continue;
}
j1array[0]=x5639.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5640=IKsin(j1);
IkReal x5641=IKcos(j1);
IkReal x5642=(gconst69*py);
IkReal x5643=((0.3)*cj3);
IkReal x5644=((0.045)*cj3);
IkReal x5645=((0.045)*sj3);
IkReal x5646=(gconst70*px);
IkReal x5647=(sj3*x5641);
IkReal x5648=((0.09)*x5641);
IkReal x5649=((1.1)*x5640);
evalcond[0]=((-0.55)+((x5640*x5642))+((x5640*x5646))+(((-1.0)*x5645))+(((-1.0)*x5643)));
evalcond[1]=((0.045)+((x5641*x5646))+((x5641*x5642))+(((-1.0)*x5644))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x5642*x5648))+(((-1.0)*x5646*x5648))+(((-1.0)*pp))+((x5646*x5649))+((x5642*x5649)));
evalcond[3]=((((-0.92038656235619)*pp*x5641))+(((0.0254095720202485)*x5647))+(((-0.310561435803037)*sj3*x5640))+(((-0.185020708697653)*x5641))+(((0.138057984353428)*pp*x5640))+(((-0.099746893695352)*x5640)));
evalcond[4]=((((-0.045)*x5641))+((x5641*x5644))+((x5640*x5645))+((x5640*x5643))+(((0.55)*x5640))+(((-0.3)*x5647))+(((-1.0)*x5646))+(((-1.0)*x5642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst71;
CheckValue<IkReal> x5650 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5650.valid){
continue;
}
gconst71=((3.14159265358979)+(((-1.0)*(x5650.value))));
IkReal gconst72;
gconst72=IKsin(gconst71);
IkReal gconst73;
gconst73=IKcos(gconst71);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst71))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst87;
gconst87=IKsign((((gconst72*py))+((gconst73*px))));
dummyeval[0]=(((gconst72*py))+((gconst73*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5651=(gconst72*py);
IkReal x5652=(gconst73*px);
IkReal x5653=((36.2220411120167)*pp);
dummyeval[0]=(x5652+x5651);
dummyeval[1]=((((-1.0)*x5651*x5653))+(((-1.0)*x5652*x5653))+(((-7.28153581454315)*x5652))+(((-7.28153581454315)*x5651))+((sj3*x5651))+((sj3*x5652)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5654=(gconst73*px);
IkReal x5655=((3.11349480968858)*sj3);
IkReal x5656=(gconst72*py);
IkReal x5657=((1.3840830449827)*pp);
dummyeval[0]=(((x5656*x5657))+((x5654*x5657))+(((-1.0)*x5654*x5655))+(((-1.0)*x5655*x5656))+(((-1.0)*x5656))+(((-1.0)*x5654)));
dummyeval[1]=(x5656+x5654);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5659 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5659.valid){
continue;
}
IkReal x5658=x5659.value;
j1array[0]=((-1.0)*x5658);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5658)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5660=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x5660))+(((-0.1275)*x5660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5661=(gconst73*px);
IkReal x5662=((0.138057984353428)*pp);
IkReal x5663=(gconst72*py);
IkReal x5664=((0.310561435803037)*sj3);
IkReal x5665=((0.0414173953060285)*pp);
CheckValue<IkReal> x5666=IKPowWithIntegerCheck(((((-0.099746893695352)*x5661))+(((-0.099746893695352)*x5663))+(((-1.0)*x5663*x5664))+((x5661*x5662))+((x5662*x5663))+(((-1.0)*x5661*x5664))),-1);
if(!x5666.valid){
continue;
}
CheckValue<IkReal> x5667=IKPowWithIntegerCheck((x5663+x5661),-1);
if(!x5667.valid){
continue;
}
if( IKabs(((x5666.value)*(((-0.00832593189139439)+(((-1.0)*x5665))+((cj3*x5665))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5667.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5666.value)*(((-0.00832593189139439)+(((-1.0)*x5665))+((cj3*x5665))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5667.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5666.value)*(((-0.00832593189139439)+(((-1.0)*x5665))+((cj3*x5665))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5667.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5668=IKsin(j1);
IkReal x5669=IKcos(j1);
IkReal x5670=((0.045)*sj3);
IkReal x5671=((0.3)*cj3);
IkReal x5672=((0.045)*cj3);
IkReal x5673=(gconst73*px);
IkReal x5674=(gconst72*py);
IkReal x5675=(sj3*x5669);
IkReal x5676=((0.09)*x5669);
IkReal x5677=((1.1)*x5668);
evalcond[0]=((-0.55)+((x5668*x5674))+((x5668*x5673))+(((-1.0)*x5671))+(((-1.0)*x5670)));
evalcond[1]=((0.045)+((x5669*x5673))+((x5669*x5674))+(((0.3)*sj3))+(((-1.0)*x5672)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x5673*x5677))+(((-1.0)*x5673*x5676))+(((-1.0)*x5674*x5676))+((x5674*x5677)));
evalcond[3]=((((-0.310561435803037)*sj3*x5668))+(((-0.185020708697653)*x5669))+(((-0.099746893695352)*x5668))+(((0.0254095720202485)*x5675))+(((-0.92038656235619)*pp*x5669))+(((0.138057984353428)*pp*x5668)));
evalcond[4]=((((-0.3)*x5675))+((x5668*x5671))+((x5668*x5670))+(((-1.0)*x5674))+(((-1.0)*x5673))+(((0.55)*x5668))+((x5669*x5672))+(((-0.045)*x5669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5678=(gconst72*py);
IkReal x5679=((0.92038656235619)*pp);
IkReal x5680=(gconst73*px);
IkReal x5681=((0.0254095720202485)*sj3);
CheckValue<IkReal> x5682=IKPowWithIntegerCheck((x5680+x5678),-1);
if(!x5682.valid){
continue;
}
CheckValue<IkReal> x5683=IKPowWithIntegerCheck(((((-0.185020708697653)*x5678))+(((-1.0)*x5678*x5679))+((x5680*x5681))+(((-1.0)*x5679*x5680))+(((-0.185020708697653)*x5680))+((x5678*x5681))),-1);
if(!x5683.valid){
continue;
}
if( IKabs(((x5682.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5683.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5682.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5683.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5682.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5683.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5684=IKsin(j1);
IkReal x5685=IKcos(j1);
IkReal x5686=((0.045)*sj3);
IkReal x5687=((0.3)*cj3);
IkReal x5688=((0.045)*cj3);
IkReal x5689=(gconst73*px);
IkReal x5690=(gconst72*py);
IkReal x5691=(sj3*x5685);
IkReal x5692=((0.09)*x5685);
IkReal x5693=((1.1)*x5684);
evalcond[0]=((-0.55)+(((-1.0)*x5686))+(((-1.0)*x5687))+((x5684*x5689))+((x5684*x5690)));
evalcond[1]=((0.045)+(((-1.0)*x5688))+((x5685*x5689))+((x5685*x5690))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x5690*x5692))+((x5690*x5693))+(((-1.0)*pp))+(((-1.0)*x5689*x5692))+((x5689*x5693)));
evalcond[3]=((((0.0254095720202485)*x5691))+(((-0.185020708697653)*x5685))+(((-0.099746893695352)*x5684))+(((-0.92038656235619)*pp*x5685))+(((0.138057984353428)*pp*x5684))+(((-0.310561435803037)*sj3*x5684)));
evalcond[4]=((((-0.3)*x5691))+(((0.55)*x5684))+((x5685*x5688))+((x5684*x5686))+((x5684*x5687))+(((-1.0)*x5690))+(((-1.0)*x5689))+(((-0.045)*x5685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5694 = IKatan2WithCheck((gconst87*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst87*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5694.valid){
continue;
}
j1array[0]=x5694.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5695=IKsin(j1);
IkReal x5696=IKcos(j1);
IkReal x5697=((0.045)*sj3);
IkReal x5698=((0.3)*cj3);
IkReal x5699=((0.045)*cj3);
IkReal x5700=(gconst73*px);
IkReal x5701=(gconst72*py);
IkReal x5702=(sj3*x5696);
IkReal x5703=((0.09)*x5696);
IkReal x5704=((1.1)*x5695);
evalcond[0]=((-0.55)+(((-1.0)*x5698))+(((-1.0)*x5697))+((x5695*x5700))+((x5695*x5701)));
evalcond[1]=((0.045)+((x5696*x5701))+((x5696*x5700))+(((-1.0)*x5699))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x5700*x5704))+(((-1.0)*x5700*x5703))+((x5701*x5704))+(((-1.0)*x5701*x5703))+(((-1.0)*pp)));
evalcond[3]=((((-0.310561435803037)*sj3*x5695))+(((0.0254095720202485)*x5702))+(((-0.185020708697653)*x5696))+(((-0.099746893695352)*x5695))+(((-0.92038656235619)*pp*x5696))+(((0.138057984353428)*pp*x5695)));
evalcond[4]=((((-1.0)*x5700))+(((-1.0)*x5701))+((x5695*x5697))+((x5695*x5698))+(((0.55)*x5695))+((x5696*x5699))+(((-0.3)*x5702))+(((-0.045)*x5696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst74;
CheckValue<IkReal> x5705 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5705.valid){
continue;
}
gconst74=((-1.0)*(x5705.value));
IkReal gconst75;
gconst75=IKsin(gconst74);
IkReal gconst76;
gconst76=IKcos(gconst74);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst74))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst88;
gconst88=IKsign((((gconst76*px))+((gconst75*py))));
dummyeval[0]=(((gconst76*px))+((gconst75*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5706=((36.2220411120167)*pp);
IkReal x5707=(gconst76*px);
IkReal x5708=(gconst75*py);
dummyeval[0]=(x5708+x5707);
dummyeval[1]=((((-7.28153581454315)*x5708))+(((-7.28153581454315)*x5707))+(((-1.0)*x5706*x5708))+(((-1.0)*x5706*x5707))+((sj3*x5708))+((sj3*x5707)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5709=(gconst75*py);
IkReal x5710=(gconst76*px);
IkReal x5711=((3.11349480968858)*sj3);
IkReal x5712=((1.3840830449827)*pp);
dummyeval[0]=((((-1.0)*x5709))+(((-1.0)*x5710))+(((-1.0)*x5709*x5711))+((x5710*x5712))+(((-1.0)*x5710*x5711))+((x5709*x5712)));
dummyeval[1]=(x5709+x5710);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5714 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5714.valid){
continue;
}
IkReal x5713=x5714.value;
j1array[0]=((-1.0)*x5713);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5713)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5715=IKcos(j1);
evalcond[0]=((((-0.1275)*x5715))+(((-0.30675)*sj3*x5715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5716=(gconst75*py);
IkReal x5717=((0.310561435803037)*sj3);
IkReal x5718=((0.0414173953060285)*pp);
IkReal x5719=(gconst76*px);
IkReal x5720=((0.138057984353428)*pp);
CheckValue<IkReal> x5721=IKPowWithIntegerCheck(((((-1.0)*x5716*x5717))+((x5719*x5720))+((x5716*x5720))+(((-0.099746893695352)*x5719))+(((-0.099746893695352)*x5716))+(((-1.0)*x5717*x5719))),-1);
if(!x5721.valid){
continue;
}
CheckValue<IkReal> x5722=IKPowWithIntegerCheck((x5719+x5716),-1);
if(!x5722.valid){
continue;
}
if( IKabs(((x5721.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5718))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x5718)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5722.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5721.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5718))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x5718))))))+IKsqr(((x5722.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5721.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5718))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x5718))))), ((x5722.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5723=IKsin(j1);
IkReal x5724=IKcos(j1);
IkReal x5725=((0.3)*sj3);
IkReal x5726=((0.3)*cj3);
IkReal x5727=((0.045)*cj3);
IkReal x5728=((0.045)*sj3);
IkReal x5729=(gconst75*py);
IkReal x5730=(gconst76*px);
IkReal x5731=((0.09)*x5724);
IkReal x5732=(x5723*x5730);
evalcond[0]=((-0.55)+((x5723*x5729))+(((-1.0)*x5728))+(((-1.0)*x5726))+x5732);
evalcond[1]=((0.045)+((x5724*x5730))+((x5724*x5729))+(((-1.0)*x5727))+x5725);
evalcond[2]=((-0.2125)+(((-1.0)*x5729*x5731))+(((1.1)*x5732))+(((-1.0)*x5730*x5731))+(((-1.0)*pp))+(((1.1)*x5723*x5729)));
evalcond[3]=((((-0.92038656235619)*pp*x5724))+(((0.138057984353428)*pp*x5723))+(((-0.099746893695352)*x5723))+(((-0.310561435803037)*sj3*x5723))+(((-0.185020708697653)*x5724))+(((0.0254095720202485)*sj3*x5724)));
evalcond[4]=((((0.55)*x5723))+((x5723*x5726))+((x5723*x5728))+((x5724*x5727))+(((-1.0)*x5724*x5725))+(((-0.045)*x5724))+(((-1.0)*x5729))+(((-1.0)*x5730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5733=(gconst76*px);
IkReal x5734=((0.0254095720202485)*sj3);
IkReal x5735=((0.92038656235619)*pp);
IkReal x5736=(gconst75*py);
CheckValue<IkReal> x5737=IKPowWithIntegerCheck((x5736+x5733),-1);
if(!x5737.valid){
continue;
}
CheckValue<IkReal> x5738=IKPowWithIntegerCheck((((x5734*x5736))+((x5733*x5734))+(((-1.0)*x5735*x5736))+(((-1.0)*x5733*x5735))+(((-0.185020708697653)*x5736))+(((-0.185020708697653)*x5733))),-1);
if(!x5738.valid){
continue;
}
if( IKabs(((x5737.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5738.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5737.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5738.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5737.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5738.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5739=IKsin(j1);
IkReal x5740=IKcos(j1);
IkReal x5741=((0.3)*sj3);
IkReal x5742=((0.3)*cj3);
IkReal x5743=((0.045)*cj3);
IkReal x5744=((0.045)*sj3);
IkReal x5745=(gconst75*py);
IkReal x5746=(gconst76*px);
IkReal x5747=((0.09)*x5740);
IkReal x5748=(x5739*x5746);
evalcond[0]=((-0.55)+(((-1.0)*x5744))+(((-1.0)*x5742))+((x5739*x5745))+x5748);
evalcond[1]=((0.045)+((x5740*x5745))+((x5740*x5746))+(((-1.0)*x5743))+x5741);
evalcond[2]=((-0.2125)+(((-1.0)*x5746*x5747))+(((-1.0)*x5745*x5747))+(((-1.0)*pp))+(((1.1)*x5748))+(((1.1)*x5739*x5745)));
evalcond[3]=((((0.0254095720202485)*sj3*x5740))+(((-0.099746893695352)*x5739))+(((0.138057984353428)*pp*x5739))+(((-0.310561435803037)*sj3*x5739))+(((-0.185020708697653)*x5740))+(((-0.92038656235619)*pp*x5740)));
evalcond[4]=((((0.55)*x5739))+(((-1.0)*x5740*x5741))+((x5740*x5743))+(((-0.045)*x5740))+(((-1.0)*x5745))+(((-1.0)*x5746))+((x5739*x5742))+((x5739*x5744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5749 = IKatan2WithCheck((gconst88*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst88*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5749.valid){
continue;
}
j1array[0]=x5749.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5750=IKsin(j1);
IkReal x5751=IKcos(j1);
IkReal x5752=((0.3)*sj3);
IkReal x5753=((0.3)*cj3);
IkReal x5754=((0.045)*cj3);
IkReal x5755=((0.045)*sj3);
IkReal x5756=(gconst75*py);
IkReal x5757=(gconst76*px);
IkReal x5758=((0.09)*x5751);
IkReal x5759=(x5750*x5757);
evalcond[0]=((-0.55)+((x5750*x5756))+(((-1.0)*x5755))+(((-1.0)*x5753))+x5759);
evalcond[1]=((0.045)+(((-1.0)*x5754))+((x5751*x5756))+((x5751*x5757))+x5752);
evalcond[2]=((-0.2125)+(((1.1)*x5759))+(((1.1)*x5750*x5756))+(((-1.0)*pp))+(((-1.0)*x5757*x5758))+(((-1.0)*x5756*x5758)));
evalcond[3]=((((-0.310561435803037)*sj3*x5750))+(((-0.185020708697653)*x5751))+(((-0.099746893695352)*x5750))+(((-0.92038656235619)*pp*x5751))+(((0.138057984353428)*pp*x5750))+(((0.0254095720202485)*sj3*x5751)));
evalcond[4]=(((x5750*x5753))+((x5750*x5755))+(((-1.0)*x5751*x5752))+(((0.55)*x5750))+(((-0.045)*x5751))+((x5751*x5754))+(((-1.0)*x5757))+(((-1.0)*x5756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst77;
CheckValue<IkReal> x5760 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5760.valid){
continue;
}
gconst77=((3.14159265358979)+(((-1.0)*(x5760.value))));
IkReal gconst78;
gconst78=IKsin(gconst77);
IkReal gconst79;
gconst79=IKcos(gconst77);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst77))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst89;
gconst89=IKsign((((gconst78*py))+((gconst79*px))));
dummyeval[0]=(((gconst78*py))+((gconst79*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5761=(gconst78*py);
IkReal x5762=((36.2220411120167)*pp);
IkReal x5763=(gconst79*px);
dummyeval[0]=(x5763+x5761);
dummyeval[1]=(((sj3*x5763))+((sj3*x5761))+(((-1.0)*x5761*x5762))+(((-7.28153581454315)*x5763))+(((-7.28153581454315)*x5761))+(((-1.0)*x5762*x5763)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5764=(gconst79*px);
IkReal x5765=((3.11349480968858)*sj3);
IkReal x5766=(gconst78*py);
IkReal x5767=((1.3840830449827)*pp);
dummyeval[0]=(((x5766*x5767))+((x5764*x5767))+(((-1.0)*x5766))+(((-1.0)*x5764))+(((-1.0)*x5765*x5766))+(((-1.0)*x5764*x5765)));
dummyeval[1]=(x5766+x5764);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5769 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5769.valid){
continue;
}
IkReal x5768=x5769.value;
j1array[0]=((-1.0)*x5768);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5768)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5770=IKcos(j1);
evalcond[0]=((((-0.1275)*x5770))+(((-0.30675)*sj3*x5770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5771=(gconst78*py);
IkReal x5772=(gconst79*px);
IkReal x5773=((0.138057984353428)*pp);
IkReal x5774=((0.310561435803037)*sj3);
IkReal x5775=((0.0414173953060285)*pp);
CheckValue<IkReal> x5776=IKPowWithIntegerCheck(((((-0.099746893695352)*x5771))+(((-0.099746893695352)*x5772))+((x5771*x5773))+(((-1.0)*x5771*x5774))+(((-1.0)*x5772*x5774))+((x5772*x5773))),-1);
if(!x5776.valid){
continue;
}
CheckValue<IkReal> x5777=IKPowWithIntegerCheck((x5771+x5772),-1);
if(!x5777.valid){
continue;
}
if( IKabs(((x5776.value)*(((-0.00832593189139439)+((cj3*x5775))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x5775))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5777.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5776.value)*(((-0.00832593189139439)+((cj3*x5775))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x5775))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5777.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5776.value)*(((-0.00832593189139439)+((cj3*x5775))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x5775))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5777.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5778=IKsin(j1);
IkReal x5779=IKcos(j1);
IkReal x5780=((0.3)*cj3);
IkReal x5781=((0.045)*cj3);
IkReal x5782=(gconst79*px);
IkReal x5783=(gconst78*py);
IkReal x5784=(sj3*x5778);
IkReal x5785=(sj3*x5779);
IkReal x5786=((0.09)*x5779);
IkReal x5787=((1.1)*x5778);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5780))+((x5778*x5783))+((x5778*x5782)));
evalcond[1]=((0.045)+(((-1.0)*x5781))+((x5779*x5782))+((x5779*x5783))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x5782*x5786))+(((-1.0)*x5783*x5786))+((x5782*x5787))+(((-1.0)*pp))+((x5783*x5787)));
evalcond[3]=((((-0.099746893695352)*x5778))+(((0.138057984353428)*pp*x5778))+(((-0.310561435803037)*x5784))+(((-0.92038656235619)*pp*x5779))+(((-0.185020708697653)*x5779))+(((0.0254095720202485)*x5785)));
evalcond[4]=((((0.55)*x5778))+(((-0.3)*x5785))+(((0.045)*x5784))+(((-0.045)*x5779))+((x5779*x5781))+((x5778*x5780))+(((-1.0)*x5782))+(((-1.0)*x5783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5788=(gconst79*px);
IkReal x5789=((0.0254095720202485)*sj3);
IkReal x5790=(gconst78*py);
IkReal x5791=((0.92038656235619)*pp);
CheckValue<IkReal> x5792=IKPowWithIntegerCheck((x5788+x5790),-1);
if(!x5792.valid){
continue;
}
CheckValue<IkReal> x5793=IKPowWithIntegerCheck((((x5789*x5790))+(((-0.185020708697653)*x5788))+(((-0.185020708697653)*x5790))+(((-1.0)*x5790*x5791))+(((-1.0)*x5788*x5791))+((x5788*x5789))),-1);
if(!x5793.valid){
continue;
}
if( IKabs(((x5792.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5793.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5792.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5793.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5792.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5793.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5794=IKsin(j1);
IkReal x5795=IKcos(j1);
IkReal x5796=((0.3)*cj3);
IkReal x5797=((0.045)*cj3);
IkReal x5798=(gconst79*px);
IkReal x5799=(gconst78*py);
IkReal x5800=(sj3*x5794);
IkReal x5801=(sj3*x5795);
IkReal x5802=((0.09)*x5795);
IkReal x5803=((1.1)*x5794);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5796))+((x5794*x5799))+((x5794*x5798)));
evalcond[1]=((0.045)+(((-1.0)*x5797))+((x5795*x5799))+((x5795*x5798))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x5798*x5802))+((x5799*x5803))+(((-1.0)*pp))+(((-1.0)*x5799*x5802))+((x5798*x5803)));
evalcond[3]=((((0.138057984353428)*pp*x5794))+(((-0.310561435803037)*x5800))+(((-0.92038656235619)*pp*x5795))+(((-0.099746893695352)*x5794))+(((-0.185020708697653)*x5795))+(((0.0254095720202485)*x5801)));
evalcond[4]=(((x5794*x5796))+(((-0.3)*x5801))+(((0.045)*x5800))+((x5795*x5797))+(((0.55)*x5794))+(((-1.0)*x5798))+(((-1.0)*x5799))+(((-0.045)*x5795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5804 = IKatan2WithCheck((gconst89*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst89*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5804.valid){
continue;
}
j1array[0]=x5804.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5805=IKsin(j1);
IkReal x5806=IKcos(j1);
IkReal x5807=((0.3)*cj3);
IkReal x5808=((0.045)*cj3);
IkReal x5809=(gconst79*px);
IkReal x5810=(gconst78*py);
IkReal x5811=(sj3*x5805);
IkReal x5812=(sj3*x5806);
IkReal x5813=((0.09)*x5806);
IkReal x5814=((1.1)*x5805);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x5805*x5810))+((x5805*x5809))+(((-1.0)*x5807)));
evalcond[1]=((0.045)+((x5806*x5810))+((x5806*x5809))+(((-1.0)*x5808))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x5810*x5814))+(((-1.0)*x5810*x5813))+((x5809*x5814))+(((-1.0)*pp))+(((-1.0)*x5809*x5813)));
evalcond[3]=((((-0.099746893695352)*x5805))+(((-0.92038656235619)*pp*x5806))+(((0.0254095720202485)*x5812))+(((-0.185020708697653)*x5806))+(((0.138057984353428)*pp*x5805))+(((-0.310561435803037)*x5811)));
evalcond[4]=((((-1.0)*x5810))+(((-0.3)*x5812))+(((-0.045)*x5806))+(((0.55)*x5805))+((x5805*x5807))+((x5806*x5808))+(((0.045)*x5811))+(((-1.0)*x5809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst80;
CheckValue<IkReal> x5815 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5815.valid){
continue;
}
gconst80=((-1.0)*(x5815.value));
IkReal gconst81;
gconst81=IKsin(gconst80);
IkReal gconst82;
gconst82=IKcos(gconst80);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst80))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst90;
gconst90=IKsign((((gconst82*px))+((gconst81*py))));
dummyeval[0]=(((gconst82*px))+((gconst81*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5816=(gconst82*px);
IkReal x5817=((36.2220411120167)*pp);
IkReal x5818=(gconst81*py);
dummyeval[0]=(x5818+x5816);
dummyeval[1]=((((-7.28153581454315)*x5818))+(((-7.28153581454315)*x5816))+(((-1.0)*x5817*x5818))+(((-1.0)*x5816*x5817))+((sj3*x5818))+((sj3*x5816)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5819=(gconst82*px);
IkReal x5820=(gconst81*py);
IkReal x5821=((1.3840830449827)*pp);
IkReal x5822=((3.11349480968858)*sj3);
dummyeval[0]=((((-1.0)*x5819))+((x5820*x5821))+(((-1.0)*x5820*x5822))+((x5819*x5821))+(((-1.0)*x5819*x5822))+(((-1.0)*x5820)));
dummyeval[1]=(x5820+x5819);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5824 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5824.valid){
continue;
}
IkReal x5823=x5824.value;
j1array[0]=((-1.0)*x5823);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5823)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5825=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x5825))+(((-0.1275)*x5825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5826=(gconst82*px);
IkReal x5827=(gconst81*py);
IkReal x5828=((0.138057984353428)*pp);
IkReal x5829=((0.310561435803037)*sj3);
IkReal x5830=((0.0414173953060285)*pp);
CheckValue<IkReal> x5831=IKPowWithIntegerCheck(((((-0.099746893695352)*x5826))+(((-0.099746893695352)*x5827))+(((-1.0)*x5827*x5829))+((x5827*x5828))+((x5826*x5828))+(((-1.0)*x5826*x5829))),-1);
if(!x5831.valid){
continue;
}
CheckValue<IkReal> x5832=IKPowWithIntegerCheck((x5827+x5826),-1);
if(!x5832.valid){
continue;
}
if( IKabs(((x5831.value)*(((-0.00832593189139439)+(((-1.0)*x5830))+((cj3*x5830))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5832.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5831.value)*(((-0.00832593189139439)+(((-1.0)*x5830))+((cj3*x5830))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5832.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5831.value)*(((-0.00832593189139439)+(((-1.0)*x5830))+((cj3*x5830))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5832.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5833=IKsin(j1);
IkReal x5834=IKcos(j1);
IkReal x5835=((0.3)*cj3);
IkReal x5836=((0.045)*cj3);
IkReal x5837=(gconst82*px);
IkReal x5838=(gconst81*py);
IkReal x5839=(sj3*x5833);
IkReal x5840=(sj3*x5834);
IkReal x5841=((1.1)*x5833);
IkReal x5842=((0.09)*x5834);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5835))+((x5833*x5838))+((x5833*x5837)));
evalcond[1]=((0.045)+(((-1.0)*x5836))+((x5834*x5837))+((x5834*x5838))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x5837*x5842))+((x5837*x5841))+(((-1.0)*pp))+(((-1.0)*x5838*x5842))+((x5838*x5841)));
evalcond[3]=((((-0.185020708697653)*x5834))+(((0.138057984353428)*pp*x5833))+(((0.0254095720202485)*x5840))+(((-0.099746893695352)*x5833))+(((-0.310561435803037)*x5839))+(((-0.92038656235619)*pp*x5834)));
evalcond[4]=((((-0.3)*x5840))+((x5834*x5836))+(((0.55)*x5833))+((x5833*x5835))+(((-0.045)*x5834))+(((0.045)*x5839))+(((-1.0)*x5838))+(((-1.0)*x5837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5843=(gconst82*px);
IkReal x5844=(gconst81*py);
IkReal x5845=((0.92038656235619)*pp);
IkReal x5846=((0.0254095720202485)*sj3);
CheckValue<IkReal> x5847=IKPowWithIntegerCheck((x5844+x5843),-1);
if(!x5847.valid){
continue;
}
CheckValue<IkReal> x5848=IKPowWithIntegerCheck((((x5844*x5846))+(((-0.185020708697653)*x5843))+(((-0.185020708697653)*x5844))+((x5843*x5846))+(((-1.0)*x5844*x5845))+(((-1.0)*x5843*x5845))),-1);
if(!x5848.valid){
continue;
}
if( IKabs(((x5847.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5848.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5847.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5848.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5847.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5848.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5849=IKsin(j1);
IkReal x5850=IKcos(j1);
IkReal x5851=((0.3)*cj3);
IkReal x5852=((0.045)*cj3);
IkReal x5853=(gconst82*px);
IkReal x5854=(gconst81*py);
IkReal x5855=(sj3*x5849);
IkReal x5856=(sj3*x5850);
IkReal x5857=((1.1)*x5849);
IkReal x5858=((0.09)*x5850);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5851))+((x5849*x5853))+((x5849*x5854)));
evalcond[1]=((0.045)+(((-1.0)*x5852))+((x5850*x5853))+((x5850*x5854))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x5853*x5858))+((x5854*x5857))+(((-1.0)*pp))+(((-1.0)*x5854*x5858))+((x5853*x5857)));
evalcond[3]=((((-0.185020708697653)*x5850))+(((0.0254095720202485)*x5856))+(((0.138057984353428)*pp*x5849))+(((-0.099746893695352)*x5849))+(((-0.310561435803037)*x5855))+(((-0.92038656235619)*pp*x5850)));
evalcond[4]=((((0.045)*x5855))+(((-0.045)*x5850))+(((-1.0)*x5853))+(((-1.0)*x5854))+(((0.55)*x5849))+((x5850*x5852))+(((-0.3)*x5856))+((x5849*x5851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5859 = IKatan2WithCheck((gconst90*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst90*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5859.valid){
continue;
}
j1array[0]=x5859.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5860=IKsin(j1);
IkReal x5861=IKcos(j1);
IkReal x5862=((0.3)*cj3);
IkReal x5863=((0.045)*cj3);
IkReal x5864=(gconst82*px);
IkReal x5865=(gconst81*py);
IkReal x5866=(sj3*x5860);
IkReal x5867=(sj3*x5861);
IkReal x5868=((1.1)*x5860);
IkReal x5869=((0.09)*x5861);
evalcond[0]=((-0.55)+((x5860*x5865))+((x5860*x5864))+(((-0.045)*sj3))+(((-1.0)*x5862)));
evalcond[1]=((0.045)+((x5861*x5865))+((x5861*x5864))+(((-1.0)*x5863))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x5864*x5869))+((x5865*x5868))+((x5864*x5868))+(((-1.0)*x5865*x5869)));
evalcond[3]=((((-0.310561435803037)*x5866))+(((-0.185020708697653)*x5861))+(((-0.92038656235619)*pp*x5861))+(((0.0254095720202485)*x5867))+(((0.138057984353428)*pp*x5860))+(((-0.099746893695352)*x5860)));
evalcond[4]=(((x5860*x5862))+(((-1.0)*x5865))+(((-1.0)*x5864))+((x5861*x5863))+(((-0.045)*x5861))+(((-0.3)*x5867))+(((0.045)*x5866))+(((0.55)*x5860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst83;
CheckValue<IkReal> x5870 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5870.valid){
continue;
}
gconst83=((3.14159265358979)+(((-1.0)*(x5870.value))));
IkReal gconst84;
gconst84=IKsin(gconst83);
IkReal gconst85;
gconst85=IKcos(gconst83);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst83))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst91;
gconst91=IKsign((((gconst85*px))+((gconst84*py))));
dummyeval[0]=(((gconst85*px))+((gconst84*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5871=(gconst85*px);
IkReal x5872=(gconst84*py);
IkReal x5873=((36.2220411120167)*pp);
dummyeval[0]=(x5872+x5871);
dummyeval[1]=((((-7.28153581454315)*x5871))+(((-7.28153581454315)*x5872))+(((-1.0)*x5872*x5873))+(((-1.0)*x5871*x5873))+((sj3*x5871))+((sj3*x5872)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5874=(gconst84*py);
IkReal x5875=((1.3840830449827)*pp);
IkReal x5876=(gconst85*px);
IkReal x5877=((3.11349480968858)*sj3);
dummyeval[0]=((((-1.0)*x5874*x5877))+((x5874*x5875))+((x5875*x5876))+(((-1.0)*x5876*x5877))+(((-1.0)*x5876))+(((-1.0)*x5874)));
dummyeval[1]=(x5876+x5874);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5879 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5879.valid){
continue;
}
IkReal x5878=x5879.value;
j1array[0]=((-1.0)*x5878);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5878)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5880=IKcos(j1);
evalcond[0]=((((-0.1275)*x5880))+(((-0.30675)*sj3*x5880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5881=(gconst85*px);
IkReal x5882=((0.138057984353428)*pp);
IkReal x5883=((0.310561435803037)*sj3);
IkReal x5884=((0.0414173953060285)*pp);
IkReal x5885=(gconst84*py);
CheckValue<IkReal> x5886=IKPowWithIntegerCheck(((((-1.0)*x5883*x5885))+(((-0.099746893695352)*x5885))+(((-0.099746893695352)*x5881))+((x5881*x5882))+(((-1.0)*x5881*x5883))+((x5882*x5885))),-1);
if(!x5886.valid){
continue;
}
CheckValue<IkReal> x5887=IKPowWithIntegerCheck((x5881+x5885),-1);
if(!x5887.valid){
continue;
}
if( IKabs(((x5886.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5884))+(((-1.0)*x5884))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5887.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5886.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5884))+(((-1.0)*x5884))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5887.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5886.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x5884))+(((-1.0)*x5884))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x5887.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5888=IKsin(j1);
IkReal x5889=IKcos(j1);
IkReal x5890=((0.3)*cj3);
IkReal x5891=((0.045)*cj3);
IkReal x5892=(gconst85*px);
IkReal x5893=(gconst84*py);
IkReal x5894=(sj3*x5888);
IkReal x5895=(sj3*x5889);
IkReal x5896=((0.09)*x5889);
IkReal x5897=((1.1)*x5888);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5890))+((x5888*x5892))+((x5888*x5893)));
evalcond[1]=((0.045)+((x5889*x5892))+((x5889*x5893))+(((-1.0)*x5891))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x5893*x5896))+(((-1.0)*x5892*x5896))+(((-1.0)*pp))+((x5893*x5897))+((x5892*x5897)));
evalcond[3]=((((-0.185020708697653)*x5889))+(((-0.099746893695352)*x5888))+(((0.138057984353428)*pp*x5888))+(((0.0254095720202485)*x5895))+(((-0.310561435803037)*x5894))+(((-0.92038656235619)*pp*x5889)));
evalcond[4]=((((0.55)*x5888))+(((-0.3)*x5895))+(((-1.0)*x5892))+(((-1.0)*x5893))+((x5889*x5891))+(((-0.045)*x5889))+((x5888*x5890))+(((0.045)*x5894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5898=(gconst85*px);
IkReal x5899=((0.92038656235619)*pp);
IkReal x5900=((0.0254095720202485)*sj3);
IkReal x5901=(gconst84*py);
CheckValue<IkReal> x5902=IKPowWithIntegerCheck((x5901+x5898),-1);
if(!x5902.valid){
continue;
}
CheckValue<IkReal> x5903=IKPowWithIntegerCheck(((((-1.0)*x5898*x5899))+((x5898*x5900))+(((-0.185020708697653)*x5898))+(((-0.185020708697653)*x5901))+(((-1.0)*x5899*x5901))+((x5900*x5901))),-1);
if(!x5903.valid){
continue;
}
if( IKabs(((x5902.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5903.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5902.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5903.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5902.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5903.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5904=IKsin(j1);
IkReal x5905=IKcos(j1);
IkReal x5906=((0.3)*cj3);
IkReal x5907=((0.045)*cj3);
IkReal x5908=(gconst85*px);
IkReal x5909=(gconst84*py);
IkReal x5910=(sj3*x5904);
IkReal x5911=(sj3*x5905);
IkReal x5912=((0.09)*x5905);
IkReal x5913=((1.1)*x5904);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x5904*x5909))+((x5904*x5908))+(((-1.0)*x5906)));
evalcond[1]=((0.045)+((x5905*x5909))+((x5905*x5908))+(((0.3)*sj3))+(((-1.0)*x5907)));
evalcond[2]=((-0.2125)+((x5909*x5913))+((x5908*x5913))+(((-1.0)*pp))+(((-1.0)*x5909*x5912))+(((-1.0)*x5908*x5912)));
evalcond[3]=((((0.138057984353428)*pp*x5904))+(((-0.310561435803037)*x5910))+(((-0.92038656235619)*pp*x5905))+(((-0.185020708697653)*x5905))+(((-0.099746893695352)*x5904))+(((0.0254095720202485)*x5911)));
evalcond[4]=((((0.045)*x5910))+(((-0.3)*x5911))+((x5905*x5907))+(((0.55)*x5904))+(((-0.045)*x5905))+((x5904*x5906))+(((-1.0)*x5908))+(((-1.0)*x5909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5914 = IKatan2WithCheck((gconst91*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst91*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5914.valid){
continue;
}
j1array[0]=x5914.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5915=IKsin(j1);
IkReal x5916=IKcos(j1);
IkReal x5917=((0.3)*cj3);
IkReal x5918=((0.045)*cj3);
IkReal x5919=(gconst85*px);
IkReal x5920=(gconst84*py);
IkReal x5921=(sj3*x5915);
IkReal x5922=(sj3*x5916);
IkReal x5923=((0.09)*x5916);
IkReal x5924=((1.1)*x5915);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x5915*x5919))+(((-1.0)*x5917))+((x5915*x5920)));
evalcond[1]=((0.045)+((x5916*x5919))+((x5916*x5920))+(((0.3)*sj3))+(((-1.0)*x5918)));
evalcond[2]=((-0.2125)+((x5919*x5924))+((x5920*x5924))+(((-1.0)*x5920*x5923))+(((-1.0)*pp))+(((-1.0)*x5919*x5923)));
evalcond[3]=((((0.0254095720202485)*x5922))+(((-0.310561435803037)*x5921))+(((0.138057984353428)*pp*x5915))+(((-0.92038656235619)*pp*x5916))+(((-0.185020708697653)*x5916))+(((-0.099746893695352)*x5915)));
evalcond[4]=((((-0.3)*x5922))+((x5916*x5918))+((x5915*x5917))+(((-1.0)*x5920))+(((0.045)*x5921))+(((0.55)*x5915))+(((-0.045)*x5916))+(((-1.0)*x5919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5926 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5926.valid){
continue;
}
IkReal x5925=x5926.value;
j1array[0]=((-1.0)*x5925);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5925)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5927=IKcos(j1);
evalcond[0]=((((-0.1275)*x5927))+(((-0.30675)*sj3*x5927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5929 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5929.valid){
continue;
}
IkReal x5928=x5929.value;
j1array[0]=((-1.0)*x5928);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5928)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5930=IKcos(j1);
evalcond[0]=((((-0.1275)*x5930))+(((-0.30675)*sj3*x5930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5932 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
IkReal x5931=x5932.value;
j1array[0]=((-1.0)*x5931);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5931)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5933=IKcos(j1);
evalcond[0]=((((-0.1275)*x5933))+(((-0.30675)*sj3*x5933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5935 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
IkReal x5934=x5935.value;
j1array[0]=((-1.0)*x5934);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5934)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5936=IKcos(j1);
evalcond[0]=((((-0.1275)*x5936))+(((-0.30675)*sj3*x5936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((IKabs(((0.0105614358030373)+(((0.0254095720202485)*sj3)))))+(IKabs(((-0.129084215370456)+(((-0.310561435803037)*sj3))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5938 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5938.valid){
continue;
}
IkReal x5937=x5938.value;
j1array[0]=((-1.0)*x5937);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5937)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5939=IKcos(j1);
evalcond[0]=((((-0.1275)*x5939))+(((-0.30675)*sj3*x5939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5940=(py*sj0);
IkReal x5941=((0.310561435803037)*sj3);
IkReal x5942=((0.0414173953060285)*pp);
IkReal x5943=(cj0*px);
IkReal x5944=((0.138057984353428)*pp);
CheckValue<IkReal> x5945=IKPowWithIntegerCheck((((x5943*x5944))+(((-1.0)*x5941*x5943))+(((-1.0)*x5940*x5941))+((x5940*x5944))+(((-0.099746893695352)*x5943))+(((-0.099746893695352)*x5940))),-1);
if(!x5945.valid){
continue;
}
CheckValue<IkReal> x5946=IKPowWithIntegerCheck((x5943+x5940),-1);
if(!x5946.valid){
continue;
}
if( IKabs(((x5945.value)*(((-0.00832593189139439)+(((-1.0)*x5942))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+((cj3*x5942))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5946.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5945.value)*(((-0.00832593189139439)+(((-1.0)*x5942))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+((cj3*x5942))+(((0.00832593189139439)*cj3))))))+IKsqr(((x5946.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5945.value)*(((-0.00832593189139439)+(((-1.0)*x5942))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+((cj3*x5942))+(((0.00832593189139439)*cj3))))), ((x5946.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5947=IKsin(j1);
IkReal x5948=IKcos(j1);
IkReal x5949=((0.045)*sj3);
IkReal x5950=((0.3)*cj3);
IkReal x5951=((0.045)*cj3);
IkReal x5952=(cj0*px);
IkReal x5953=(py*sj0);
IkReal x5954=(sj3*x5948);
IkReal x5955=((0.09)*x5948);
IkReal x5956=((1.1)*x5947);
evalcond[0]=((-0.55)+((x5947*x5952))+((x5947*x5953))+(((-1.0)*x5949))+(((-1.0)*x5950)));
evalcond[1]=((0.045)+((x5948*x5953))+((x5948*x5952))+(((0.3)*sj3))+(((-1.0)*x5951)));
evalcond[2]=((-0.2125)+((x5952*x5956))+((x5953*x5956))+(((-1.0)*pp))+(((-1.0)*x5952*x5955))+(((-1.0)*x5953*x5955)));
evalcond[3]=((((0.138057984353428)*pp*x5947))+(((-0.185020708697653)*x5948))+(((-0.310561435803037)*sj3*x5947))+(((-0.92038656235619)*pp*x5948))+(((0.0254095720202485)*x5954))+(((-0.099746893695352)*x5947)));
evalcond[4]=(((x5947*x5950))+((x5948*x5951))+((x5947*x5949))+(((-1.0)*x5953))+(((-1.0)*x5952))+(((-0.3)*x5954))+(((-0.045)*x5948))+(((0.55)*x5947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5957=(cj0*px);
IkReal x5958=(py*sj0);
IkReal x5959=((0.92038656235619)*pp);
IkReal x5960=((0.0254095720202485)*sj3);
CheckValue<IkReal> x5961=IKPowWithIntegerCheck((x5957+x5958),-1);
if(!x5961.valid){
continue;
}
CheckValue<IkReal> x5962=IKPowWithIntegerCheck(((((-1.0)*x5958*x5959))+(((-1.0)*x5957*x5959))+((x5957*x5960))+((x5958*x5960))+(((-0.185020708697653)*x5957))+(((-0.185020708697653)*x5958))),-1);
if(!x5962.valid){
continue;
}
if( IKabs(((x5961.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5962.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5961.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x5962.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5961.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x5962.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5963=IKsin(j1);
IkReal x5964=IKcos(j1);
IkReal x5965=((0.045)*sj3);
IkReal x5966=((0.3)*cj3);
IkReal x5967=((0.045)*cj3);
IkReal x5968=(cj0*px);
IkReal x5969=(py*sj0);
IkReal x5970=(sj3*x5964);
IkReal x5971=((0.09)*x5964);
IkReal x5972=((1.1)*x5963);
evalcond[0]=((-0.55)+((x5963*x5969))+((x5963*x5968))+(((-1.0)*x5966))+(((-1.0)*x5965)));
evalcond[1]=((0.045)+((x5964*x5968))+((x5964*x5969))+(((-1.0)*x5967))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x5969*x5972))+((x5968*x5972))+(((-1.0)*pp))+(((-1.0)*x5968*x5971))+(((-1.0)*x5969*x5971)));
evalcond[3]=((((-0.92038656235619)*pp*x5964))+(((-0.099746893695352)*x5963))+(((0.138057984353428)*pp*x5963))+(((-0.310561435803037)*sj3*x5963))+(((-0.185020708697653)*x5964))+(((0.0254095720202485)*x5970)));
evalcond[4]=((((-1.0)*x5968))+(((-1.0)*x5969))+(((-0.045)*x5964))+(((-0.3)*x5970))+((x5964*x5967))+((x5963*x5966))+((x5963*x5965))+(((0.55)*x5963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5973 = IKatan2WithCheck((gconst67*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst67*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5973.valid){
continue;
}
j1array[0]=x5973.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5974=IKsin(j1);
IkReal x5975=IKcos(j1);
IkReal x5976=((0.045)*sj3);
IkReal x5977=((0.3)*cj3);
IkReal x5978=((0.045)*cj3);
IkReal x5979=(cj0*px);
IkReal x5980=(py*sj0);
IkReal x5981=(sj3*x5975);
IkReal x5982=((0.09)*x5975);
IkReal x5983=((1.1)*x5974);
evalcond[0]=((-0.55)+(((-1.0)*x5976))+(((-1.0)*x5977))+((x5974*x5980))+((x5974*x5979)));
evalcond[1]=((0.045)+(((-1.0)*x5978))+((x5975*x5980))+(((0.3)*sj3))+((x5975*x5979)));
evalcond[2]=((-0.2125)+(((-1.0)*x5980*x5982))+(((-1.0)*x5979*x5982))+((x5979*x5983))+(((-1.0)*pp))+((x5980*x5983)));
evalcond[3]=((((-0.099746893695352)*x5974))+(((-0.185020708697653)*x5975))+(((-0.310561435803037)*sj3*x5974))+(((0.0254095720202485)*x5981))+(((-0.92038656235619)*pp*x5975))+(((0.138057984353428)*pp*x5974)));
evalcond[4]=((((-1.0)*x5979))+(((-1.0)*x5980))+(((-0.3)*x5981))+((x5974*x5977))+((x5974*x5976))+(((0.55)*x5974))+((x5975*x5978))+(((-0.045)*x5975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5984=(cj2*pz);
IkReal x5985=((1.0)*cj0);
IkReal x5986=(cj0*px);
IkReal x5987=(py*sj0);
IkReal x5988=((0.55)*sj2);
IkReal x5989=(cj2*sj0);
IkReal x5990=((0.3)*cj3*sj2);
IkReal x5991=(cj2*px*py);
IkReal x5992=((0.045)*sj2*sj3);
CheckValue<IkReal> x5993 = IKatan2WithCheck((gconst1*(((((-1.0)*py*x5984*x5985))+((x5987*x5990))+((x5987*x5992))+((x5986*x5990))+((x5986*x5992))+((x5987*x5988))+((x5986*x5988))+((px*sj0*x5984))))),(gconst1*((((pz*x5992))+((pz*x5990))+(((-1.0)*px*x5987*x5989))+((cj0*cj2*py*x5987))+((cj0*cj2*py*x5986))+(((-1.0)*x5985*x5989*(px*px)))+((pz*x5988))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5993.valid){
continue;
}
j1array[0]=x5993.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5994=IKsin(j1);
IkReal x5995=IKcos(j1);
IkReal x5996=(px*sj2);
IkReal x5997=((0.3)*sj3);
IkReal x5998=((0.09)*sj0);
IkReal x5999=(cj2*px);
IkReal x6000=((0.045)*cj3);
IkReal x6001=((0.045)*cj2);
IkReal x6002=(py*sj0);
IkReal x6003=((0.045)*sj3);
IkReal x6004=((1.0)*cj0);
IkReal x6005=((0.3)*cj3);
IkReal x6006=(py*sj2);
IkReal x6007=(cj0*x5995);
IkReal x6008=(cj3*x5994);
IkReal x6009=(cj2*x5995);
IkReal x6010=(cj2*x5994);
IkReal x6011=(pz*x5995);
IkReal x6012=(cj0*px*x5994);
evalcond[0]=((-0.55)+(((-1.0)*x6005))+(((-1.0)*x6003))+x6011+x6012+((x5994*x6002)));
evalcond[1]=(((sj2*x5995*x6002))+((sj0*x5999))+(((-1.0)*pz*sj2*x5994))+(((-1.0)*cj2*py*x6004))+((x5996*x6007)));
evalcond[2]=((((-0.55)*x5995))+((x5994*x6001))+pz+((x5997*x6010))+(((-1.0)*x5995*x6003))+(((-1.0)*x5995*x6005))+(((-1.0)*x6000*x6010)));
evalcond[3]=((0.045)+(((-1.0)*x6000))+((sj0*x5996))+((pz*x6010))+(((-1.0)*x6004*x6006))+(((-1.0)*x5995*x5999*x6004))+x5997+(((-1.0)*x6002*x6009)));
evalcond[4]=(((x5994*x6003))+((x5994*x6005))+(((-1.0)*px*x6004))+((x5995*x6001))+(((0.55)*x5994))+(((-1.0)*x6000*x6009))+((x5997*x6009))+(((-1.0)*x6002)));
evalcond[5]=((-0.2125)+(((0.09)*cj0*x6006))+(((-1.0)*x5996*x5998))+(((1.1)*x6011))+(((1.1)*x6012))+(((0.09)*x5999*x6007))+(((-1.0)*pp))+(((1.1)*x5994*x6002))+(((-0.09)*pz*x6010))+((py*x5998*x6009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6013=cj3*cj3;
IkReal x6014=sj3*sj3;
IkReal x6015=(cj2*sj3);
IkReal x6016=((0.0135)*cj2);
IkReal x6017=((1.0)*pz);
CheckValue<IkReal> x6018 = IKatan2WithCheck((gconst0*(((-0.3025)+(((-0.0495)*sj3))+(((-0.002025)*x6014))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.09)*x6013))+(((-0.33)*cj3))))),(gconst0*(((((-0.167025)*x6015))+(((-0.087975)*cj3*x6015))+(((-1.0)*py*sj0*x6017))+(((-0.02475)*cj2))+(((-1.0)*cj0*px*x6017))+((x6013*x6016))+(((0.01125)*cj2*cj3))+(((-1.0)*x6014*x6016))))),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
j1array[0]=x6018.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x6019=IKsin(j1);
IkReal x6020=IKcos(j1);
IkReal x6021=(px*sj2);
IkReal x6022=((0.3)*sj3);
IkReal x6023=((0.09)*sj0);
IkReal x6024=(cj2*px);
IkReal x6025=((0.045)*cj3);
IkReal x6026=((0.045)*cj2);
IkReal x6027=(py*sj0);
IkReal x6028=((0.045)*sj3);
IkReal x6029=((1.0)*cj0);
IkReal x6030=((0.3)*cj3);
IkReal x6031=(py*sj2);
IkReal x6032=(cj0*x6020);
IkReal x6033=(cj3*x6019);
IkReal x6034=(cj2*x6020);
IkReal x6035=(cj2*x6019);
IkReal x6036=(pz*x6020);
IkReal x6037=(cj0*px*x6019);
evalcond[0]=((-0.55)+(((-1.0)*x6030))+x6037+x6036+(((-1.0)*x6028))+((x6019*x6027)));
evalcond[1]=(((sj0*x6024))+(((-1.0)*pz*sj2*x6019))+((sj2*x6020*x6027))+((x6021*x6032))+(((-1.0)*cj2*py*x6029)));
evalcond[2]=((((-1.0)*x6020*x6028))+((x6022*x6035))+(((-1.0)*x6025*x6035))+((x6019*x6026))+pz+(((-1.0)*x6020*x6030))+(((-0.55)*x6020)));
evalcond[3]=((0.045)+(((-1.0)*x6029*x6031))+((sj0*x6021))+x6022+(((-1.0)*x6020*x6024*x6029))+(((-1.0)*x6025))+((pz*x6035))+(((-1.0)*x6027*x6034)));
evalcond[4]=(((x6019*x6030))+((x6020*x6026))+(((0.55)*x6019))+((x6022*x6034))+(((-1.0)*x6027))+(((-1.0)*x6025*x6034))+((x6019*x6028))+(((-1.0)*px*x6029)));
evalcond[5]=((-0.2125)+(((0.09)*cj0*x6031))+((py*x6023*x6034))+(((-1.0)*x6021*x6023))+(((-1.0)*pp))+(((1.1)*x6037))+(((1.1)*x6036))+(((-0.09)*pz*x6035))+(((1.1)*x6019*x6027))+(((0.09)*x6024*x6032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x106=((1.0)*cj3);
IkReal x107=(sj0*sj2);
IkReal x108=(cj2*sj1);
IkReal x109=((1.0)*sj3);
IkReal x110=(cj1*cj2);
IkReal x111=(sj1*sj2);
IkReal x112=(cj0*sj2);
IkReal x113=((1.0)*cj1);
IkReal x114=(((cj3*x110))+(((-1.0)*sj1*x109)));
IkReal x115=((((-1.0)*x107*x113))+((cj0*cj2)));
IkReal x116=(((sj3*x110))+((cj3*sj1)));
IkReal x117=((((-1.0)*x108*x109))+((cj1*cj3)));
IkReal x118=(cj0*x114);
IkReal x119=((((-1.0)*cj1*x109))+(((-1.0)*x106*x108)));
IkReal x120=((((-1.0)*x112*x113))+(((-1.0)*cj2*sj0)));
IkReal x121=(((cj3*x112))+((sj0*x114)));
IkReal x122=((((-1.0)*x107*x109))+((cj0*x116)));
IkReal x123=(((sj0*x116))+((sj3*x112)));
IkReal x124=(x118+(((-1.0)*cj3*x107)));
new_r00=(((r20*x119))+((r00*(((((-1.0)*x106*x107))+x118))))+((r10*x121)));
new_r01=(((r01*x124))+((r21*x119))+((r11*x121)));
new_r02=(((r22*x119))+((r02*x124))+((r12*x121)));
new_r10=(((r10*x115))+((r00*x120))+((r20*x111)));
new_r11=(((r01*x120))+((r21*x111))+((r11*x115)));
new_r12=(((r22*x111))+((r02*x120))+((r12*x115)));
new_r20=(((r00*x122))+((r20*x117))+((r10*x123)));
new_r21=(((r01*x122))+((r21*x117))+((r11*x123)));
new_r22=(((r22*x117))+((r02*x122))+((r12*x123)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst186;
gconst186=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x126 = IKatan2WithCheck(new_r02,new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x126.valid){
continue;
}
IkReal x125=x126.value;
j4array[0]=((-1.0)*x125);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x125)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst196;
gconst196=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x127=((1.0)*new_r00);
CheckValue<IkReal> x128 = IKatan2WithCheck((gconst196*((((cj4*new_r01))+(((-1.0)*sj4*x127))))),(gconst196*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x127))))),IKFAST_ATAN2_MAGTHRESH);
if(!x128.valid){
continue;
}
j6array[0]=x128.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x129=IKcos(j6);
IkReal x130=IKsin(j6);
IkReal x131=((1.0)*sj4);
IkReal x132=((1.0)*x130);
IkReal x133=(sj4*x129);
IkReal x134=((1.0)*x129);
IkReal x135=(cj4*x132);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x129);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x132)));
evalcond[2]=(((sj4*x130))+new_r00+((cj4*x129)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x131))+(((-1.0)*x132)));
evalcond[4]=((((-1.0)*new_r01*x131))+((cj4*new_r11))+(((-1.0)*x134)));
evalcond[5]=(x133+(((-1.0)*x135))+new_r01);
evalcond[6]=(x133+(((-1.0)*x135))+new_r10);
evalcond[7]=(new_r11+(((-1.0)*cj4*x134))+(((-1.0)*x130*x131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x136 = IKatan2WithCheck((gconst186*new_r12),(gconst186*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x136.valid){
continue;
}
j4array[0]=x136.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x137=IKcos(j4);
IkReal x138=IKsin(j4);
IkReal x139=((1.0)*sj5);
IkReal x140=((1.0)*cj5);
IkReal x141=(new_r12*x138);
IkReal x142=(new_r02*x137);
evalcond[0]=((((-1.0)*x137*x139))+new_r02);
evalcond[1]=((((-1.0)*x138*x139))+new_r12);
evalcond[2]=(((new_r12*x137))+(((-1.0)*new_r02*x138)));
evalcond[3]=(x141+x142+(((-1.0)*x139)));
evalcond[4]=(((cj5*x141))+((cj5*x142))+(((-1.0)*new_r22*x139)));
evalcond[5]=((((-1.0)*new_r10*x138*x139))+(((-1.0)*new_r20*x140))+(((-1.0)*new_r00*x137*x139)));
evalcond[6]=((((-1.0)*new_r11*x138*x139))+(((-1.0)*new_r21*x140))+(((-1.0)*new_r01*x137*x139)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x140))+(((-1.0)*x139*x141))+(((-1.0)*x139*x142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst189;
gconst189=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj4;
dummyeval[1]=cj5;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x143=(new_r22+(((-1.0)*cj5)));
IkReal x144=((((-1.0)*sj5))+new_r12);
IkReal x145=((1.0)*cj5);
IkReal x146=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x143;
evalcond[2]=x143;
evalcond[3]=new_r02;
evalcond[4]=x144;
evalcond[5]=x144;
evalcond[6]=(((cj5*new_r12))+(((-1.0)*new_r22*x146)));
evalcond[7]=((((-1.0)*new_r20*x145))+(((-1.0)*new_r10*x146)));
evalcond[8]=((((-1.0)*new_r21*x145))+(((-1.0)*new_r11*x146)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x145))+(((-1.0)*new_r12*x146)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst190;
gconst190=IKsign(new_r12);
dummyeval[0]=new_r12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=new_r22;
dummyeval[1]=new_r12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x147=IKPowWithIntegerCheck(new_r22,-1);
if(!x147.valid){
continue;
}
CheckValue<IkReal> x148=IKPowWithIntegerCheck(new_r12,-1);
if(!x148.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x147.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x148.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x147.value)))+IKsqr(((-1.0)*new_r20*(x148.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11*(x147.value)), ((-1.0)*new_r20*(x148.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x149=IKsin(j6);
IkReal x150=IKcos(j6);
IkReal x151=((1.0)*new_r12);
IkReal x152=((1.0)*x150);
evalcond[0]=(((new_r12*x150))+new_r20);
evalcond[1]=(((new_r22*x149))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x149*x151)));
evalcond[3]=((((-1.0)*new_r22*x152))+new_r10);
evalcond[4]=((((-1.0)*x149))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x152))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x151))+x149+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x151))+(((-1.0)*x152))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x153 = IKatan2WithCheck((gconst190*new_r21),((-1.0)*gconst190*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x153.valid){
continue;
}
j6array[0]=x153.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x154=IKsin(j6);
IkReal x155=IKcos(j6);
IkReal x156=((1.0)*new_r12);
IkReal x157=((1.0)*x155);
evalcond[0]=(((new_r12*x155))+new_r20);
evalcond[1]=(((new_r22*x154))+new_r11);
evalcond[2]=((((-1.0)*x154*x156))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x157))+new_r10);
evalcond[4]=((((-1.0)*x154))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x157))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x156))+x154+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x156))+(((-1.0)*x157))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x158=(new_r22+(((-1.0)*cj5)));
IkReal x159=((1.0)*cj5);
IkReal x160=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x158;
evalcond[2]=x158;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=((((-1.0)*x160))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r22*x160))+(((-1.0)*new_r12*x159)));
evalcond[7]=((((-1.0)*new_r20*x159))+((new_r10*sj5)));
evalcond[8]=(((new_r11*sj5))+(((-1.0)*new_r21*x159)));
evalcond[9]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x159)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x161=IKsin(j6);
IkReal x162=IKcos(j6);
IkReal x163=((1.0)*new_r22);
IkReal x164=((1.0)*x162);
evalcond[0]=(((new_r12*x161))+new_r21);
evalcond[1]=((((-1.0)*x161))+new_r00);
evalcond[2]=((((-1.0)*x164))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x164))+new_r20);
evalcond[4]=(((new_r22*x161))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x162*x163))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r11*x163))+x161+((new_r12*new_r21)));
evalcond[7]=((((-1.0)*x164))+(((-1.0)*new_r10*x163))+((new_r12*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x165=((1.0)*cj4);
IkReal x166=((1.0)*sj4);
IkReal x167=(((cj4*new_r12))+(((-1.0)*new_r02*x166)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x165))+new_r02);
evalcond[3]=((((-1.0)*x166))+new_r12);
evalcond[4]=x167;
evalcond[5]=x167;
evalcond[6]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[7]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[8]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[9]=((((-1.0)*new_r00*x165))+(((-1.0)*new_r10*x166)));
evalcond[10]=((((-1.0)*new_r11*x166))+(((-1.0)*new_r01*x165)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x165))+(((-1.0)*new_r12*x166)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x168=IKcos(j6);
IkReal x169=IKsin(j6);
IkReal x170=((1.0)*new_r12);
IkReal x171=((1.0)*x169);
IkReal x172=((1.0)*x168);
evalcond[0]=(x168+new_r20);
evalcond[1]=((((-1.0)*x171))+new_r21);
evalcond[2]=(((new_r12*x168))+new_r01);
evalcond[3]=(((new_r12*x169))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x172))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x171))+new_r10);
evalcond[6]=((((-1.0)*x171))+((new_r02*new_r10))+(((-1.0)*new_r00*x170)));
evalcond[7]=((((-1.0)*x172))+((new_r02*new_r11))+(((-1.0)*new_r01*x170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x173=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x174=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x175=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x176=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj4+new_r02);
evalcond[3]=(sj4+new_r12);
evalcond[4]=x173;
evalcond[5]=x173;
evalcond[6]=x176;
evalcond[7]=x175;
evalcond[8]=x174;
evalcond[9]=x174;
evalcond[10]=x175;
evalcond[11]=x176;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x177=IKcos(j6);
IkReal x178=IKsin(j6);
IkReal x179=((1.0)*new_r02);
IkReal x180=((1.0)*new_r12);
IkReal x181=((1.0)*x177);
evalcond[0]=(x178+new_r21);
evalcond[1]=((((-1.0)*x181))+new_r20);
evalcond[2]=(((new_r02*x177))+new_r11);
evalcond[3]=(((new_r02*x178))+new_r10);
evalcond[4]=((((-1.0)*x177*x180))+new_r01);
evalcond[5]=((((-1.0)*x178*x180))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x179))+(((-1.0)*x178))+((new_r00*new_r12)));
evalcond[7]=((((-1.0)*x181))+((new_r01*new_r12))+(((-1.0)*new_r11*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x182=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x183=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x182;
evalcond[7]=x182;
evalcond[8]=x183;
evalcond[9]=x183;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst191;
gconst191=IKsign(((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4)))));
dummyeval[0]=((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x184 = IKatan2WithCheck((gconst191*((((cj4*new_r01))+((new_r00*sj4))))),(gconst191*(((((-1.0)*cj4*new_r00))+((new_r01*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x184.valid){
continue;
}
j6array[0]=x184.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x185=IKsin(j6);
IkReal x186=IKcos(j6);
IkReal x187=((1.0)*sj4);
IkReal x188=((1.0)*x186);
IkReal x189=(sj4*x185);
IkReal x190=(sj4*x186);
IkReal x191=(cj4*x185);
IkReal x192=(cj4*x188);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x185);
evalcond[1]=(x191+x190+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x188)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x185))+(((-1.0)*new_r00*x187)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x188))+(((-1.0)*new_r01*x187)));
evalcond[5]=((((-1.0)*x192))+x189+new_r00);
evalcond[6]=((((-1.0)*x192))+x189+new_r11);
evalcond[7]=((((-1.0)*x186*x187))+(((-1.0)*x191))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x193=(cj4*new_r02);
IkReal x194=(new_r12*sj4);
IkReal x195=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x195;
evalcond[7]=x195;
evalcond[8]=(x193+x194);
evalcond[9]=((((-1.0)*x194))+(((-1.0)*x193)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst193;
gconst193=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x196=((1.0)*new_r00);
CheckValue<IkReal> x197 = IKatan2WithCheck((gconst193*((((cj4*new_r01))+(((-1.0)*sj4*x196))))),(gconst193*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x196))))),IKFAST_ATAN2_MAGTHRESH);
if(!x197.valid){
continue;
}
j6array[0]=x197.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x198=IKcos(j6);
IkReal x199=IKsin(j6);
IkReal x200=((1.0)*sj4);
IkReal x201=((1.0)*x199);
IkReal x202=(sj4*x198);
IkReal x203=((1.0)*x198);
IkReal x204=(cj4*x201);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x198);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x201)));
evalcond[2]=(((cj4*x198))+((sj4*x199))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x200))+((cj4*new_r10))+(((-1.0)*x201)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x203))+(((-1.0)*new_r01*x200)));
evalcond[5]=((((-1.0)*x204))+x202+new_r01);
evalcond[6]=((((-1.0)*x204))+x202+new_r10);
evalcond[7]=((((-1.0)*cj4*x203))+(((-1.0)*x199*x200))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x205=(new_r22+(((-1.0)*cj5)));
IkReal x206=((((-1.0)*sj5))+new_r02);
IkReal x207=((1.0)*cj5);
IkReal x208=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x205;
evalcond[2]=x205;
evalcond[3]=x206;
evalcond[4]=new_r12;
evalcond[5]=x206;
evalcond[6]=((((-1.0)*new_r22*x208))+((cj5*new_r02)));
evalcond[7]=((((-1.0)*new_r00*x208))+(((-1.0)*new_r20*x207)));
evalcond[8]=((((-1.0)*new_r21*x207))+(((-1.0)*new_r01*x208)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x207))+(((-1.0)*new_r02*x208)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x209=IKcos(j6);
IkReal x210=IKsin(j6);
IkReal x211=((1.0)*new_r02);
IkReal x212=((1.0)*x209);
evalcond[0]=(((new_r02*x209))+new_r20);
evalcond[1]=((((-1.0)*x210))+new_r10);
evalcond[2]=(new_r11+(((-1.0)*x212)));
evalcond[3]=(((new_r22*x210))+new_r01);
evalcond[4]=((((-1.0)*x210*x211))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x212))+new_r00);
evalcond[6]=(((new_r01*new_r22))+x210+(((-1.0)*new_r21*x211)));
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x211))+(((-1.0)*x212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x213=(new_r22+(((-1.0)*cj5)));
IkReal x214=((1.0)*cj5);
IkReal x215=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x213;
evalcond[2]=x213;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*new_r02))+(((-1.0)*x215)));
evalcond[6]=((((-1.0)*new_r02*x214))+(((-1.0)*new_r22*x215)));
evalcond[7]=(((new_r00*sj5))+(((-1.0)*new_r20*x214)));
evalcond[8]=(((new_r01*sj5))+(((-1.0)*new_r21*x214)));
evalcond[9]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x214)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst195;
gconst195=IKsign(new_r02);
dummyeval[0]=new_r02;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=new_r02;
dummyeval[1]=new_r22;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(new_r02,-1);
if(!x216.valid){
continue;
}
CheckValue<IkReal> x217=IKPowWithIntegerCheck(new_r22,-1);
if(!x217.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x216.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x217.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x216.value)))+IKsqr(((-1.0)*new_r00*(x217.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*(x216.value)), ((-1.0)*new_r00*(x217.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x218=IKsin(j6);
IkReal x219=IKcos(j6);
IkReal x220=((1.0)*new_r01);
IkReal x221=((1.0)*new_r00);
IkReal x222=((1.0)*x219);
evalcond[0]=(((new_r02*x218))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x222)));
evalcond[2]=((((-1.0)*x218))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x222)));
evalcond[4]=(((new_r22*x218))+(((-1.0)*x220)));
evalcond[5]=((((-1.0)*new_r22*x222))+(((-1.0)*x221)));
evalcond[6]=(x218+(((-1.0)*new_r22*x220))+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x221))+((new_r02*new_r20))+(((-1.0)*x222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x223 = IKatan2WithCheck(((-1.0)*gconst195*new_r21),(gconst195*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x223.valid){
continue;
}
j6array[0]=x223.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x224=IKsin(j6);
IkReal x225=IKcos(j6);
IkReal x226=((1.0)*new_r01);
IkReal x227=((1.0)*new_r00);
IkReal x228=((1.0)*x225);
evalcond[0]=(((new_r02*x224))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x228)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x224)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x228)));
evalcond[4]=(((new_r22*x224))+(((-1.0)*x226)));
evalcond[5]=((((-1.0)*new_r22*x228))+(((-1.0)*x227)));
evalcond[6]=(x224+(((-1.0)*new_r22*x226))+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x227))+((new_r02*new_r20))+(((-1.0)*x228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=((-1.0)+new_r02);
evalcond[3]=new_r12;
evalcond[4]=new_r01;
evalcond[5]=new_r00;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x229=IKcos(j6);
IkReal x230=((1.0)*(IKsin(j6)));
evalcond[0]=(x229+new_r20);
evalcond[1]=((((-1.0)*x230))+new_r21);
evalcond[2]=((((-1.0)*x230))+new_r10);
evalcond[3]=(new_r11+(((-1.0)*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=((1.0)+new_r02);
evalcond[3]=new_r12;
evalcond[4]=((-1.0)*new_r01);
evalcond[5]=((-1.0)*new_r00);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x231=IKcos(j6);
IkReal x232=((1.0)*(IKsin(j6)));
evalcond[0]=(x231+new_r20);
evalcond[1]=((((-1.0)*x232))+new_r21);
evalcond[2]=((((-1.0)*x232))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=((1.0)+new_r02);
evalcond[3]=new_r12;
evalcond[4]=new_r01;
evalcond[5]=new_r00;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x233=IKsin(j6);
IkReal x234=((1.0)*(IKcos(j6)));
evalcond[0]=(x233+new_r21);
evalcond[1]=((((-1.0)*x234))+new_r20);
evalcond[2]=(new_r10+(((-1.0)*x233)));
evalcond[3]=((((-1.0)*x234))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=((-1.0)+new_r02);
evalcond[3]=new_r12;
evalcond[4]=((-1.0)*new_r01);
evalcond[5]=((-1.0)*new_r00);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x235=IKsin(j6);
IkReal x236=((1.0)*(IKcos(j6)));
evalcond[0]=(x235+new_r21);
evalcond[1]=((((-1.0)*x236))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x235)));
evalcond[3]=((((-1.0)*x236))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959))))));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x237=IKsin(j6);
IkReal x238=((1.0)*(IKcos(j6)));
evalcond[0]=(x237+new_r01);
evalcond[1]=(new_r10+(((-1.0)*x237)));
evalcond[2]=((((-1.0)*x238))+new_r11);
evalcond[3]=((((-1.0)*x238))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959))))));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x239=IKsin(j6);
IkReal x240=((1.0)*(IKcos(j6)));
evalcond[0]=(x239+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*new_r10))+(((-1.0)*x239)));
evalcond[2]=((((-1.0)*new_r11))+(((-1.0)*x240)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959))))));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, ((-1.0)*new_r00));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x241=IKcos(j6);
IkReal x242=((1.0)*(IKsin(j6)));
evalcond[0]=(x241+new_r00);
evalcond[1]=((((-1.0)*x242))+new_r10);
evalcond[2]=((((-1.0)*x241))+new_r11);
evalcond[3]=((((-1.0)*x242))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959))))));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x243=IKcos(j6);
IkReal x244=((1.0)*(IKsin(j6)));
evalcond[0]=(x243+(((-1.0)*new_r00)));
evalcond[1]=((((-1.0)*new_r10))+(((-1.0)*x244)));
evalcond[2]=((((-1.0)*x243))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x246=IKPowWithIntegerCheck(sj5,-1);
if(!x246.valid){
continue;
}
IkReal x245=x246.value;
CheckValue<IkReal> x247=IKPowWithIntegerCheck(cj4,-1);
if(!x247.valid){
continue;
}
CheckValue<IkReal> x248=IKPowWithIntegerCheck(cj5,-1);
if(!x248.valid){
continue;
}
if( IKabs((x245*(x247.value)*(x248.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x245)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x245*(x247.value)*(x248.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x245))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x245*(x247.value)*(x248.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x245));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x249=IKsin(j6);
IkReal x250=IKcos(j6);
IkReal x251=((1.0)*sj5);
IkReal x252=((1.0)*sj4);
IkReal x253=(cj5*sj4);
IkReal x254=(cj4*new_r01);
IkReal x255=(cj4*new_r00);
IkReal x256=((1.0)*x250);
IkReal x257=(cj5*x249);
IkReal x258=((1.0)*x249);
evalcond[0]=(((sj5*x250))+new_r20);
evalcond[1]=((((-1.0)*x249*x251))+new_r21);
evalcond[2]=(((new_r11*sj4))+x254+x257);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x252))+(((-1.0)*x258)));
evalcond[4]=((((-1.0)*new_r01*x252))+((cj4*new_r11))+(((-1.0)*x256)));
evalcond[5]=(((sj4*x250))+new_r01+((cj4*x257)));
evalcond[6]=((((-1.0)*cj5*x256))+((new_r10*sj4))+x255);
evalcond[7]=((((-1.0)*cj4*cj5*x256))+new_r00+((sj4*x249)));
evalcond[8]=(((x249*x253))+(((-1.0)*cj4*x256))+new_r11);
evalcond[9]=((((-1.0)*cj4*x258))+(((-1.0)*cj5*x250*x252))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x251))+x249+((cj5*x254))+((new_r11*x253)));
evalcond[11]=(((new_r10*x253))+((cj5*x255))+(((-1.0)*new_r20*x251))+(((-1.0)*x256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x260=IKPowWithIntegerCheck(sj5,-1);
if(!x260.valid){
continue;
}
IkReal x259=x260.value;
CheckValue<IkReal> x261=IKPowWithIntegerCheck(sj4,-1);
if(!x261.valid){
continue;
}
if( IKabs((x259*(x261.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x259)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x259*(x261.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x259))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x259*(x261.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x259));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x262=IKsin(j6);
IkReal x263=IKcos(j6);
IkReal x264=((1.0)*sj5);
IkReal x265=((1.0)*sj4);
IkReal x266=(cj5*sj4);
IkReal x267=(cj4*new_r01);
IkReal x268=(cj4*new_r00);
IkReal x269=((1.0)*x263);
IkReal x270=(cj5*x262);
IkReal x271=((1.0)*x262);
evalcond[0]=(((sj5*x263))+new_r20);
evalcond[1]=((((-1.0)*x262*x264))+new_r21);
evalcond[2]=(((new_r11*sj4))+x267+x270);
evalcond[3]=((((-1.0)*new_r00*x265))+((cj4*new_r10))+(((-1.0)*x271)));
evalcond[4]=((((-1.0)*new_r01*x265))+((cj4*new_r11))+(((-1.0)*x269)));
evalcond[5]=(((cj4*x270))+new_r01+((sj4*x263)));
evalcond[6]=((((-1.0)*cj5*x269))+((new_r10*sj4))+x268);
evalcond[7]=((((-1.0)*cj4*cj5*x269))+new_r00+((sj4*x262)));
evalcond[8]=((((-1.0)*cj4*x269))+((x262*x266))+new_r11);
evalcond[9]=((((-1.0)*cj5*x263*x265))+(((-1.0)*cj4*x271))+new_r10);
evalcond[10]=(((cj5*x267))+(((-1.0)*new_r21*x264))+x262+((new_r11*x266)));
evalcond[11]=(((cj5*x268))+(((-1.0)*new_r20*x264))+(((-1.0)*x269))+((new_r10*x266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x272 = IKatan2WithCheck((gconst189*new_r21),((-1.0)*gconst189*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x272.valid){
continue;
}
j6array[0]=x272.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x273=IKsin(j6);
IkReal x274=IKcos(j6);
IkReal x275=((1.0)*sj5);
IkReal x276=((1.0)*sj4);
IkReal x277=(cj5*sj4);
IkReal x278=(cj4*new_r01);
IkReal x279=(cj4*new_r00);
IkReal x280=((1.0)*x274);
IkReal x281=(cj5*x273);
IkReal x282=((1.0)*x273);
evalcond[0]=(((sj5*x274))+new_r20);
evalcond[1]=((((-1.0)*x273*x275))+new_r21);
evalcond[2]=(((new_r11*sj4))+x278+x281);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x276))+(((-1.0)*x282)));
evalcond[4]=((((-1.0)*new_r01*x276))+((cj4*new_r11))+(((-1.0)*x280)));
evalcond[5]=(new_r01+((sj4*x274))+((cj4*x281)));
evalcond[6]=(((new_r10*sj4))+x279+(((-1.0)*cj5*x280)));
evalcond[7]=((((-1.0)*cj4*cj5*x280))+new_r00+((sj4*x273)));
evalcond[8]=(((x273*x277))+(((-1.0)*cj4*x280))+new_r11);
evalcond[9]=((((-1.0)*cj4*x282))+new_r10+(((-1.0)*cj5*x274*x276)));
evalcond[10]=(((cj5*x278))+(((-1.0)*new_r21*x275))+x273+((new_r11*x277)));
evalcond[11]=(((cj5*x279))+(((-1.0)*new_r20*x275))+(((-1.0)*x280))+((new_r10*x277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "2ac375a0aaf420715f482953e36187a5"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
